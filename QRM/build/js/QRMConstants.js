var RankPane,AnalysisPane,RiskTablePane,RelMatrixPane,RelationshipPane,ConcurrentPane,CalPane,DashBoard,OverviewPane,uMat,uMatRef,descendantsCurrent = false,pageRiskData = 1,pageProbImpact = 2,pageMitigation = 4,pageResponse = 8,pageConsequence = 16,pageControl = 32,pageObjective = 64,pageAttachment = 128,pageComment = 256,pageAudit = 512,viewExplorer = 1024,viewDashboard = 2048,viewCalendar = 4096,viewMatrix = 8192,viewRanking = 16384,viewSumaryRisk = 32768,viewAnalysis = 65536,viewReview = 131072,viewIncident = 262144,viewOverview = 524288,viewBackground = 1048576,currentEditorMask = 0,defaultViewChoice = 0,selectedCellID,selectedCellClassName,projectTitleStr,tMat,tMatRef,descend = false,projectID,sessionID,userID,userName,loggedOnUser, project,tempIndex = -100,projects,matrices = new Array(),allMatrices = new Array(),allCategories = new Array(),allUsers = new Array(),allObjectives = new Array(),projectMetrics = new Array(),quantTypesValueMap = new Object(),currentMatrix,riskOwners = new Array(),riskManagers = new Array(),primCats = new Array(),secCats = new Array(),riskOwnersIDs = new Array(),riskManagersIDs = new Array(),checkDescendants,currentTab,currentTabNum = 0,currentPaneNum = 0,navigatorInit = false,relMatrixRisks,currentReview,currentRiskObj,currentPane,currentRiskData,managerValueMap,catValueMap,ownerValueMap,riskEditor,_qrmNewRisk = -1,_qrmNewSummaryRisk = -2,//ctrlColor = '#C6DEFF',ctrlColor = '#FFFFFF',viewState = "Regular",currentTabNum,currentTabPane,currentTabID,currentTab,projObjectives,projCats,projType,dirtyEditor = false,RiskController = new Object(),singlePhase = false,zeroProbLimit = 0.00001,projectMap = new Map(),riskProjectEditMode = "risk",reportParamMap = new Map(),mgrAdded = false,explorerSetProject = true,projectValueMap,projectReportValueMap,homePageReports,reportReadyAction = 0,distributionTypeValueMap = {"au.com.quaysystems.qrm.util.probability.NormalDistribution" : "Normal","au.com.quaysystems.qrm.util.probability.TruncNormalDistribution" : "Truncated Normal","au.com.quaysystems.qrm.util.probability.TriangularDistribution" : "Triangular","au.com.quaysystems.qrm.util.probability.TriGenDistribution" : "Truncated Triangular","au.com.quaysystems.qrm.util.probability.SimpleDistribution" : "Simple","au.com.quaysystems.qrm.util.probability.UniformDistribution" : "Uniform","au.com.quaysystems.qrm.util.probability.DiscreteDistribution" : "Discrete","au.com.quaysystems.qrm.util.probability.NullDistribution" : "No Distribution Defined"};distributionTypeValueMapMap = new Map();distributionTypeValueMapMap.put("au.com.quaysystems.qrm.util.probability.NormalDistribution" , "Normal");distributionTypeValueMapMap.put("au.com.quaysystems.qrm.util.probability.TruncNormalDistribution" , "Truncated Normal");distributionTypeValueMapMap.put("au.com.quaysystems.qrm.util.probability.TriangularDistribution" , "Triangular");distributionTypeValueMapMap.put("au.com.quaysystems.qrm.util.probability.TriGenDistribution" , "Truncated Triangular");distributionTypeValueMapMap.put("au.com.quaysystems.qrm.util.probability.SimpleDistribution" , "Simple");distributionTypeValueMapMap.put("au.com.quaysystems.qrm.util.probability.UniformDistribution" , "Uniform");distributionTypeValueMapMap.put("au.com.quaysystems.qrm.util.probability.DiscreteDistribution" , "Discrete");distributionTypeValueMapMap.put("au.com.quaysystems.qrm.util.probability.NullDistribution" , "No Distribution Defined");var BrowserDetect = {		init: function () {			this.browser = this.searchString(this.dataBrowser) || "An unknown browser";			this.version = this.searchVersion(navigator.userAgent)				|| this.searchVersion(navigator.appVersion)				|| "an unknown version";			this.OS = this.searchString(this.dataOS) || "an unknown OS";		},		searchString: function (data) {			for (var i=0;i<data.length;i++)	{				var dataString = data[i].string;				var dataProp = data[i].prop;				this.versionSearchString = data[i].versionSearch || data[i].identity;				if (dataString) {					if (dataString.indexOf(data[i].subString) != -1)						return data[i].identity;				}				else if (dataProp)					return data[i].identity;			}		},		searchVersion: function (dataString) {			var index = dataString.indexOf(this.versionSearchString);			if (index == -1) return;			return parseFloat(dataString.substring(index+this.versionSearchString.length+1));		},		dataBrowser: [			{				string: navigator.userAgent,				subString: "Chrome",				identity: "Chrome"			},			{ 	string: navigator.userAgent,				subString: "OmniWeb",				versionSearch: "OmniWeb/",				identity: "OmniWeb"			},			{				string: navigator.vendor,				subString: "Apple",				identity: "Safari",				versionSearch: "Version"			},			{				prop: window.opera,				identity: "Opera",				versionSearch: "Version"			},			{				string: navigator.vendor,				subString: "iCab",				identity: "iCab"			},			{				string: navigator.vendor,				subString: "KDE",				identity: "Konqueror"			},			{				string: navigator.userAgent,				subString: "Firefox",				identity: "Firefox"			},			{				string: navigator.vendor,				subString: "Camino",				identity: "Camino"			},			{		// for newer Netscapes (6+)				string: navigator.userAgent,				subString: "Netscape",				identity: "Netscape"			},			{				string: navigator.userAgent,				subString: "MSIE",				identity: "Explorer",				versionSearch: "MSIE"			},			{				string: navigator.userAgent,				subString: "Gecko",				identity: "Mozilla",				versionSearch: "rv"			},			{ 		// for older Netscapes (4-)				string: navigator.userAgent,				subString: "Mozilla",				identity: "Netscape",				versionSearch: "Mozilla"			}		],		dataOS : [			{				string: navigator.platform,				subString: "Win",				identity: "Windows"			},			{				string: navigator.platform,				subString: "Mac",				identity: "Mac"			},			{				   string: navigator.userAgent,				   subString: "iPhone",				   identity: "iPhone/iPod"		    },			{				string: navigator.platform,				subString: "Linux",				identity: "Linux"			}		]	};	BrowserDetect.init();function getCookie(c_name) {	if (document.cookie.length > 0) {		c_start = document.cookie.indexOf(c_name + "=");		if (c_start != -1) {						c_start = c_start + c_name.length + 1;			c_end = document.cookie.indexOf(";", c_start);						if (c_end == -1) {				c_end = document.cookie.length;			}			return unescape(document.cookie.substring(c_start, c_end));		}	}	return "";}function roundDoubleStr(value, precision){		if (value == 0){		return "0.00%";	}	str = value.toString();		catStr = "";	var i = 0;		while (catStr.length < str.indexOf('.') + precision+1) catStr += str.charAt(i++);			return catStr+"%";}function dateParser(key, value) {	var a;	if (typeof value === 'string') {				a = /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/.exec(value);		if (a) {			var d = new Date();			d.setFullYear(+a[1], +a[2] - 1, +a[3]);			d.setHours(+a[4], +a[5], +a[6], 0);			return d;		}		a = /^(\d{4})-(\d{2})-(\d{2})/.exec(value);		if (a) {			return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3]));		}	}	return value;}function dateParserDebug(key, value) {	var a;	if (typeof value === 'string') {		a = /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/.exec(value);		if (a) {			return  new Date(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6], 0);		}		a = /^(\d{4})-(\d{2})-(\d{2})/.exec(value);		if (a) {			return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3]));		}	}	return value;}function simplifyDate(sdParam){		var sd = sdParam;	try {		if (sd == null) {			sd = new Date();		}		var year = sd.getFullYear();		var month = sd.getMonth()+1;		var day = sd.getDate();				var mStr="";		if (month< 10){			mStr=mStr+"0"+month;		} else {		    mStr = mStr+month;		}				var dStr = "";		if (day< 10){			dStr=dStr+"0"+day;		} else {		    dStr = dStr+day;		}					return year+"-"+mStr+"-"+dStr;	} catch (e){		return sd;	}}function Map(){    	// members    	this.keyArray = new Array(); // Keys    	this.valArray = new Array(); // Values            	this.put = function  (key, val ){var elementIndex = this.findIt( key );        if( elementIndex == (-1) )    {        this.keyArray.push( key );        this.valArray.push( val );    }    else    {        this.valArray[ elementIndex ] = val;    }};	this.get = function ( key ){var result = null;    var elementIndex = this.findIt( key );    if( elementIndex != (-1) )    {           result = this.valArray[ elementIndex ];    }          return result;};	this.remove = function ( key ){   var elementIndex = this.findIt( key );    if( elementIndex != (-1) )    {        this.keyArray = this.keyArray.removeAt(elementIndex);        this.valArray = this.valArray.removeAt(elementIndex);    }          return ;};	this.size = function (){ return (this.keyArray.length);  };	this.clear = function () {while (this.keyArray.length > 0) { this.keyArray.pop(); this.valArray.pop(); }};	this.keySet = function (){ return (this.keyArray);};	this.valSet = function (){return (this.valArray);   };	this.showMe = function (){var result = "";        for( var i = 0; i < this.keyArray.length; i++ )    {        result += "Key: " + this.keyArray[ i ] + "\tValues: " + this.valArray[ i ] + "\n";    }    return result;};	this.findIt = function ( key ){    var result = (-1);    for( var i = 0; i < this.keyArray.length; i++ )    {        if( this.keyArray[ i ] == key )        {            result = i;            break;        }    }    return result;};	this.removeAt = function ( index ){  var part1 = this.slice( 0, index);  var part2 = this.slice( index+1 );  return( part1.concat( part2 ) );};}//Datasourcesfunction createDataSources(){isc.RestDataSource.create({    ID: "contextReportsDS",    dataFormat: "xml",    fields: [{        name: "id",        title: "id"    }, {        name: "reportName",        title: "Report Name",        align: "left"    }],    recordXPath: "//response/data/record",    transformRequest: function(dsRequest){        var params = {            NOCACHE: Math.random()        };        return isc.addProperties({}, dsRequest.data, params);    },    fetchDataURL: "./getContextReports"});isc.RestDataSource.create({    ID: "registerReportsDS",    dataFormat: "xml",    fields: [{        name: "id",        title: "id"    }, {        name: "reportName",        title: "Report Name",        align: "left"    }],    recordXPath: "//response/data/record",    transformRequest: function(dsRequest){        var params = {            NOCACHE: Math.random()        };        return isc.addProperties({}, dsRequest.data, params);    },    fetchDataURL: "./getRegisterReports"});isc.RestDataSource.create({    ID: "riskReportsDS",    dataFormat: "xml",    fields: [{        name: "id",        title: "id"    }, {        name: "reportName",        title: "Report Name",        align: "left"    }],    recordXPath: "//response/data/record",    transformRequest: function(dsRequest){        var params = {            NOCACHE: Math.random()        };        return isc.addProperties({}, dsRequest.data, params);    },    fetchDataURL: "./getRiskReports"});isc.RestDataSource.create({    ID: "analToolDS",    fields: [{        name: "title",        title: "Analysis Tool",        type: "string"    }, {        name: "clazz",        type: "string"    }, {        name: "param1",        type: "string"    }, {        name: "b3D",        type: "boolean"    }, {        name: "bTol",        type: "boolean"    }, {        name: "bNumElem",        type: "boolean"    }, {        name: "bReverse",        type: "boolean"    }],    fetchDataURL: "./getAnalToolsFetch"});isc.RestDataSource.create({    ID: "userTemplateDS",    titleField:"templateName",    fields: [{        name: "templateName",        type: "string"    }, {        name: "template",        type: "string"    }],    fetchDataURL: "./getUserImportTemplate"});// Datasource to supply the pick list isc.DataSource.create({    ID: "riskSelectGridDS",    fields: [{        name: "riskProjectCode",        title: "Risk Code",        primaryKey:true    }, {        name: "title",        title: "Risk Title"    }],    dataFormat: "json",    clientOnly: true,    testData: "[{}]",    transformResponse: function(dsResponse, dsRequest, data){        dsResponse.data = relMatrixRisks;        dsResponse.totalRows = relMatrixRisks.length;        dsResponse.startRow = 0;        dsResponse.endRow = relMatrixRisks.length - 1;    }});isc.RestDataSource.create({    ID: "reviewSelectGridDS",    fields: [{        name: "title",        title: "Review Title",        type:"text"    },{    	name:"scheduledDate",    	title:"Scheduled Date",    	type:"date",    	width:150    },{    	name:"actualDate",    	title:"Actual Date",    	type:"date"    },{    	name:"reviewID",    	hidden:true,    	primaryKey:true    }, {    	name:"reviewComplete",	    	title:"Complete",     	type:"boolean"    }],   fetchDataURL: "./getExistingReviews"});isc.RestDataSource.create({    ID: "incidentSelectGridDS",    fields: [{        name: "title",        title: "Incident Title"    },{    	name:"incidentDate",    	title:"Incident Date"    },{    	name:"incidentID",    	hidden:true,    	primaryKey:true    }],   fetchDataURL: "./getExistingIncidents"});}var dateEnd = new Date();dateEnd.setFullYear(dateEnd.getFullYear()+10,12,31);isc.DateItem.addProperties({"endDate": dateEnd});RiskController.riskID = 0;RiskController.dirty = false;RiskController.allowEditorChanges = true;RiskController.secAllowEdit = false;RiskController.currentRisk = null;Date.setShortDisplayFormat("toEuropeanShortDate");Date.setNormalDisplayFormat("toLocaleString");isc.setAutoDraw(false);Array.prototype.clear = function(){	this.length = 0;};isc.RPCManager.addClassProperties({    handleTransportError : function (transactionNum, status, httpResponseCode, httpResponseText) {           if (httpResponseCode == 401 || httpResponseCode == 405){               if (httpResponseText.indexOf("LOGGEDOUT") != -1){            	   isc.say("Logged out of Quay Risk Manager", function(){window.open(httpResponseText.split("*")[1], "_self");});               } else {            	   isc.say("Your session has expired or is invalid. You will need to login to Quay Risk Manager.", function(){window.open("./login.jsp", "_self");});               }           } else {        	   isc.say("An error occured processing your request. The server may be offline. You will need to login to Quay Risk Manager again.", function(){window.open("./login.jsp", "_self");});           }    }});