var descend = false;var projectID;var userID;var userName;var project;var tempIndex = -100;var projects;var primCats = new Array();var secCats = new Array();var viewState = "Regular";var projObjectives;var projCats;var projType;var qrmCtrlColor = '#FFFFFF';var qrmProjectMap = new Map();var dateEnd = new Date();var ajaxRequest;var qoStakeHolders = {   RiskOwners: new Array(),   RiskManagers: new Array(),   RiskOwnersIDs: new Array(),   RiskManagersIDs: new Array()};var qoRiskController = new Object();var qoRiskEditor = new RiskEditor();var qoProjectManager = new ProjectManager();var qoReportEngine = new ReportEngine();var qoValueMap = {   manager: null,   categories: null,   owner: null,   project: null,   projectReport: null,   distributionTypeMap: new Map(),   quantTypes: new Object(),   distributionType: {      "au.com.quaysystems.qrm.util.probability.NormalDistribution": "Normal",      "au.com.quaysystems.qrm.util.probability.TruncNormalDistribution": "Truncated Normal",      "au.com.quaysystems.qrm.util.probability.TriangularDistribution": "Triangular",      "au.com.quaysystems.qrm.util.probability.TriGenDistribution": "Truncated Triangular",      "au.com.quaysystems.qrm.util.probability.SimpleDistribution": "Simple",      "au.com.quaysystems.qrm.util.probability.UniformDistribution": "Uniform",      "au.com.quaysystems.qrm.util.probability.DiscreteDistribution": "Discrete",      "au.com.quaysystems.qrm.util.probability.NullDistribution": "No Distribution Defined"   },   init: function () {      this.distributionTypeMap.put("au.com.quaysystems.qrm.util.probability.NormalDistribution", "Normal");      this.distributionTypeMap.put("au.com.quaysystems.qrm.util.probability.TruncNormalDistribution", "Truncated Normal");      this.distributionTypeMap.put("au.com.quaysystems.qrm.util.probability.TriangularDistribution", "Triangular");      this.distributionTypeMap.put("au.com.quaysystems.qrm.util.probability.TriGenDistribution", "Truncated Triangular");      this.distributionTypeMap.put("au.com.quaysystems.qrm.util.probability.SimpleDistribution", "Simple");      this.distributionTypeMap.put("au.com.quaysystems.qrm.util.probability.UniformDistribution", "Uniform");      this.distributionTypeMap.put("au.com.quaysystems.qrm.util.probability.DiscreteDistribution", "Discrete");      this.distributionTypeMap.put("au.com.quaysystems.qrm.util.probability.NullDistribution", "No Distribution Defined");   }};var qoCurrent = {   currentTabNum: 0,   currentPaneNum: 0};var qoAll = {   Matrices: new Array(),   Categories: new Array(),   Users: new Array(),   Objectives: new Array(),   clear: function () {      this.Matrices.clear();      this.Categories.clear();      this.Users.clear();      this.Objectives.clear();   }};var qoQRM = {   currentEditorMask: 0,   pageRiskData: 1,   pageProbImpact: 2,   pageMitigation: 4,   pageResponse: 8,   pageConsequence: 16,   pageControl: 32,   pageObjective: 64,   pageAttachment: 128,   pageComment: 256,   pageAudit: 512,   defaultViewChoice: 0,   qrmNewRisk: -1,   qrmNewSummaryRisk: -2,   qrmNewPropogatedRisk: -3,   selectedCellID: null,   selectedCellClassName: null,   singlePhase: false,   uMat: null,   uMatRef: null,   tMat: null,   tMatRef: null,   relMatrixRisks: null,   loggedOnUser: null,   projectTitleStr: null,   navigatorInit: false,   descendantsCurrent: false,   mgrAdded: false,   explorerSetProject: true,      riskProjectEditMode : "risk",   updateProgress: function (evt) {      if (evt.lengthComputable) {         var percentComplete = 100 * evt.loaded / evt.total;         $(fileUploadProgress).html("Uploading " + this.roundDoubleStr(percentComplete, -1) + " Complete");      }   },   submitAttachment: function (bFileImport) {      try {         if ('undefined' === typeof window.FormData) {            alert("Your Browser does not support QRM's attachment mechanism");            return;         }         var submiturl;         if (bFileImport) {            submiturl = "./importRisk?uploadRisks=true";         } else {            submiturl = "./QRMAttachment?saveAttachment=true";         }         var formData = new FormData($("form#data")[0]);         $.ajax({            url: submiturl,            type: "POST",            data: formData,            processData: false,            contentType: false,            error: function (jqXHR, textStatus, errorThrown) {               alert(errorThrown);               try {                  qoQRM.formSubmitReturnError(); // what to do when               } catch (e) {                  alert(e.message);               }            },            success: function (data, status) {               if (bFileImport) {                  qoQRM.formSubmitReturn(data);                  return;               }               try {                  eval(data);               } catch (e) {                  alert(data);               }               try {                  qoQRM.formSubmitReturn(); // what to do when               } catch (e) {                  alert(e.message);               }            },            xhr: function () {               var myXhr = $.ajaxSettings.xhr();               if (myXhr.upload) { // check if upload property exists                  myXhr.upload.addEventListener('progress', qoQRM.updateProgress, false);               }               return myXhr;            },         });      } catch (e) {         alert(e.message);      }   },   roundDoubleStr: function (value, precision) {      if (value == 0) {         return "0.00%";      }      if (value == 100) {         return "100%";      }      var str = value.toString();      var catStr = "";      var i = 0;      while (catStr.length < str.indexOf('.') + precision + 1)      catStr += str.charAt(i++);      return catStr + "%";   },   defineQRMButtons: function () {      isc.defineClass("QRMSaveButton", "IButton");      isc.defineClass("QRMEditButton", "IButton");      isc.defineClass("QRMDeleteButton", "IButton");      isc.defineClass("QRMAddButton", "IButton");      isc.defineClass("QRMRefreshButton", "IButton");      isc.defineClass("QRMExportButton", "IButton");      isc.defineClass("QRMCancelButton", "IButton");      isc.defineClass("QRMFinishButton", "IButton");      isc.QRMSaveButton.addProperties({         title: "Save",         icon: "[SKIN]/actions/save.png",         width: 100,         showDisabledIcon: false      });      isc.QRMExportButton.addProperties({         title: "Export",         icon: "[SKIN]/actions/download.png",         width: 100,         showDisabledIcon: false      });      isc.QRMEditButton.addProperties({         title: "Edit",         icon: "[SKIN]/actions/edit.png",         width: 100,         showDisabledIcon: true      });      isc.QRMDeleteButton.addProperties({         title: "Delete",         icon: "[SKIN]/actions/remove.png",         width: 100,         showDisabledIcon: true      });      isc.QRMCancelButton.addProperties({         title: "Cancel",         icon: "[SKIN]/actions/close.png",         width: 100,         showDisabledIcon: true      });      isc.QRMAddButton.addProperties({         title: "Save",         icon: "[SKIN]/actions/add.png",         width: 100,         showDisabledIcon: false      });      isc.QRMFinishButton.addProperties({         title: "OK",         icon: "[SKIN]/actions/ok.png",         width: 100,         showDisabledIcon: false      });      isc.QRMRefreshButton.addProperties({         title: "Refresh",         icon: "[SKIN]/actions/refresh.png",         width: 100,         showDisabledIcon: false      });   },   defineDataSources: function () {      /*       * Define all the datasources       */      isc.RestDataSource.create({         ID: "contextReportsDS",         dataFormat: "xml",         fields: [{            name: "id",            title: "id"         }, {            name: "reportName",            title: "Report Name",            align: "left"         }],         recordXPath: "//response/data/record",         transformRequest: function (dsRequest) {            var params = {               NOCACHE: Math.random()            };            return isc.addProperties({}, dsRequest.data, params);         },         fetchDataURL: "./getContextReports"      });      isc.RestDataSource.create({         ID: "registerReportsDS",         dataFormat: "xml",         fields: [{            name: "id",            title: "id"         }, {            name: "reportName",            title: "Report Name",            align: "left"         }],         recordXPath: "//response/data/record",         transformRequest: function (dsRequest) {            var params = {               NOCACHE: Math.random()            };            return isc.addProperties({}, dsRequest.data, params);         },         fetchDataURL: "./getRegisterReports"      });      isc.RestDataSource.create({         ID: "riskReportsDS",         dataFormat: "xml",         fields: [{            name: "id",            title: "id"         }, {            name: "reportName",            title: "Report Name",            align: "left"         }],         recordXPath: "//response/data/record",         transformRequest: function (dsRequest) {            var params = {               NOCACHE: Math.random()            };            return isc.addProperties({}, dsRequest.data, params);         },         fetchDataURL: "./getRiskReports"      });      isc.RestDataSource.create({         ID: "analToolDS",         fields: [{            name: "title",            title: "Analysis Tool",            type: "string"         }, {            name: "clazz",            type: "string"         }, {            name: "param1",            type: "string"         }, {            name: "b3D",            type: "boolean"         }, {            name: "bTol",            type: "boolean"         }, {            name: "bNumElem",            type: "boolean"         }, {            name: "bReverse",            type: "boolean"         }],         fetchDataURL: "./getAnalToolsFetch"      });      isc.RestDataSource.create({         ID: "userTemplateDS",         titleField: "templateName",         fields: [{            name: "templateName",            type: "string"         }, {            name: "template",            type: "string"         }],         fetchDataURL: "./getUserImportTemplate"      });      // Datasource to supply the pick list      isc.DataSource.create({         ID: "riskSelectGridDS",         fields: [{            name: "riskProjectCode",            title: "Risk Code",            primaryKey: true         }, {            name: "title",            title: "Risk Title"         }],         dataFormat: "json",         clientOnly: true,         testData: "[{}]",         transformResponse: function (dsResponse, dsRequest, data) {            dsResponse.data = qoQRM.relMatrixRisks;            dsResponse.totalRows = qoQRM.relMatrixRisks.length;            dsResponse.startRow = 0;            dsResponse.endRow = qoQRM.relMatrixRisks.length - 1;         }      });      isc.RestDataSource.create({         ID: "reviewSelectGridDS",         fields: [{            name: "title",            title: "Review Title",            type: "text"         }, {            name: "scheduledDate",            title: "Scheduled Date",            type: "date",            width: 150         }, {            name: "actualDate",            title: "Actual Date",            type: "date"         }, {            name: "reviewID",            hidden: true,            primaryKey: true         }, {            name: "reviewComplete",            title: "Complete",            type: "boolean"         }],         fetchDataURL: "./getExistingReviews"      });      isc.RestDataSource.create({         ID: "incidentSelectGridDS",         fields: [{            name: "title",            title: "Incident Title"         }, {            name: "incidentDate",            title: "Incident Date"         }, {            name: "incidentID",            hidden: true,            primaryKey: true         }],         fetchDataURL: "./getExistingIncidents"      });      isc.RestDataSource.create({         ID: "riskLiteDS",         dataFormat: "xml",         fields: [{            name: "riskProjectCode",            title: "Risk Code"         }, {            name: "title",            title: "Title",            align: "left"         }, {            name: "description",            title: "Risk Description"         }, {            name: "startExposure",            title: "Start of Exposure",            type: "date",            align: "center"         }, {            name: "endExposure",            title: "End of Exposure",            type: "date",            align: "center"         }, {            name: "ownerName",            title: "Owner",            align: "center"         }, {            name: "parentRiskProjectCode",            title: "Parent Risk",            align: "center"         }, {            name: "manager1Name",            title: "Manager",            align: "center"         }, {            name: "cause",            title: "Cause"         }, {            name: "treatedImpact",            title: "Treated Impact",            type: "double",            align: "center"         }, {            name: "treatedProb",            title: "Treated Prob",            type: "double",            align: "center"         }, {            name: "inherentImpact",            title: "Inherent Impact",            type: "double",            align: "center"         }, {            name: "inherentProb",            title: "Inherent Prob",            type: "double",            align: "center"         }, {            name: "treatedTolerance",            title: "Treated Tolerance",            type: "integer",            align: "center"         }, {            name: "currentTolerance",            title: "Current Tolerance",            type: "integer",            align: "center"         }, {            name: "riskID",            title: "Risk ID",            type: "integer",            align: "center",            primaryKey: true         }, {            name: "dateIDRev",            title: "Reviewed",            type: "date",            align: "center"         }, {            name: "dateEvalRev",            title: "Reviewed",            type: "date",            align: "center"         }, {            name: "dateMitRev",            title: "Reviewed",            type: "date",            align: "center"         }, {            name: "dateIDApp",            title: "Approved",            type: "date",            align: "center"         }, {            name: "dateEvalApp",            title: "Approved",            type: "date",            align: "center"         }, {            name: "dateMitApp",            title: "Approved",            type: "date",            align: "center"         }, {            name: "promotionCode",            title: "Promoted",            align: "center"         }, {            name: "active",            title: "Active",            type: "boolean"         }, {            name: "summaryRisk",            title: "Summary Risk",            type: "boolean"         }, {            name: "treated",            title: "Treated",            type: "boolean"         }],         fetchDataURL: "./getRiskLiteFetch"      });      isc.RestDataSource.create({         ID: "riskLiteParentDS",         dataFormat: "xml",         fields: [{            name: "riskProjectCode",            title: "Risk Code"         }, {            name: "title",            title: "Title",            align: "left"         }, {            name: "description",            title: "Risk Description"         }, {            name: "startExposure",            title: "Start of Exposure",            type: "date",            align: "center"         }, {            name: "endExposure",            title: "End of Exposure",            type: "date",            align: "center"         }, {            name: "ownerName",            title: "Owner",            align: "center"         }, {            name: "parentRiskProjectCode",            title: "Parent Risk",            align: "center"         }, {            name: "manager1Name",            title: "Manager",            align: "center"         }, {            name: "cause",            title: "Cause"         }, {            name: "treatedImpact",            title: "Treated Impact",            type: "double",            align: "center"         }, {            name: "treatedProb",            title: "Treated Prob",            type: "double",            align: "center"         }, {            name: "inherentImpact",            title: "Inherent Impact",            type: "double",            align: "center"         }, {            name: "inherentProb",            title: "Inherent Prob",            type: "double",            align: "center"         }, {            name: "treatedTolerance",            title: "Treated Tolerance",            type: "integer",            align: "center"         }, {            name: "currentTolerance",            title: "Current Tolerance",            type: "integer",            align: "center"         }, {            name: "riskID",            title: "Risk ID",            type: "integer",            align: "center",            primaryKey: true         }, {            name: "dateIDRev",            title: "Reviewed",            type: "date",            align: "center"         }, {            name: "dateEvalRev",            title: "Reviewed",            type: "date",            align: "center"         }, {            name: "dateMitRev",            title: "Reviewed",            type: "date",            align: "center"         }, {            name: "dateIDApp",            title: "Approved",            type: "date",            align: "center"         }, {            name: "dateEvalApp",            title: "Approved",            type: "date",            align: "center"         }, {            name: "dateMitApp",            title: "Approved",            type: "date",            align: "center"         }, {            name: "promotionCode",            title: "Promoted",            align: "center"         }, {            name: "active",            title: "Active",            type: "boolean"         }, {            name: "summaryRisk",            title: "Summary Risk",            type: "boolean"         }, {            name: "treated",            title: "Treated",            type: "boolean"         }],         fetchDataURL: "./getRiskLiteFetch"      });      isc.RestDataSource.create({         ID: "allRiskStakeholdersDS",         fields: [{            name: "name",            title: "Name"         }, {            name: "email",            title: "Email"         }, {            name: "stakeholderID",            title: "StakeholderID"         }, {            name: "compoundName",            title: "Role"         }],         fetchDataURL: "./getAllRiskStakeholdersDS"      });      isc.RestDataSource.create({         ID: "allUsersDS",         fields: [{            name: "name",            title: "Name"         }, {            name: "email",            title: "Email"         }, {            name: "compoundName",            title: "Compound Name"         }],         fetchDataURL: "./getAllRepositoryUsers"      });   },   defineQRMAttachmentForm: function () {      isc.defineClass("QRMAttachmentForm", "HTMLFlow");      isc.QRMAttachmentForm.addProperties({         width: 600,         border: "10px solid white",         showForm: function (hostID, hostType, rtnFunction, rtnFunctionError) {            var template = '<form class="attachmentsUpload" enctype="multipart/form-data" id="data" onsubmit="qoQRM.submitAttachment(); return false;">' + 'Enter the URL of the attachment or select a file to attach' + '<table>' + '<tr><td style="text-align:right"><label>Description</label></td><td colspan="2"><input type="text" size="90" name="description"  /></td></tr>' + '<tr><td colspan="3" style="height:8px"></td></tr> ' + '<tr><td style="text-align:right"><label>URL</label></td><td colspan="2"><input type="text" size="90" name="url" /></td></tr>' + '<tr><td></td><td colspan="2"><em>OR</em></td> ' + '<tr><td></td><td width="160"><div class="upload">' + '<input type="file" name="file" id="fileInputID" onchange="qoQRM.inputFileChange($(this).val())">' + '</div></td><td> <div id="uploadFileName"></div></td></tr>' + '<tr><td></td><td colspan="2" style="text-align:left"><div id = "fileUploadProgress" style="height:20px"></div></td></tr>' + '<tr><td></td><td colspan = "2" style="text-align:right"><input type= "submit" value="Attach" /></td></tr></table>' + '<input type="hidden" name="hostID" value="' + hostID + '" />' + '<input type="hidden" name="hostType" value="' + hostType + '" />' + '</form>';            this.setContents(template);            qoQRM.formSubmitReturn = rtnFunction;            if (rtnFunctionError) {               qoQRM.formSubmitReturnError = rtnFunctionError;            } else {               qoQRM.formSubmitReturnError = rtnFunction;            }         }      });      isc.defineClass("QRMImportAttachmentForm", "HTMLFlow");      isc.QRMImportAttachmentForm.addProperties({         width: 470,         border: "10px solid white",         showForm: function (rtnFunction, rtnFunctionError) {            var template = '<form class="attachmentsUpload" enctype="multipart/form-data" id="data" onsubmit="qoQRM.submitAttachment(true); return false;">' + '<table width="100%">' + '<tr><td></td><td width="160"><div class="upload2">' + '<input type="file" name="file" id="fileInputID" onchange="qoQRM.inputFileChangeUpload($(this).val())">' + '</div></td><td> <div id="uploadFileName"></div></td></tr>' + '<tr><td></td><td colspan="2" style="text-align:left"><div id = "fileUploadProgress" style="height:20px"></div></td></tr>' + '<tr><td></td><td width="100%" colspan = "2" style="text-align:right"><input type= "submit" value="Upload Risk File" /></td></tr></table>' + '</form>';            this.setContents(template);            qoQRM.formSubmitReturn = rtnFunction;            if (rtnFunctionError) {               qoQRM.formSubmitReturnError = rtnFunctionError;            } else {               qoQRM.formSubmitReturnError = rtnFunction;            }         }      });   },   inputFileChange: function (val) {      try {         $(uploadFileName).html(val.split("\\").pop());         $(fileUploadProgress).html("Select \"Attach\" to upload");      } catch (e) {         alert(e.message);      }   },   inputFileChangeUpload: function (val) {      try {         $(uploadFileName).html(val.split("\\").pop());      } catch (e) {         alert(e.message);      }   },   defineQRMLabel: function () {      isc.defineClass("QRMLabel", "Label");      isc.QRMLabel.addProperties({         height: 30,         padding: 5,         align: "left",         valign: "center",         wrap: false,         title: "Title",         template: "<span style='font-size:12px;font-weight:bold;font-famliy:Verdana,sans-serif'>",         initWidget: function () {            this.Super("initWidget", arguments);            this.contents = this.template + this.title + "</span>";         }      });   },   defineQRMRiskEditorLabel: function () {      isc.defineClass("QRMRiskEditorLabel", "Label");      isc.QRMRiskEditorLabel.addProperties({         height: 30,         width: "100%",         padding: 5,         align: "left",         valign: "center",         wrap: false,         title: "Title",         template: "<span style='font-size:14px;font-weight:bold;font-famliy:Verdana,sans-serif'>",         initWidget: function () {            this.Super("initWidget", arguments);            this.contents = this.template + this.title + "</span>";         }      });   },   showHelpWindow: function () {      if (typeof (helpWindow) == "undefined") {         isc.Window.create({            ID: "helpWindow",            title: "Quay Risk Manager Quick Help Guide",            showMinimizeButton: false,            showModalMask: true,            showResizer: false,            canDragReposition: false,            isModal: true,            autoCenter: true,            width: "95%",            height: "95%",            items: [            isc.Label.create({               contents: "<span style=\"padding:9px 10px;\" class='qrmMajorTitle'>Quay Risk Manager Quick Help Guide<span>",               height: 25,               width: "100%"            }), isc.Label.create({               contents: "<span style=\"padding:9px 10px;\" class='qrmSemiMajorTitle'>Select the topic for guided assistance<span>",               height: 25,               width: "100%"            }),            isc.HTMLPane.create({               width: "100%",               height: "100%",               contents: "<div style=\"overflow: hidden;\">" + "<div onclick=\"qoHelper.newRisk();\" style=\"float:left;width:160px;height:26px;margin-top:10px;margin-left:5px\" class=\"css_btn_class\"><center>Create New Risk</center></div>" + "<div onclick=\"qoHelper.runReport();\" style=\"float:left;width:160px;height:26px;margin-top:10px;margin-left:5px\" class=\"css_btn_class\"><center>Run a Report</center></div>" + "<div onclick=\"qoHelper.promoteRisk();\" style=\"float:left;width:160px;height:26px;margin-top:10px;margin-left:5px\" class=\"css_btn_class\"><center>Promote a Risk</center></div>" + "</div>"            })]         });      }      helpWindow.show();   },   checkTableSelection: function () {      if (viewState == "Regular") {         return true;      } else {         alert("Please Use The 'Regular' Table Format View");         return false;      }   },   init: function () {      this.defineDataSources();      this.defineQRMButtons();      this.defineQRMAttachmentForm();      try {         defineRelMatrixWidget();         defineRelMatrixItem();         defineRiskMatrixItem();         defineAnalysisWidget();         defineSubjectiveRankWidget();         defineRelationshipWidget();         defineReportWidget();         defineQRMTileImage();         defineOverviewWidget();         defineRiskTableWidget();         defineRiskCalendar();         defineRiskConsequenceProbWidget();      } catch (e) {         alert("Define Component Error " + e.message);      }      this.defineQRMRiskEditorLabel();      this.defineQRMLabel();      qoQRM.RankPane = isc.SubjectiveRankWidget.create();      qoQRM.AnalysisPane = isc.AnalysisWidget.create();      qoQRM.RiskTablePane = isc.RiskTableWidget.create();      qoQRM.RelMatrixPane = isc.RelMatrixWidget.create();      qoQRM.RelationshipPane = isc.RelationshipWidget.create();      qoQRM.ConcurrentPane = isc.ConcurrentWidget.create();      qoQRM.CalPane = isc.CalendarWidget.create();      qoQRM.OverviewPane = isc.OverviewWidget.create();      qoQRM.IncidentPane = getIncidentWidgetPane();      qoQRM.ReviewPane = getReviewPane();   }};var qoHelper = {   showHelpWindow: function (var_contents, var_title) {      isc.Window.create({         showMinimizeButton: false,         showHeaderIcon: false,         canDragReposition: true,         width: 300,         height: 400,         left: 50,         top: 50,         title: var_title,         backgroundColor: "#ffffd0",         isModal: true,         showModalMask: false,         autoDraw: true,         items: [isc.Label.create({            width: "100%",            height: "100%",            styleName: "exampleTitle",            align: "center",            valign: "center",            padding: 10,            showEdges: false,            contents: var_contents         })]      });   },   newRisk: function () {      helpWindow.hide();      RiskTableWindow.selectTab("ExplorerPaneID");      newRisk(-1);      this.showHelpWindow("Enter the required information and then select 'Submit'", "QRM Guide - New Risk");   },   runReport: function () {      helpWindow.hide();      RiskTableWindow.selectTab("ReportPaneID");      qoReportEngine.selectAndRunReport();      this.showHelpWindow("Select the report you wish to run and then select 'Execute Report'", "QRM Guide - Run a Report");   },   promoteRisk: function () {      helpWindow.hide();      RiskTableWindow.selectTab("ExplorerPaneID");      this.showHelpWindow("A 'promoted' risk will appear in the list of risks for a project higher up in the project heirarchy<br/>This allows attention to be put on the risk while retaining controller within the risk project.<br/><br/>Click on and drag a risk from the Risk Explorer to the project in the Project Navigator to which you want to promote the risk", "QRM Guide - Promote a Risk");   }};var BrowserDetect = {   init: function () {      this.browser = this.searchString(this.dataBrowser) || "An unknown browser";      this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";      this.OS = this.searchString(this.dataOS) || "an unknown OS";   },   searchString: function (data) {      for (var i = 0; i < data.length; i++) {         var dataString = data[i].string;         var dataProp = data[i].prop;         this.versionSearchString = data[i].versionSearch || data[i].identity;         if (dataString) {            if (dataString.indexOf(data[i].subString) != -1) return data[i].identity;         } else if (dataProp) return data[i].identity;      }   },   searchVersion: function (dataString) {      var index = dataString.indexOf(this.versionSearchString);      if (index == -1) return;      return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));   },   dataBrowser: [{      string: navigator.userAgent,      subString: "Chrome",      identity: "Chrome"   }, {      string: navigator.userAgent,      subString: "OmniWeb",      versionSearch: "OmniWeb/",      identity: "OmniWeb"   }, {      string: navigator.vendor,      subString: "Apple",      identity: "Safari",      versionSearch: "Version"   }, {      prop: window.opera,      identity: "Opera",      versionSearch: "Version"   }, {      string: navigator.vendor,      subString: "iCab",      identity: "iCab"   }, {      string: navigator.vendor,      subString: "KDE",      identity: "Konqueror"   }, {      string: navigator.userAgent,      subString: "Firefox",      identity: "Firefox"   }, {      string: navigator.vendor,      subString: "Camino",      identity: "Camino"   }, {      string: navigator.userAgent,      subString: "Netscape",      identity: "Netscape"   }, {      string: navigator.userAgent,      subString: "MSIE",      identity: "Explorer",      versionSearch: "MSIE"   }, {      string: navigator.userAgent,      subString: "Gecko",      identity: "Mozilla",      versionSearch: "rv"   }, {      string: navigator.userAgent,      subString: "Mozilla",      identity: "Netscape",      versionSearch: "Mozilla"   }],   dataOS: [{      string: navigator.platform,      subString: "Win",      identity: "Windows"   }, {      string: navigator.platform,      subString: "Mac",      identity: "Mac"   }, {      string: navigator.userAgent,      subString: "iPhone",      identity: "iPhone/iPod"   }, {      string: navigator.platform,      subString: "Linux",      identity: "Linux"   }]};function RiskEditor() {   this.displayRisk = function (risk) {      if (risk.primCatID === 0) {         risk.primCatID = null;      }      if (risk.secCatID === 0) {         risk.secCatID = null;      }      riskBasicForm.clearValues();      riskBasicForm.getItem("ownerID").setValueMap(qoValueMap.owner);      riskBasicForm.getItem("manager1ID").setValueMap(qoValueMap.manager);      riskBasicForm.getItem("primCatID").setValueMap(qoValueMap.categories);      riskBasicForm.setValues(risk);      riskBasicForm.getItem("summaryRisk").enable();      try {         riskBasicForm.getItem("secCatID").setValueMap(secCats[risk.primCatID].getValueMap("secCatID", "name"));      } catch (e) {         riskBasicForm.getItem("secCatID").setValueMap({});         riskBasicForm.getItem("secCatID").setValue(null);      }      if (risk.forceDownParent || risk.summaryRisk) {         riskTabSet.setTabTitle(3, "Contributing Risks & Stakeholders");      } else {         riskTabSet.setTabTitle(3, "Contributing Stakeholders");      }      riskBasicForm.getField('estimatedContingencey').setDisabled(      riskBasicForm.getField('useCalculatedContingency').getValue());      if (!project.useAdvancedConsequences) {         riskBasicForm.getField('estimatedContingencey').setDisabled(false);      }      if (qoQRM.currentEditorMask & qoQRM.pageObjective) {         try {            qoAll.Objectives.setProperty("active", false);            RiskObjectiveTree.setData(isc.Tree.create({               modelType: "parent",               nameProperty: "objective",               idField: "objectiveID",               parentIdField: "parentID",               data: qoAll.Objectives            }));            var objs = risk.objectivesImpacted;            for (var i = 0; i < objs.length; i++) {               RiskObjectiveTree.data.data.find("objectiveID", objs[i]).active = true;            }            RiskObjectiveTree.getData().openAll();         } catch (e) {            isc.say(e);         }      }      if (qoQRM.currentEditorMask & qoQRM.pageMitigation) {         riskMitPlanSummaryForm.setValues(risk);         try {            var mitPlan = risk.mitigationPlan.findAll("response", 0);            if (mitPlan == null) {               riskEditorMitPlanTable.setData([]);               riskEditorCommentMitPlanTable.setData([]);            } else {               riskEditorMitPlanTable.setData(mitPlan);               riskEditorCommentMitPlanTable.setData(mitPlan);            }         } catch (e) {            alert(e);         }      }      if (qoQRM.currentEditorMask & qoQRM.pageResponse) {         try {            var resPlan = risk.mitigationPlan.findAll("response", 1);            if (resPlan == null) {               riskEditorResponseTable.setData([]);            } else {               riskEditorResponseTable.setData(resPlan);            }         } catch (e) {            alert(e);         }      }      if (qoQRM.currentEditorMask & qoQRM.pageControl) {         try {            riskEditorControlTable.setData(risk.controls);         } catch (e) {            isc.say(e);         }      }      for (var i = 0; i < riskTabSet.tabs.length; i++) {         try {            var thisTab = riskTabSet.getTab(i);            var title = thisTab.title;            if (title.charAt(title.length - 1) == "*") {               riskTabSet.setTabTitle(thisTab, title.substring(0, title.length - 1));            }         } catch (e1) {            isc.say(e1);         }      }   };   this.getRiskEditorEvalLayout = function () {      var form = isc.DynamicForm.create({         ID: "riskBasicForm",         numCols: 4,         autoDraw: false,         titleWidth: 170,         hiliteRequiredFields: true,         width: "100%",         fields: [{            name: "title",            type: "text",            title: "Risk Title",            width: "100%",            colSpan: 4,            changed: "riskBasicEditorLayout.changed();",            required: true         }, {            name: "summaryRisk",            title: "Summary Risk",            defaultValue: false,            changed: "riskBasicEditorLayout.changed();",            type: "checkbox"         }, {            name: "description",            width: "100%",            type: "textarea",            required: true,            colSpan: 4,            height: 85,            changed: "riskBasicEditorLayout.changed();",            title: "Description"         }, {            name: "consequences",            width: "100%",            title: "Consequences",            colSpan: 4,            height: 85,            required: true,            changed: "riskBasicEditorLayout.changed();",            type: "textarea"         }, {            name: "cause",            width: "100%",            title: "Possible Causes",            height: 85,            colSpan: 4,            changed: "riskBasicEditorLayout.changed();",            type: "textarea"         }, {            name: "impact",            width: "100%",            title: "Areas Affected",            height: 85,            colSpan: 4,            changed: "riskBasicEditorLayout.changed();",            type: "textarea"         }, {            name: "estimatedContingencey",            title: "Estimated Contigency",            required: false,            type: "double",            allowEmptyValue: true,            changed: "riskBasicEditorLayout.changed();",            validators: [{               type: "floatRange",               min: 0            }],            keyPressFilter: "[0-9.]"         }, {            name: "useCalculatedContingency",            title: "Use Calculated Contingency",            required: false,            type: "checkbox",            changed: "riskBasicForm.getField('estimatedContingencey').setDisabled(value);riskBasicEditorLayout.changed();",            showTitle: false,            showIf: "project.useAdvancedConsequences == true"         }, {            name: "securityLevel",            title: "Security Level",            required: true,            type: "select",            valueMap: {               0: "Public",               1: "Restricted",               2: "Private"            },            allowEmptyValue: false,            colSpan: 4,            changed: "riskBasicEditorLayout.changed();"         }, {            name: "ownerID",            width: 200,            title: "Risk Owner",            required: true,            type: "select",            allowEmptyValue: false,            changed: "riskBasicEditorLayout.changed();",            startRow: true         }, {            type: "header",            defaultValue: "Impact",            startRow: false         }, {            name: "manager1ID",            width: 200,            title: "Risk Manager",            required: true,            type: "select",            allowEmptyValue: false,            changed: "riskBasicEditorLayout.changed();",            startRow: true         }, {            name: "impReputation",            width: 200,            title: "Reputation",            type: "checkbox",            defaultValue: false,            changed: "riskBasicEditorLayout.changed();",            showTitle: false         }, {            name: "impSafety",            width: 200,            title: "Human Safety",            type: "checkbox",            defaultValue: false,            changed: "riskBasicEditorLayout.changed();",            showTitle: false         }, {            name: "treated",            width: 200,            title: "Treated Risk",            type: "checkbox",            defaultValue: false,            changed: "riskBasicEditorLayout.changed();",            startRow: true         }, {            name: "impSpec",            width: 200,            title: "Specification",            showTitle: false,            defaultValue: false,            changed: "riskBasicEditorLayout.changed();",            type: "checkbox"         }, {            name: "impTime",            width: 200,            title: "Schedule",            showTitle: false,            defaultValue: false,            changed: "riskBasicEditorLayout.changed();",            type: "checkbox"         }, {            name: "startExposure",            width: 300,            title: "Start of Exposure",            type: "date",            changed: "riskBasicEditorLayout.changed();",            startRow: true         }, {            name: "impCost",            width: 200,            title: "Cost",            defaultValue: false,            type: "checkbox",            changed: "riskBasicEditorLayout.changed();",            showTitle: false         }, {            name: "impEnvironment",            width: 200,            title: "Environment",            defaultValue: false,            type: "checkbox",            changed: "riskBasicEditorLayout.changed();",            showTitle: false         }, {            name: "endExposure",            width: 300,            title: "End of Exposure",            type: "date",            changed: "riskBasicEditorLayout.changed();",            startRow: true         }, {            type: "header",            defaultValue: "Treatment Strategy",            startRow: false         }, {            name: "primCatID",            width: 200,            title: "Primary Category",            type: "select",            allowEmptyValue: true,            startRow: true,            autoFetchData: false,            changed: function () {               riskBasicEditorLayout.changed();               try {                  riskBasicForm.getItem("secCatID").setValueMap(                  secCats[riskBasicForm.getItem("primCatID").getValue()].getValueMap("secCatID", "name"));               } catch (e) {                  riskBasicForm.getItem("secCatID").setValueMap({});               }               riskBasicForm.getItem("secCatID").setValue(null);            }         }, {            width: 200,            title: "Avoidence",            defaultValue: false,            type: "checkbox",            name: "treatmentAvoidance",            changed: "riskBasicEditorLayout.changed();",            showTitle: false         }, {            width: 200,            title: "Reduction",            defaultValue: false,            type: "checkbox",            name: "treatmentReduction",            changed: "riskBasicEditorLayout.changed();",            showTitle: false         }, {            name: "secCatID",            width: 200,            title: "Secondary Category",            type: "select",            allowEmptyValue: true,            startRow: true,            changed: "riskBasicEditorLayout.changed();",            autoFetchData: false         }, {            width: 200,            title: "Retention",            name: "treatmentRetention",            defaultValue: false,            type: "checkbox",            changed: "riskBasicEditorLayout.changed();",            showTitle: false         }, {            width: 200,            title: "Transfer/Sharing",            name: "treatmentTransfer",            defaultValue: false,            type: "checkbox",            changed: "riskBasicEditorLayout.changed();",            showTitle: false         }, {            name: "riskID",            _constructor: "HiddenItem"         }, {            name: "projectID",            _constructor: "HiddenItem"         }]      });      return isc.VLayout.create({         members: [form],         dirty: false,         ID: "riskBasicEditorLayout",         changed: function () {            riskBasicEditorLayout.dirty = true;            riskEditorDirty();         },         cancelFn: function () {            editRiskBasicModalWindow.closeClick();         }      });   };   this.getRiskEditorControlLayout = function () {      return isc.VLayout.create({         membersMargin: 5,         ID: "riskControlLayout",         dirty: false,         deleteControl: function () {            isc.RPCManager.sendRequest({               evalResult: false,               showPrompt: true,               prompt: "Deleting Risk Control",               actionURL: "./deleteRiskControl",               params: {                  "DATA": JSON.stringify(riskEditorControlTable.getSelection().getProperty("internalID")),                  "PROJECTID": project.projectID,                  "RISKID": qoRiskController.currentRisk.riskID               },               callback: function (rpcResponse, data, rpcRequest) {                  try {                     var controls = JSON.parse(data, dateParser).controls;                     if (controls == null) {                        riskEditorControlTable.setData([]);                     } else {                        riskEditorControlTable.setData(controls);                     }                  } catch (e) {                     isc.say(e.message);                  }               }            });         },         showMainButtons: function (show) {            if (show) {               controlNewStepBtn.show();               controlEditBtn.show();               controlDeleteBtn.show();               controlCancelEditBtn.hide();               controlFinishEditBtn.hide();            } else {               controlNewStepBtn.hide();               controlEditBtn.hide();               controlDeleteBtn.hide();               controlCancelEditBtn.show();               controlFinishEditBtn.show();            }         },         initWidget: function () {            this.Super("initWidget", arguments);            this.toolStrip = isc.HLayout.create({               width: "100%",               membersMargin: 5,               align: "right",               height: 24,               initWidget: function () {                  this.Super("initWidget", arguments);                  this.newBtn = isc.QRMAddButton.create({                     ID: "controlNewStepBtn",                     title: "Create New",                     click: function () {                        this.parentElement.editBtn.setDisabled(true);                        isc.RPCManager.sendRequest({                           prompt: "Adding Risk Control",                           showPrompt: true,                           evalResult: false,                           actionURL: "./newRiskControl",                           params: {                              "DATA": JSON.stringify(riskEditorControlTable.getSelection().getProperty("internalID")),                              "PROJECTID": project.projectID,                              "RISKID": qoRiskController.currentRisk.riskID                           },                           callback: function (rpcResponse, data, rpcRequest) {                              try {                                 var controls = JSON.parse(data, dateParser).controls;                                 if (controls == null) {                                    riskEditorControlTable.setData([]);                                 } else {                                    riskEditorControlTable.setData(controls);                                 }                              } catch (e) {                                 isc.say(e.message);                              }                           }                        });                     }                  });                  this.delBtn = isc.QRMDeleteButton.create({                     ID: "controlDeleteBtn",                     disabled: true,                     click: function () {                        this.parentElement.editBtn.setDisabled(true);                        riskControlLayout.deleteControl();                     }                  });                  this.editBtn = isc.QRMEditButton.create({                     ID: "controlEditBtn",                     disabled: true,                     click: function () {                        this.parentElement.parentElement.table.editSelectedRecord();                     }                  });                  this.cancelBtn = isc.QRMCancelButton.create({                     ID: "controlCancelEditBtn",                     title: "Cancel Edits",                     disabled: true,                     click: function () {                        this.parentElement.parentElement.table.cancelEditing();                     }                  });                  this.finishBtn = isc.QRMFinishButton.create({                     ID: "controlFinishEditBtn",                     title: "Finish Edits",                     disabled: true,                     click: function () {                        this.parentElement.parentElement.table.endEditing();                     }                  });                  this.addMembers([this.editBtn, this.delBtn, this.newBtn, this.cancelBtn, this.finishBtn]);               }            });            this.table = isc.ListGrid.create({               ID: "riskEditorControlTable",               autoDraw: false,               alternateRecordStyles: true,               height: "100%",               confirmCancelEditing: false,               confirmDiscardEdits: false,               showGridSummary: true,               wrapCells: true,               fixedRecordHeights: false,               selectionAppearance: "checkbox",               editComplete: function (rowNum, colNum, newValues, oldValues, editCompletionEvent) {                  riskControlLayout.showMainButtons(true);                  this.parentElement.toolStrip.cancelBtn.setDisabled(true);                  this.parentElement.toolStrip.finishBtn.setDisabled(true);                  this.parentElement.toolStrip.delBtn.setDisabled(true);                  this.parentElement.toolStrip.editBtn.setDisabled(true);                  isc.RPCManager.showPrompt = true;                  isc.RPCManager.sendRequest({                     evalResult: false,                     prompt: "Updating Risk Controls",                     params: {                        "DATA": JSON.stringify(this.getData()),                        "RISKID": qoRiskController.riskID,                        "PROJECTID": project.projectID                     },                     callback: function (rpcResponse, data, rpcRequest) {                        try {                           var controls = JSON.parse(data, dateParser).controls;                           if (controls == null) {                              riskEditorControlTable.setData([]);                           } else {                              riskEditorControlTable.setData(controls);                           }                           qoRiskController.dirty = true;                        } catch (e) {                           isc.say(e.message);                        }                     },                     actionURL: "./saveRiskControls"                  });               },               editorExit: function (editCompletionEvent, record, newValue, rowNum, colNum) {                  riskControlLayout.showMainButtons(true);                  this.parentElement.toolStrip.cancelBtn.setDisabled(true);                  this.parentElement.toolStrip.finishBtn.setDisabled(true);                  this.parentElement.toolStrip.delBtn.setDisabled(true);                  this.parentElement.toolStrip.editBtn.setDisabled(true);                  return true;               },               emptyMessage: "No Risk Controls Documented",               fields: [{                  name: "control",                  title: "Control",                  canEdit: true,                  width: "100%",                  align: "left",                  summaryFunction: "count",                  pluralTitle: "Controls"               }, {                  name: "effectiveness",                  title: "Effectivenes",                  canEdit: true,                  width: 140,                  align: "center",                  type: "select",                  valueMap: {                     1: "Ad Hoc",                     2: "Repeatable",                     3: "Documented",                     4: "Integrated",                     5: "Optimized"                  }               }, {                  name: "contribution",                  title: "Contribution",                  canEdit: true,                  width: 200,                  align: "center"               }],               expansionDetailsProperties: {                  overflow: "visible",                  fields: [{                     name: "control",                     title: "Control"                  }, {                     name: "effectiveness",                     title: "Effectivenes",                     type: "select",                     valueMap: {                        1: "Ad Hoc",                        2: "Repeatable",                        3: "Documented",                        4: "Integrated",                        5: "Optimized"                     }                  }, {                     name: "contribution",                     title: "Contribution"                  }]               },               recordClick: function () {                  this.parentElement.toolStrip.delBtn.setDisabled(false);                  this.parentElement.toolStrip.editBtn.setDisabled(false);               },               editSelectedRecord: function () {                  riskControlLayout.showMainButtons(false);                  this.startEditing(this.getRecordIndex(this.getSelectedRecord()));               },               editorEnter: function () {                  riskControlLayout.showMainButtons(false);                  this.parentElement.toolStrip.cancelBtn.setDisabled(false);                  this.parentElement.toolStrip.finishBtn.setDisabled(false);               },               selectionChanged: function (record, state) {                  riskControlLayout.showMainButtons(true);                  this.parentElement.toolStrip.editBtn.setDisabled(!state);                  this.parentElement.toolStrip.delBtn.setDisabled(!state);               }            });            this.addMember(isc.QRMRiskEditorLabel.create({               title: "Risk Controls"            }));            this.addMembers([this.table, this.toolStrip]);         }      });   };   this.getRiskEditorAttachmentLayout = function () {      return isc.VLayout.create({         membersMargin: 5,         ID: "riskAttachmentLayout",         saveFn: function () {            //         },         resetFn: function () {            //         },         dirty: false,         initWidget: function () {            this.Super("initWidget", arguments);            this.toolStrip = isc.HLayout.create({               width: "100%",               align: "right",               membersMargin: 5,               height: 24,               initWidget: function () {                  this.Super("initWidget", arguments);                  this.newBtn = isc.IButton.create({                     title: "Create New",                     icon: "[SKIN]/actions/add.png",                     width: 100,                     showDisabledIcon: true,                     click: function () {                        isc.Window.create({                           title: "New Risk Attachement",                           ID: "riskAttachmentWindow",                           isModal: true,                           showModalMask: true,                           showMaximizeButton: true,                           autoCenter: true,                           autoSize: true,                           layoutMargin: 5,                           items: [isc.VLayout.create({                              width: 600,                              members: [isc.QRMAttachmentForm.create({                                 ID: "RiskAttachmentForm"                              })]                           })]                        });                        RiskAttachmentForm.showForm(qoRiskController.currentRisk.riskID, "RISK", function () {                           riskAttachmentWindow.hide();                           getRiskAttachments();                        });                        riskAttachmentWindow.show();                     }                  });                  this.delBtn = isc.IButton.create({                     title: "Delete",                     icon: "[SKIN]/actions/remove.png",                     showDisabledIcon: true,                     width: 100,                     disabled: true,                     click: function () {                        var ids = riskEditorAttachmentTable.getSelection().getProperty("internalID");                        isc.RPCManager.sendRequest({                           prompt: "Removing Attachment",                           showPrompt: true,                           evalResult: true,                           params: {                              "DATA": JSON.stringify(ids),                              "PROJECTID": project.projectID,                              "RISKID": qoRiskController.currentRisk.riskID                           },                           callback: function (rpcResponse, data, rpcRequest) {                              getRiskAttachments();                           },                           actionURL: "./removeAttachments"                        });                     }                  });                  this.addMembers([this.delBtn, this.newBtn]);               }            });            this.table = isc.ListGrid.create({               ID: "riskEditorAttachmentTable",               autoDraw: false,               selectionAppearance: "checkbox",               alternateRecordStyles: true,               height: "100%",               emptyMessage: "No Attachments Found",               selectionChanged: function (record, state) {                  this.parentElement.toolStrip.delBtn.setDisabled(!state);               },               fields: [{                  name: "description",                  title: "Decription",                  width: "50%",                  align: "left"               }, {                  title: "Attachment",                  type: "text",                  width: 100,                  align: "center",                  formatCellValue: function (value, record, rowNum, colNum, grid) {                     if (record.attachmentURL) {                        return "<a href = '" + record.attachmentURL + "' target='_blank'>Download</a>";                     } else {                        return "<a href = '" + record.url + "' target='_blank'>View</a>";                     }                  }               }]            });            this.addMember(isc.QRMRiskEditorLabel.create({               title: "Risk Attachements"            }));            this.addMembers([this.table, this.toolStrip]);         }      });   };   this.getRiskEditorCommentLayout = function () {      return isc.VLayout.create({         membersMargin: 5,         ID: "riskCommentLayout",         saveFn: function () {            //         },         resetFn: function () {            //         },         dirty: false,         members: [         isc.QRMRiskEditorLabel.create({            title: "Risk Status Updates and Comments"         }), isc.ListGrid.create({            ID: "riskEditorCommentTable",            autoDraw: false,            alternateRecordStyles: true,            height: "100%",            emptyMessage: "No Comments Found",            wrapCells: true,            fixedRecordHeights: false,            fields: [{               name: "comment",               title: "Comment",               width: "100%",               align: "left"            }, {               name: "type",               title: "Type",               width: 125,               type: "text",               align: "center"            }, {               name: "personName",               title: "Entered By",               width: 100,               type: "text",               align: "center"            }, {               name: "dateEntered",               title: "Date",               width: 100,               type: "date",               align: "center",               formatCellValue: function (value) {                  if (value) {                     return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                  }               }            }, {               title: "Attachment",               type: "text",               width: 100,               align: "center",               formatCellValue: function (value, record, rowNum, colNum, grid) {                  if (record.attachmentURL) {                     return "<a href = '" + record.attachmentURL + "' target='_blank'>Download</a>";                  } else if (record.url) {                     return "<a href = '" + record.url + "' target='_blank'>View</a>";                  } else {                     return "";                  }               }            }],            getCellCSSText: function (record, rowNum, colNum) {               if (record.approval || record.review) {                  return "color:blue;vertical-align:top";               } else if (record.schedReview) {                  return "color:orange;vertical-align:top";               } else {                  return "vertical-align:top";               }            }         }), isc.HLayout.create({            height: 24,            width: "100%",            align: "right",            members: [isc.QRMRiskEditorLabel.create({               title: "Detail Mitigation Plan Updates",               width: "100%"            }), isc.QRMAddButton.create({               title: "New Comment",               width: 120,               click: function () {                  newRiskComment();               }            })]         }), isc.ListGrid.create({            ID: "riskEditorCommentMitPlanTable",            autoDraw: false,            alternateRecordStyles: true,            height: "100%",            wrapCells: true,            fixedRecordHeights: false,            autoFetchData: false,            selectionType: "single",            getCellCSSText: function (record, rowNum, colNum) {               return "vertical-align:top";            },            emptyMessage: "No Mitigation Steps Defined",            fields: [{               name: "description",               title: "Description",               width: "100%",               align: "left",               editorType: "textArea"            }, {               name: "updates",               title: "Updates",               width: "100%",               align: "left"            }, {               name: "personID",               title: "Person Reponsible",               width: 130,               align: "center",               type: "select",               valueMap: qoValueMap.manager,               required: true            }, {               name: "estCost",               title: "Est. Cost",               width: 70,               align: "center",               formatCellValue: function (value) {                  if (isc.isA.Number(value)) {                     if (value == 0) {                        return "-";                     } else {                        return value.toCurrencyString("$");                     }                  } else {                     var val = parseFloat(value);                     if (isc.isA.Number(val)) {                        if (val == 0) {                           return "-";                        } else {                           return val.toCurrencyString("$");                        }                     }                  }                  return "-";               }            }, {               name: "percentComplete",               title: "% Compl.",               width: 70,               align: "center",               formatCellValue: "isc.Format.toUSString(value)",               includeInRecordSummary: false,               showGridSummary: false            }, {               name: "endDate",               title: "Date",               width: 100,               align: "center",               formatCellValue: function (value) {                  if (value) {                     return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                  }               }            }],            selectionChanged: function (record, state) {               riskMitCommentAddUpdateBtn.setDisabled(!state);            }         }), isc.HLayout.create({            width: "100%",            align: "right",            membersMargin: 5,            height: 24,            members: [isc.QRMAddButton.create({               ID: "riskMitCommentAddUpdateBtn",               title: "Add Update",               width: 120,               disabled: true,               click: function () {                  isc.Window.create({                     ID: "mitCommentUpdateModalWindow",                     title: "Mitigation Detail Step Update",                     autoSize: true,                     autoCenter: true,                     isModal: true,                     showModalMask: true,                     headerControls: ["headerIcon", "headerLabel", "closeButton"],                     autoDraw: false,                     closeClick: function () {                        this.Super("closeClick", arguments);                     },                     items: [isc.VLayout.create({                        layoutMargin: 5,                        members: [                        isc.Label.create({                           width: 550,                           wrap: true,                           contents: "<em>" + riskEditorCommentMitPlanTable.getSelection().getProperty("description") + "</em><br/><br/>"                        }), isc.DynamicForm.create({                           ID: "mitCommentUpdateForm2",                           autoDraw: false,                           titleOrientation: "top",                           padding: 4,                           fields: [{                              title: "Enter Update",                              required: true,                              name: "value",                              type: "textarea",                              width: 600,                              height: 80                           }]                        }), isc.QRMSaveButton.create({                           layoutAlign: "right",                           click: function () {                              var value = mitCommentUpdateForm2.getValue("value");                              if (value == null) {                                 mitCommentUpdateModalWindow.hide();                                 return;                              }                              isc.RPCManager.sendRequest({                                 prompt: "Adding Mitigation Update",                                 showPrompt: true,                                 evalResult: false,                                 actionURL: "./addMitigationUpdate",                                 params: {                                    "PROJECTID": project.projectID,                                    "RISKID": qoRiskController.currentRisk.riskID,                                    "MITSTEPID": riskEditorCommentMitPlanTable.getSelection().getProperty("mitstepID")[0],                                    "UPDATE": value                                 },                                 callback: function (                                 rpcResponse, data, rpcRequest) {                                    mitCommentUpdateModalWindow.hide();                                    try {                                       var mitPlan = JSON.parse(                                       data, dateParser).mitigationPlan.findAll("response", 0);                                       if (mitPlan == null) {                                          riskEditorMitPlanTable.setData([]);                                          riskEditorCommentMitPlanTable.setData([]);                                       } else {                                          riskEditorMitPlanTable.setData(mitPlan);                                          riskEditorCommentMitPlanTable.setData(mitPlan);                                       }                                    } catch (e) {                                       isc.say(e.message);                                    }                                 }                              });                           }                        })]                     })]                  });                  mitCommentUpdateModalWindow.show();               }            })]         })]      });   };   this.getRiskEditorMitigationLayout = function () {      return isc.VLayout.create({         membersMargin: 2,         ID: "riskMitigationLayout",         dirty: false,         deleteMitigation: function () {            isc.RPCManager.sendRequest({               prompt: "Deleting Mitigation Step",               showPrompt: true,               evalResult: false,               actionURL: "./deleteRiskMitigation",               params: {                  "DATA": JSON.stringify(riskEditorMitPlanTable.getSelection().getProperty("mitstepID")),                  "PROJECTID": project.projectID,                  "RISKID": qoRiskController.currentRisk.riskID               },               callback: function (rpcResponse, data, rpcRequest) {                  try {                     var mitPlan = JSON.parse(data, dateParser).mitigationPlan.findAll("response", 0);                     if (mitPlan == null) {                        riskEditorMitPlanTable.setData([]);                        riskEditorCommentMitPlanTable.setData([]);                     } else {                        riskEditorMitPlanTable.setData(mitPlan);                        riskEditorCommentMitPlanTable.setData(mitPlan);                     }                  } catch (e) {                     isc.say("Security Restriction: Unable to delete selected mitigation step");                  }               }            });         },         showMainButtons: function (show) {            if (show) {               riskMitNewStepBtn.show();               riskMitEditBtn.show();               riskMitDeleteBtn.show();               riskMitAddUpdateBtn.show();               riskMitCancelEditBtn.hide();               riskMitFinishEditBtn.hide();            } else {               riskMitNewStepBtn.hide();               riskMitEditBtn.hide();               riskMitDeleteBtn.hide();               riskMitAddUpdateBtn.hide();               riskMitCancelEditBtn.show();               riskMitFinishEditBtn.show();            }         },         initWidget: function () {            this.Super("initWidget", arguments);            this.toolStrip = isc.HLayout.create({               width: "100%",               align: "right",               membersMargin: 5,               height: 24,               initWidget: function () {                  this.Super("initWidget", arguments);                  this.newBtn = isc.QRMAddButton.create({                     ID: "riskMitNewStepBtn",                     title: "Create New",                     click: function () {                        isc.RPCManager.sendRequest({                           prompt: "Adding Mitigation Action",                           showPrompt: true,                           evalResult: false,                           actionURL: "./newRiskMitigation",                           params: {                              "PROJECTID": project.projectID,                              "RESPONSE": false,                              "RISKID": qoRiskController.currentRisk.riskID                           },                           callback: function (rpcResponse, data, rpcRequest) {                              try {                                 var mitPlan = JSON.parse(data, dateParser).mitigationPlan.findAll("response", 0);                                 if (mitPlan == null) {                                    riskEditorMitPlanTable.setData([]);                                    riskEditorCommentMitPlanTable.setData([]);                                 } else {                                    riskEditorMitPlanTable.setData(mitPlan);                                    riskEditorCommentMitPlanTable.setData(mitPlan);                                 }                              } catch (e) {                                 isc.say(e.message);                              }                           }                        });                     }                  });                  this.delBtn = isc.QRMDeleteButton.create({                     ID: "riskMitDeleteBtn",                     disabled: true,                     showDisabledIcon: true,                     click: function () {                        riskMitigationLayout.deleteMitigation();                        this.parentElement.toolStrip.addBtn.setDisabled(true);                        this.parentElement.toolStrip.editBtn.setDisabled(true);                     }                  });                  this.editBtn = isc.QRMEditButton.create({                     ID: "riskMitEditBtn",                     disabled: true,                     showDisabledIcon: true,                     click: function () {                        riskMitigationLayout.showMainButtons(false);                        this.parentElement.parentElement.table.editSelectedRecord();                     }                  });                  this.cancelBtn = isc.QRMCancelButton.create({                     ID: "riskMitCancelEditBtn",                     title: "Cancel Edits",                     disabled: true,                     click: function () {                        try {                           this.parentElement.parentElement.table.cancelEditing();                           this.parentElement.cancelBtn.setDisabled(true);                           this.parentElement.finishBtn.setDisabled(true);                           riskMitigationLayout.showMainButtons(true);                        } catch (e) {                           alert(e.message);                        }                     }                  });                  this.finishBtn = isc.QRMFinishButton.create({                     ID: "riskMitFinishEditBtn",                     title: "Finish Edits",                     disabled: true,                     click: function () {                        this.parentElement.parentElement.table.endEditing();                        this.parentElement.cancelBtn.setDisabled(true);                        this.parentElement.finishBtn.setDisabled(true);                        riskMitigationLayout.showMainButtons(true);                     }                  });                  this.addBtn = isc.QRMAddButton.create({                     ID: "riskMitAddUpdateBtn",                     title: "Add Update",                     disabled: true,                     click: function () {                        isc.Window.create({                           ID: "mitUpdateModalWindow",                           title: "Mitigation Detail Step Update",                           autoSize: true,                           autoCenter: true,                           isModal: true,                           showModalMask: true,                           headerControls: ["headerIcon", "headerLabel", "closeButton"],                           autoDraw: false,                           closeClick: function () {                              this.Super("closeClick", arguments);                           },                           items: [isc.VLayout.create({                              layoutMargin: 5,                              members: [                              isc.Label.create({                                 width: 550,                                 wrap: true,                                 contents: "<em>" + riskEditorMitPlanTable.getSelection().getProperty("description") + "</em><br/><br/>"                              }), isc.DynamicForm.create({                                 ID: "mitCommentUpdateForm1",                                 autoDraw: false,                                 titleOrientation: "top",                                 padding: 4,                                 fields: [{                                    title: "Enter Update",                                    required: true,                                    name: "value",                                    type: "textarea",                                    width: 600,                                    height: 80                                 }]                              }), isc.QRMSaveButton.create({                                 layoutAlign: "right",                                 click: function () {                                    var value = mitCommentUpdateForm1.getValue("value");                                    if (value == null) {                                       mitUpdateModalWindow.hide();                                       return;                                    }                                    isc.RPCManager.sendRequest({                                       prompt: "Adding Mitigation Update",                                       showPrompt: true,                                       evalResult: false,                                       actionURL: "./addMitigationUpdate",                                       params: {                                          "PROJECTID": project.projectID,                                          "RISKID": qoRiskController.currentRisk.riskID,                                          "MITSTEPID": riskEditorMitPlanTable.getSelection().getProperty("mitstepID")[0],                                          "UPDATE": value                                       },                                       callback: function (                                       rpcResponse, data, rpcRequest) {                                          mitUpdateModalWindow.hide();                                          try {                                             var mitPlan = JSON.parse(                                             data, dateParser).mitigationPlan.findAll("response", 0);                                             if (mitPlan == null) {                                                riskEditorMitPlanTable.setData([]);                                                riskEditorCommentMitPlanTable.setData([]);                                             } else {                                                riskEditorMitPlanTable.setData(mitPlan);                                                riskEditorCommentMitPlanTable.setData(mitPlan);                                             }                                          } catch (e) {                                             isc.say(e.message);                                          }                                       }                                    });                                 }                              })]                           })]                        });                        mitUpdateModalWindow.show();                     }                  });                  this.addMembers([this.editBtn, this.delBtn, this.newBtn, this.addBtn, this.cancelBtn, this.finishBtn]);               }            });            this.form = isc.DynamicForm.create({               ID: "riskMitPlanSummaryForm",               numCols: 1,               titleOrientation: "top",               height: 110,               autoDraw: false,               hiliteRequiredFields: true,               width: "100%",               fields: [{                  name: "mitPlanSummary",                  type: "textarea",                  title: "Mitigation Plan Summary",                  width: "100%",                  height: 100,                  showTitle: false,                  changed: "qoRiskController.dirty = true;riskMitigationLayout.dirty = true;riskBasicEditorLayout.changed();",                  required: true               }]            });            this.form2 = isc.DynamicForm.create({               ID: "riskMitPlanSummaryForm2",               numCols: 1,               titleOrientation: "top",               height: 110,               autoDraw: false,               hiliteRequiredFields: true,               width: "100%",               fields: [{                  name: "mitPlanSummaryUpdate",                  type: "textarea",                  title: "Mitigation Plan Update",                  width: "100%",                  height: 100,                  showTitle: false,                  changed: "qoRiskController.dirty = true;riskMitigationLayout.dirty = true;riskBasicEditorLayout.changed();",                  required: false               }]            });            this.table = isc.ListGrid.create({               ID: "riskEditorMitPlanTable",               autoDraw: false,               alternateRecordStyles: true,               height: "100%",               wrapCells: true,               fixedRecordHeights: false,               confirmCancelEditing: false,               confirmDiscardEdits: false,               autoFetchData: false,               canEdit: true,               editEvent: "doubleClick",               selectionType: "single",               // selectionAppearance : "checkbox",               showGridSummary: true,               getCellCSSText: function (record, rowNum, colNum) {                  return "vertical-align:top";               },               editComplete: function (rowNum, colNum, newValues, oldValues, editCompletionEvent) {                  riskMitigationLayout.showMainButtons(true);                  isc.RPCManager.showPrompt = true;                  isc.RPCManager.sendRequest({                     evalResult: false,                     actionURL: "./saveRiskMitigation",                     prompt: "Updating Mitigation Action",                     params: {                        "DATA": JSON.stringify(this.getData()),                        "RISKID": qoRiskController.riskID,                        "PROJECTID": project.projectID                     },                     callback: function (rpcResponse, data, rpcRequest) {                        try {                           var riskTemp = JSON.parse(data, dateParser);                           var mitPlan = riskTemp.mitigationPlan.findAll("response", 0);                           if (mitPlan == null) {                              riskEditorMitPlanTable.setData([]);                              riskEditorCommentMitPlanTable.setData([]);                           } else {                              riskEditorMitPlanTable.setData(mitPlan);                              riskEditorCommentMitPlanTable.setData(mitPlan);                           }                           qoRiskController.dirty = true;                        } catch (e) {                           isc.say(e.message);                        }                     }                  });               },               emptyMessage: "No Mitigation Steps Defined",               fields: [{                  name: "description",                  title: "Description",                  canEdit: true,                  width: "100%",                  align: "left",                  editorType: "textArea",                  summaryFunction: "count",                  pluralTitle: "Mitigation Actions",                  editorProperties: {                     height: 80                  }               }, {                  name: "updates",                  title: "Updates",                  canEdit: false,                  width: "100%",                  align: "left"               }, {                  name: "personID",                  title: "Person Reponsible",                  canEdit: true,                  width: 130,                  align: "center",                  type: "select",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  valueMap: qoValueMap.manager,                  required: true               }, {                  name: "estCost",                  title: "Est. Cost",                  canEdit: true,                  width: 70,                  align: "center",                  summaryFunction: "sum",                  showGridSummary: true,                  showGroupSummary: true,                  formatCellValue: function (value) {                     if (isc.isA.Number(value)) {                        if (value == 0) {                           return "-";                        } else {                           return value.toCurrencyString("$");                        }                     } else {                        var val = parseFloat(value);                        if (isc.isA.Number(val)) {                           if (val == 0) {                              return "-";                           } else {                              return val.toCurrencyString("$");                           }                        }                     }                     return "-";                  }               }, {                  name: "percentComplete",                  title: "% Compl.",                  canEdit: true,                  width: 70,                  align: "center",                  formatCellValue: "isc.Format.toUSString(value)",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  editorType: "spinner",                  editorProperties: {                     max: 100,                     min: 0                  }               }, {                  name: "endDate",                  title: "Date",                  canEdit: true,                  width: 100,                  align: "center",                  editorType: "date",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  formatCellValue: function (value) {                     if (value) {                        return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                     }                  }               }],               recordClick: function () {                  this.parentElement.toolStrip.delBtn.setDisabled(false);                  this.parentElement.toolStrip.editBtn.setDisabled(false);                  this.parentElement.toolStrip.addBtn.setDisabled(false);               },               editSelectedRecord: function () {                  riskMitigationLayout.showMainButtons(false);                  this.startEditing(this.getRecordIndex(this.getSelectedRecord()));               },               removeSelectedRecord: function () {                  var records = this.data;                  records.remove(this.getSelectedRecord());                  this.setData(records);               },               editorEnter: function () {                  riskMitigationLayout.showMainButtons(false);                  this.parentElement.toolStrip.cancelBtn.setDisabled(false);                  this.parentElement.toolStrip.finishBtn.setDisabled(false);               },               selectionChanged: function (record, state) {                  this.cancelEditing();                  riskMitigationLayout.showMainButtons(true);                  this.parentElement.toolStrip.editBtn.setDisabled(!state);                  this.parentElement.toolStrip.delBtn.setDisabled(!state);                  this.parentElement.toolStrip.addBtn.setDisabled(!state);                  this.parentElement.toolStrip.cancelBtn.setDisabled(true);                  this.parentElement.toolStrip.finishBtn.setDisabled(true);               }            });            this.addMembers([isc.QRMRiskEditorLabel.create({               title: "Mitigation Plan Summary"            }), this.form, isc.QRMRiskEditorLabel.create({               title: "Mitigation Plan Summary Update"            }), this.form2, isc.QRMRiskEditorLabel.create({               title: "Mitigation Plan Detail"            }), this.table, this.toolStrip]);         }      });   };   this.getRiskEditorConsequenceLayout = function () {      return isc.VLayout.create({         membersMargin: 5,         ID: "riskConsequenceLayout",         saveFn: function () {},         dirty: false,         initWidget: function () {            this.Super("initWidget", arguments);            this.toolStrip = isc.HLayout.create({               width: "100%",               align: "right",               membersMargin: 5,               height: 24,               initWidget: function () {                  this.Super("initWidget", arguments);                  this.newBtn = isc.QRMAddButton.create({                     title: "Create New",                     click: function(){                           qoRiskEditor.editConsequence(-1)                        }                  });                  this.delBtn = isc.QRMDeleteButton.create({                     title: "Delete",                     disabled: true,                     click: function () {                        deleteConsequence(riskEditorConsequenceTable.getSelectedRecord().internalID);                     }                  });                  this.editBtn = isc.QRMEditButton.create({                     title: "Edit",                     disabled: true,                     click: function () {                        qoRiskEditor.editConsequence(riskEditorConsequenceTable.getSelectedRecord().internalID);                     }                  });                  this.addMembers([this.editBtn, this.delBtn, this.newBtn]);               }            });            this.table = isc.ListGrid.create({               ID: "riskEditorConsequenceTable",               autoDraw: false,               alternateRecordStyles: true,               showGridSummary: true,               height: "60%",               emptyMessage: "No Consequences Defined",               getBaseStyle: function (record, rowNum, colNum) {                  // If we are using a provided cost                  // contingency, then highlight any cost                  // based consequences.                  if (!riskBasicForm.getItem("useCalculatedContingency").getValue() && record.costCategroy) {                     return "consqCostWarning";                  } else {                     return this.Super("getBaseStyle", arguments);                  }               },               fields: [{                  name: "description",                  title: "Consequnce",                  width: "100%",                  align: "left",                  summaryFunction: "count",                  pluralTitle: "Consequences"               }, {                  name: "type",                  title: "Type",                  width: 200,                  align: "left"               }, {                  name: "riskConsequenceProb",                  title: "Prob",                  width: "40",                  align: "center",                  formatCellValue: function (value, record, rowNum, colNum) {                     try {                        if (record.treated) {                           return record.postRiskConsequenceProb;                        } else {                           return record.riskConsequenceProb;                        }                     } catch (e) {                        isc.say(e.message);                        return "Unknown";                     }                  }               }, {                  name: "costDistributionType",                  title: "Distribution",                  width: 110,                  align: "center",                  formatCellValue: function (value, record, rowNum, colNum) {                     try {                        if (record.treated) {                           return qoValueMap.distributionTypeMap.get(record.postCostDistributionType);                        } else {                           return qoValueMap.distributionTypeMap.get(record.costDistributionType);                        }                     } catch (e) {                        isc.say(e.message);                        return "Error";                     }                  }               }],               recordClick: function () {                  var record = this.getSelectedRecord();                  if (record === null) {                     return this.parentElement.detViewer.clearDetails();                  }                  this.parentElement.toolStrip.delBtn.setDisabled(false);               },               recordDoubleClick: function () {                  var record = this.getSelectedRecord();                  this.parentElement.toolStrip.delBtn.setDisabled(false);                  qoRiskEditor.editConsequence(record.internalID);               },               removeSelectedRecord: function () {                  var records = this.data;                  records.remove(this.getSelectedRecord());                  this.setData(records);               },               selectionChanged: function (record, state) {                  this.parentElement.toolStrip.editBtn.setDisabled(!state);                  this.parentElement.toolStrip.delBtn.setDisabled(!state);               }            });            this.addMember(isc.QRMRiskEditorLabel.create({               title: "Risk Consequences"            }));            this.addMembers([this.table, this.detViewer, isc.Label.create({               align: "left",               valign: "center",               width: "100%",               height: 15,               wrap: false,               ID: "consqCostWarningLabel",               baseStyle: "consqCostWarning",               contents: "This risk has been configured to use the supplied contingency. Cost will be ignored"            }), this.toolStrip]);            isc.DynamicForm.create({               ID: "contingencyForm",               autoDraw: false,               padding: 10,               titleWidth: 200,               numCols: 2,               width: "100%",               height: "100%",               fields: [{                  type: "header",                  defaultValue: "Calculate Contingency"               }, {                  name: "contingencyPercentile",                  title: "Contingency Percentile",                  width: 50,                  editorType: "spinner",                  defaultValue: 70,                  min: 0,                  max: 100,                  step: 5               }, {                  title: "Calulate",                  type: "button",                  width: 175,                  align: "right",                  showTitle: false,                  endRow: true,                  click: function () {                     if (qoRiskController.dirty) {                        isc.say("Please save changes before calculating the contingency");                        return;                     }                     var values = contingencyForm.getValues();                     values.riskID = qoRiskController.riskID;                     isc.RPCManager.sendRequest({                        actionURL: "./calcRiskContingency",                        showPrompt: true,                        prompt: "Calculating Contingency",                        evalResult: false,                        params: {                           "RISKID": qoRiskController.currentRisk.riskID,                           "PROJECTID": qoRiskController.currentRisk.projectID,                           "DATA": JSON.stringify(values)                        },                        callback: function (rpcResponse, data, rpcRequest) {                           try {                              contingencyForm2.getItem("viewState").setDisabled(false);                              contingencyForm2.getItem("viewState").setValueDisabled("UnTreated", false);                              contingencyForm2.getItem("viewState").setValueDisabled("Treated", false);                              contingencyForm2.markForRedraw();                              contingencyForm.setValues(JSON.parse(data, dateParser));                              contingencyForm.getItem("saveContingencyButton").setDisabled(false);                              contingencyGraph.setSrc(Page.getAppDir() + "getContingencyGraph?HEIGHT=" + contingencyGraph.getHeight() + "&WIDTH=" + contingencyGraph.getWidth() + "&preMit=" + contingencyForm2.getItem("viewState").getValue() + "&nocache=" + Math.random());                           } catch (e) {                              isc.say(e.message);                           }                        }                     });                  }               }, {                  name: "blurb1",                  defaultValue: "<strong  style='color:red'>Un Treated</strong>",                  type: "BlurbItem"               }, {                  name: "preMitContingency",                  title: "Contingency",                  type: "StaticTextItem",                  width: 80,                  canEdit: false               }, {                  name: "preMitContingencyWeighted",                  title: "Weighted Contingency",                  type: "StaticTextItem",                  width: 80,                  canEdit: false               }, {                  name: "blurbt",                  defaultValue: "<strong style='color:blue'>Treated</strong>",                  type: "BlurbItem"               }, {                  name: "postMitContingency",                  title: "Contingency",                  type: "StaticTextItem",                  width: 80,                  canEdit: false               }, {                  name: "postMitContingencyWeighted",                  title: "Weighted Contingency",                  type: "StaticTextItem",                  width: 80,                  canEdit: false               }, {                  type: "spacer"               }, {                  title: "Save Contingency Values",                  type: "button",                  width: 175,                  align: "right",                  showTitle: false,                  endRow: true,                  name: "saveContingencyButton",                  disabled: true,                  click: function () {                     if (qoRiskController.dirty) {                        isc.say("Please save changes before saving the contingency values");                        return;                     }                     updateRiskEditorContingency();                  }               }]            });            isc.DynamicForm.create({               ID: "contingencyForm2",               autoDraw: false,               padding: 10,               titleWidth: 100,               titleOrientation: "top",               numCols: 1,               width: "100%",               height: "100%",               fields: [ {                  defaultValue: "Select Treatment State:",                  type: "BlurbItem"               },{                  showTitle:false,                  name: "viewState",                  type: "radioGroup",                  colSpan: "*",                  vertical: true,                  defaultValue: "UnTreated",                  valueMap: ["UnTreated", "Treated"],                  redrawOnChange: true,                  changed: function (form, item, value) {                     contingencyGraph.setSrc(Page.getAppDir() + "getContingencyGraph?HEIGHT=" + contingencyGraph.getHeight() + "&WIDTH=" + contingencyGraph.getWidth() + "&preMit=" + contingencyForm2.getItem("viewState").getValue() + "&nocache=" + Math.random());                  }               }]            });            isc.Img.create({               ID: "contingencyGraph",               width: "100%",               height: "100%",               src: "[SKIN]grid.gif",               imageType: "tile",               autoDraw: false            });            this.addMember(isc.HLayout.create({               layoutMargin: 5,               membersMargin: 5,               height: "100%",               members: [isc.VLayout.create({                  members: [contingencyForm, contingencyForm2]               }), contingencyGraph]            }));         }      });   };      this.editConsequence = function(id) {     isc.Window.create({         title: "Risk Consequence Editor",         ID:"riskConsequenceEditor",         width: 800,         height: 600,         showMinimizeButton: false,         autoCenter: true,         isModal: true,         showModalMask: true,         autoDraw: false,         items:[qoRiskEditor.getConsequenceEditorPanel()],         closeClick: function () {            var values = contingencyForm.getValues();            values.riskID = qoRiskController.riskID;            isc.RPCManager.sendRequest({               actionURL: "./calcRiskContingency",               showPrompt: true,               prompt: "Calculating Contingency",               evalResult: false,               params: {                  "RISKID": qoRiskController.currentRisk.riskID,                  "PROJECTID": qoRiskController.currentRisk.projectID,                  "DATA": JSON.stringify(values)               },               callback: function (rpcResponse, data, rpcRequest) {                  try {                     contingencyForm2.getItem("viewState").setDisabled(false);                     contingencyForm2.getItem("viewState").setValueDisabled("UnTreated", false);                     contingencyForm2.getItem("viewState").setValueDisabled("Treated", false);                     contingencyForm2.markForRedraw();                     contingencyForm.setValues(JSON.parse(data, dateParser));                     contingencyForm.getItem("saveContingencyButton").setDisabled(false);                     contingencyGraph.setSrc(Page.getAppDir() + "getContingencyGraph?HEIGHT=" + contingencyGraph.getHeight() + "&WIDTH=" + contingencyGraph.getWidth() + "&preMit=" + contingencyForm2.getItem("viewState").getValue() + "&nocache=" + Math.random());                  } catch (e) {                     isc.say(e.message);                  }               }            });            this.hide();         }              });      try {          riskConsequenceEditor.show();         try {            riskConsequenceEditorPanel.clear();         } catch (e) {            isc.say(e.message);         }         if (id > 0) {            isc.RPCManager.showPrompt = false;            isc.RPCManager.sendRequest({               actionURL: "./getConsequence",               evalResult: false,               params: {                  "ID": id,                  "PROJECTID": project.projectID               },               callback: function (rpcResponse, data, rpcRequest) {                  riskConsequenceEditorPanel.setConsequence(JSON.parse(data));               }            });         }      } catch (e) {         isc.say(e);      }   };   this.getConsequenceEditorPanel = function() {      var layout = isc.VLayout.create({         ID:"riskConsequenceEditorPanel",         membersMargin: 5,         layoutMargin: 5,         height: "100%",         width: "100%",         clear: function () {            try {               this.preMitPane.clear();               this.postMitPane.clear();               this.mainForm.reset();            } catch (e) {               isc.say(e);            }         },         setConsequence: function (record) {            try {               this.clear();               this.preMitPane.setQRMData(record);               this.postMitPane.setQRMData(record);               this.mainForm.setValues(record);            } catch (e) {               isc.say(e);            }         },         getData: function () {            var data = new Object();            data.description = this.mainForm.getValue("description");            data.internalID = this.mainForm.getValue("internalID");            data.quantType = this.mainForm.getValue("quantType");            data.preMitData1 = this.preMitPane.probInputForm.getValues();            data.preMitData2 = this.preMitPane.descreteGrid.getData();            data.postMitData1 = this.postMitPane.probInputForm.getValues();            data.postMitData2 = this.postMitPane.descreteGrid.getData();            return data;         },         clear: function () {            this.mainForm.clearValues();            this.preMitPane.clear();            this.postMitPane.clear();         },         initWidget: function () {            this.Super("initWidget", arguments);            var toolStrip = isc.HLayout.create({               membersMargin: 5,               members: [               isc.Label.create({                  contents: "",                  width: "100%"               }), isc.IButton.create({                  title: "Save",                  width: 100,                  click: function () {                     try {                        isc.RPCManager.sendRequest({                           actionURL: "./saveConsequences",                           evalResult: true,                           params: {                              "DATA": JSON.stringify(this.parentElement.parentElement.getData()),                              "RISKID": qoRiskController.riskID                           },                           callback: function (rpcResponse, data, rpcRequest) {                              try {                                 for (var i = 0; i < data.length; i++) {                                    try {                                       data[i].type = data[i].quantImpactType.description + " (" + data[i].quantImpactType.units + ")";                                    } catch (e) {                                       isc.say(e.message);                                    }                                 }                              } catch (e) {                                 isc.say(e.message);                              }                              try {                                 riskEditorConsequenceTable.setData(data);                                 contingencyForm.getItem("saveContingencyButton").setDisabled(true);                                 contingencyForm.clearValues();                                 contingencyForm2.getItem("viewState").setDisabled(true);                                 contingencyGraph.setSrc("[SKIN]grid.gif");                                 qoRiskController.currentRisk.probConsequenceNodes = data;                                 updateConsequnceTable();                                 riskConsequenceEditor.closeClick();                              } catch (e) {                                 isc.say(e.message);                              }                           }                        });                     } catch (e) {                        isc.say(e);                     }                  }               }), isc.IButton.create({                  title: "Cancel",                  width: 100,                  click: function () {                     riskConsequenceEditor.closeClick();                  }               })]            });            this.mainForm = isc.DynamicForm.create({               titleOrientation: "left",               autoDraw: false,               titleWidth: 140,               width: "100%",               items: [{                  name: "internalID",                  type: "hidden",                  defaultValue: 0               }, {                  startRow: true,                  width: 500,                  name: "description",                  title: "Consequence",                  defaultValue: "Enter description of the consequence",                  required: true               }, {                  startRow: true,                  name: "quantType",                  width: 300,                  title: "Consequence Type",                  editorType: "select",                  defaultValue: 2,                  valueMap: qoValueMap.quantTypes               }]            });            try {               this.preMitPane = isc.RiskConsequenceProbWidget.create({                  height: "100%",                  preMit: false               });               this.preMitPane.setMitState(true);               this.postMitPane = isc.RiskConsequenceProbWidget.create({                  height: "100%",                  preMit: false               });               this.postMitPane.setMitState(false);            } catch (e) {               isc.say(e);            }            this.addMembers([this.mainForm, this.preMitPane, this.postMitPane, toolStrip]);            if (qoQRM.singlePhase) {               this.postMitPane.hide();            }         }      });      return layout;   };   this.getRiskEditorProbImpactLayout = function () {      isc.VLayout.create({         membersMargin: 5,         backgroundColor: "white",         dirty: false,         ID: "riskProbImpactLayout",         setDirty: function () {            this.dirty = true;            riskEditorDirty();         },         setAndCalcFormProb: function () {            try {               this.setAndCalcFormProbInternal(true);               if (!qoQRM.singlePhase) {                  this.setAndCalcFormProbInternal(false);               }            } catch (e) {               isc.say(e.message);            }         },         setAndCalcFormProbInternal: function (preMit) {            var type = (preMit) ? probImpactFreqForm.getItem("liketype").getValue() : probImpactFreqForm.getItem("likepostType").getValue();            var num = (preMit) ? probImpactFreqForm.getItem("liket").getValue() : probImpactFreqForm.getItem("likepostT").getValue();            var occ = (preMit) ? probImpactFreqForm.getItem("likealpha").getValue() : probImpactFreqForm.getItem("likepostAlpha").getValue();            try {               var T = 0;               switch (parseInt(type, 10)) {               case 1:                  T = 365;                  break;               case 2:                  T = 30;                  break;               case 3:                  T = parseFloat(num);                  break;               default:               }               if (preMit) {                  qoRiskController.currentRisk.liketype = parseInt(type, 10);                  qoRiskController.currentRisk.liket = T;                  qoRiskController.currentRisk.likealpha = parseFloat(occ);                  if (qoQRM.singlePhase) {                     qoRiskController.currentRisk.likepostType = parseInt(type, 10);                     qoRiskController.currentRisk.likepostT = T;                     qoRiskController.currentRisk.likepostAlpha = parseFloat(occ);                  }               } else {                  qoRiskController.currentRisk.likepostType = parseInt(type, 10);                  qoRiskController.currentRisk.likepostT = T;                  qoRiskController.currentRisk.likepostAlpha = parseFloat(occ);               }               var prob = calcProb(qoRiskController.currentRisk, preMit);               if (isNaN(prob)) {                  prob = 0.0;               }               if (preMit) {                  probImpactFreqForm.getItem("prob").setValue(qoQRM.roundDoubleStr(prob, 2));                  qoRiskController.currentRisk.inherentProb = probToMatrix(prob, project.matrix);               } else {                  probImpactFreqForm.getItem("probPost").setValue(qoQRM.roundDoubleStr(prob, 2));                  qoRiskController.currentRisk.treatedProb = probToMatrix(prob, project.matrix);               }               qoRiskController.currentRisk.inherentImpact = probImpactMatrixImgPreMitImg.getImpact();               qoRiskController.currentRisk.treatedImpact = probImpactMatrixImgPostMitImg.getImpact();               var rsk = qoRiskController.currentRisk;               try {                  probImpactMatrixImg.removeChild(probImpactMatrixImgPreMitImg);                  probImpactMatrixImgPreMitImg.destroy();               } catch (err) {                  //               }               try {                  probImpactMatrixImg.removeChild(probImpactMatrixImgPostMitImg);                  probImpactMatrixImgPostMitImg.destroy();               } catch (err) {                  //               }               isc.RiskMatrixItem.create({                  ID: "probImpactMatrixImgPreMitImg",                  preMit: true,                  hostImg: probImpactMatrixImg,                  treatedImpact: rsk.treatedImpact,                  treatedProb: rsk.treatedProb,                  untreatedImpact: rsk.inherentImpact,                  untreatedProb: rsk.inherentProb,                  contents: rsk.riskProjectCode,                  baseStyle: "matrixWidgetUnTreated"               });               probImpactMatrixImg.addChild(probImpactMatrixImgPreMitImg);               probImpactMatrixImgPreMitImg.setposition();               isc.RiskMatrixItem.create({                  ID: "probImpactMatrixImgPostMitImg",                  preMit: false,                  hostImg: probImpactMatrixImg,                  treatedImpact: rsk.treatedImpact,                  treatedProb: rsk.treatedProb,                  untreatedImpact: rsk.inherentImpact,                  untreatedProb: rsk.inherentProb,                  contents: rsk.riskProjectCode,                  baseStyle: "matrixWidgetTreated"               });               probImpactMatrixImg.addChild(probImpactMatrixImgPostMitImg);               probImpactMatrixImgPostMitImg.setposition();               if (qoQRM.singlePhase) {                  if (rsk.treated) {                     probImpactMatrixImgPreMitImg.baseStyle = "matrixWidgetTreated";                  } else {                     probImpactMatrixImgPreMitImg.baseStyle = "matrixWidgetUnTreated";                  }                  probImpactMatrixImgPostMitImg.hide();               }               probImpactMatrixImgPreMitImg.redraw();               probImpactMatrixImgPostMitImg.redraw();            } catch (e) {               isc.say(e.message);            }         },         setSinglePhase: function (sPhase, rsk) {            try {               if (sPhase) {                  if (rsk.treated) {                     probImpactFreqForm.getItem("headerUnTreated").setValue("Treated State");                     probImpactMatrixImgPreMitImg.baseStyle = "matrixWidgetTreated";                  } else {                     probImpactFreqForm.getItem("headerUnTreated").setValue("Un Treated State");                     probImpactMatrixImgPreMitImg.baseStyle = "matrixWidgetUnTreated";                  }                  probImpactMatrixImgPostMitImg.hide();               } else {                  probImpactFreqForm.getItem("headerUnTreated").setValue("Un Treated State");                  probImpactMatrixImgPreMitImg.baseStyle = "matrixWidgetUnTreated";                  probImpactMatrixImgPostMitImg.baseStyle = "matrixWidgetTreated";                  probImpactMatrixImgPostMitImg.show();               }               probImpactMatrixImgPreMitImg.redraw();               probImpactMatrixImgPostMitImg.redraw();               probImpactFreqForm.redraw();            } catch (e) {               isc.say("Prob/Impact setSingle Phase " + e.message);            }         }      });      isc.Img.create({         src: "[SKIN]grid.gif",         height: 300,         width: 300,         ID: "probImpactMatrixImg",         imageType: "normal",         autoDraw: false,         setDirty: function () {            riskProbImpactLayout.setDirty();            try {               this.setFormProb();            } catch (e) {               isc.say(e.message);            }         },         setFormProb: function () {            probImpactFreqForm.getItem("prob").setValue(            qoQRM.roundDoubleStr(probFromMatrix(probImpactMatrixImgPreMitImg.getProb(), project.matrix), 2));            probImpactFreqForm.getItem("probPost").setValue(            qoQRM.roundDoubleStr(probFromMatrix(probImpactMatrixImgPostMitImg.getProb(), project.matrix), 2));            probImpactFreqForm.getItem("useCalculatedProb").setValue(false);            probImpactFreqForm.setFormState(probImpactFreqForm, false);         },         setMatrix: function (rsk) {            this.setSrc(Page.getAppDir() + "getRelMatrix?WIDTH=" + this.getWidth() + "&HEIGHT=" + this.getHeight() + "&REQUIRERISKS=NO&PROJECTID=" + project.projectID + "&DESCENDANTS=false&NOCACHE=" + Math.random());            // Remove any previous RiskItems which may have been            // here if the editor was previously used.            try {               this.removeChild(probImpactMatrixImgPreMitImg);               probImpactMatrixImgPreMitImg.destroy();            } catch (err) {               //            }            try {               this.removeChild(probImpactMatrixImgPostMitImg);               probImpactMatrixImgPostMitImg.destroy();            } catch (err) {               //            }            isc.RiskMatrixItem.create({               ID: "probImpactMatrixImgPreMitImg",               preMit: true,               // hostImg is notified when a drag has occurred by               // the setDirty() call that is made by the widget               hostImg: probImpactMatrixImg,               treatedImpact: rsk.treatedImpact,               treatedProb: rsk.treatedProb,               untreatedImpact: rsk.inherentImpact,               untreatedProb: rsk.inherentProb,               contents: rsk.riskProjectCode,               baseStyle: "matrixWidgetUnTreated"            });            this.addChild(probImpactMatrixImgPreMitImg);            probImpactMatrixImgPreMitImg.setposition();            isc.RiskMatrixItem.create({               ID: "probImpactMatrixImgPostMitImg",               preMit: false,               // hostImg is notified when a drag has occurred by               // the setDirty() call that is made by the widget               hostImg: probImpactMatrixImg,               treatedImpact: rsk.treatedImpact,               treatedProb: rsk.treatedProb,               untreatedImpact: rsk.inherentImpact,               untreatedProb: rsk.inherentProb,               contents: rsk.riskProjectCode,               baseStyle: "matrixWidgetTreated"            });            this.addChild(probImpactMatrixImgPostMitImg);            probImpactMatrixImgPostMitImg.setposition();         }      });      isc.VStack.create({         ID: "probImpactInfoLayout",         members: [isc.HLayout.create({            height: 35,            membersMargin: 10,            members: [isc.Label.create({               height: 30,               width: 60,               align: "center",               valign: "center",               wrap: false,               contents: "Risk ID",               baseStyle: "matrixWidgetUnTreated"            }), isc.Label.create({               height: 30,               width: 200,               align: "left",               valign: "center",               contents: "<b>Un Treated</b> Probability/Impact"            })]         }), isc.HLayout.create({            height: 35,            membersMargin: 10,            members: [isc.Label.create({               height: 30,               width: 60,               align: "center",               valign: "center",               wrap: false,               contents: "Risk ID",               baseStyle: "matrixWidgetTreated"            }), isc.Label.create({               height: 30,               width: 200,               align: "left",               valign: "center",               contents: "<b>Treated</b> Probability/Impact"            })]         })]      });      isc.DynamicForm.create({         autoDraw: false,         ID: "probImpactFreqForm",         width: 380,         colWidths: [190, 190],         titleOrientation: "left",         setFormState: function (form, value) {            try {               form.getItem("likealpha").setDisabled(!value);               form.getItem("liket").setDisabled(!value || !(form.getItem("liketype").getValue() == 3));               form.getItem("liketype").setDisabled(!value);               form.getItem("likepostAlpha").setDisabled(!value);               form.getItem("likepostT").setDisabled(!value || !(form.getItem("likepostType").getValue() == 3));               form.getItem("likepostType").setDisabled(!value);            } catch (e) {               isc.say(e.message);            }         },         fields: [{            defaultValue: false,            align: "left",            name: "useCalculatedProb",            title: "Use Calculated Probability",            type: "CheckboxItem",            changed: function (form, item, value) {               try {                  probImpactFreqForm.setFormState(form, value);                  riskProbImpactLayout.setAndCalcFormProb();                  riskProbImpactLayout.dirty = true;                  riskEditorDirty();               } catch (e) {                  isc.say(e.message);               }            }         }, {            name: "headerUnTreated",            type: "header",            defaultValue: "Untreated State"         }, {            width: 160,            title: "Frequency Type",            defaultValue: 1,            type: "Select",            autoFetchData: false,            disabled: true,            redrawOnChange: true,            changed: function (form, item, value) {               if (value < 3) {                  form.getItem("liket").setDisabled(true);               } else {                  form.getItem("liket").setDisabled(false);               }               form.getItem("likealpha").setDisabled(false);               riskProbImpactLayout.setAndCalcFormProbInternal(true);               riskProbImpactLayout.dirty = true;               riskEditorDirty();            },            name: "liketype",            valueMap: {               1: "Frequency per Year",               2: "Frequency per Month",               3: "Frequency per Days"            }         }, {            title: "Frequency of Occurances",            editorType: "text",            keyPressFilter: "[0-9.]",            validators: [{               type: "isFloat",               min: 0            }],            disabled: true,            width: 50,            name: "likealpha",            changed: function (form, item, value) {               try {                  riskProbImpactLayout.setAndCalcFormProbInternal(true);                  riskProbImpactLayout.dirty = true;               } catch (e) {                  isc.say(e.message);               }               riskEditorDirty();            }         }, {            name: "liket",            title: "Number of Days",            editorType: "text",            keyPressFilter: "[0-9]",            validators: [{               type: "isInteger"            }],            width: 50,            disabled: true,            changed: function (form, item, value) {               try {                  riskProbImpactLayout.setAndCalcFormProbInternal(true);                  riskProbImpactLayout.dirty = true;               } catch (e) {                  isc.say(e.message);               }               riskEditorDirty();            }         }, {            name: "prob",            canEdit: false,            title: "Probability",            type: "StaticTextItem"         }, {            type: "header",            showIf: "(!qoQRM.singlePhase)",            defaultValue: "Treated State"         }, {            width: 160,            title: "Frequency Type",            defaultValue: 1,            showIf: "(!qoQRM.singlePhase)",            type: "Select",            autoFetchData: false,            disabled: true,            changed: function (form, item, value) {               if (value < 3) {                  form.getItem("likepostT").setDisabled(true);               } else {                  form.getItem("likepostT").setDisabled(false);               }               form.getItem("likepostAlpha").setDisabled(false);               riskProbImpactLayout.setAndCalcFormProbInternal(false);               riskProbImpactLayout.dirty = true;               riskEditorDirty();            },            name: "likepostType",            valueMap: {               1: "Frequency per Year",               2: "Frequency per Month",               3: "Frequency per Days"            }         }, {            title: "Frequency of Occurances",            editorType: "text",            keyPressFilter: "[0-9.]",            validators: [{               type: "isFloat",               min: 0            }],            disabled: true,            showIf: "(!qoQRM.singlePhase)",            width: 50,            name: "likepostAlpha",            changed: function (form, item, value) {               try {                  riskProbImpactLayout.setAndCalcFormProbInternal(false);                  riskProbImpactLayout.dirty = true;               } catch (e) {                  isc.say(e.message);               }               riskEditorDirty();            }         }, {            name: "likepostT",            title: "Number of Days",            editorType: "text",            showIf: "(!qoQRM.singlePhase)",            keyPressFilter: "[0-9]",            validators: [{               type: "isInteger"            }],            disabled: true,            width: 50,            changed: function (form, item, value) {               try {                  riskProbImpactLayout.setAndCalcFormProbInternal(false);                  riskProbImpactLayout.dirty = true;               } catch (e) {                  isc.say(e.message);               }               riskEditorDirty();            }         }, {            name: "probPost",            canEdit: false,            showIf: "(!qoQRM.singlePhase)",            title: "Probability",            type: "StaticTextItem"         }]      });      var top = isc.HLayout.create({         backgroundColor: "white",         height: "100%",         border: "1px solid lightgray",         layoutMargin: 5      });      isc.VLayout.create({         ID: "probImpactMatStack",         membersMargin: 0,         width: 300,         members: [probImpactMatrixImg]      });      top.addMembers([probImpactMatStack, probImpactFreqForm]);      var rightLayout = isc.HLayout.create({         width: "100%",         members: [isc.VLayout.create({            ID: "probImpactProbDescLayout",            wdith: "50%"         }), isc.VLayout.create({            ID: "probImpactImpactDescLayout",            wdith: "50%"         })]      });      var bottomLeft = isc.VLayout.create({         width: 320,         members: [probImpactInfoLayout, isc.VLayout.create({            ID: "probImpactDescriptionLayout"         })]      });      var bottom = isc.HLayout.create({         height: 150,         border: "1px solid lightgray",         layoutMargin: 5,         membersMargin: 5      });      bottom.addMembers([bottomLeft, rightLayout]);      riskProbImpactLayout.addMember(top);      riskProbImpactLayout.addMember(bottom);      return riskProbImpactLayout;   };   this.getRiskEditorReviewLayout = function () {      return isc.VLayout.create({         ID: "riskReviewLayout",         membersMargin: 5,         members: [isc.HLayout.create({            height: 30,            width: "100%",            align: "right",            layoutMargin: 5,            members: [isc.QRMRiskEditorLabel.create({               title: "Scheduled Reviews for this Risk"            })]         }), isc.ListGrid.create({            ID: "riskReviewLayoutRevTable",            autoDraw: false,            alternateRecordStyles: true,            height: "70%",            emptyMessage: "No Reviews Scheduled for this Risk",            fields: [{               name: "title",               title: "Review Title",               width: "100%",               align: "left"            }, {               name: "comment",               title: "Review Comment For Risk",               width: "100%",               align: "left"            }, {               name: "scheduleDate",               title: "Scheduled Date",               width: 100,               align: "center",               type: "date"            }, {               name: "actualDate",               title: "Actual Date",               width: 100,               align: "center",               type: "date"            }]         }), isc.HLayout.create({            height: 30,            width: "100%",            align: "right",            layoutMargin: 5,            members: [isc.QRMRiskEditorLabel.create({               title: "Process Audits Milestones"            }), isc.QRMAddButton.create({               title: "Schedule Review",               width: 120,               click: function () {                  scheduleReview();               }            })]         }), isc.ListGrid.create({            ID: "riskReviewLayoutAuditTable",            alternateRecordStyles: true,            wrapCells: true,            fixedRecordHeights: false,            height: "100%",            fields: [{               name: "step",               title: "Audit Point",               width: 160,               align: "left"            }, {               name: "dateEntered",               title: "Date",               width: 100,               align: "center",               formatCellValue: function (value) {                  if (value) {                     return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                  }               }            }, {               name: "personName",               title: "Person",               width: 130,               align: "center"            }, {               name: "comment",               title: "Comment",               width: "100%",               align: "left"            }],            getCellCSSText: function (record, rowNum, colNum) {               if (record.dateEntered == null) {                  return "color:red;vertical-align:top";               } else {                  return "color:blue;vertical-align:top";               }            }         }), isc.HLayout.create({            height: 24,            width: "100%",            align: "right",            members: [isc.QRMAddButton.create({               title: "Register Audit",               showDisabledIcon: true,               width: 120,               click: function () {                  newAudit();               }            })]         })]      });   };   this.getRiskEditorChildRiskLayout = function () {      return isc.VLayout.create({         membersMargin: 0,         ID: "riskChildRiskLayout",         dirty: false,         initWidget: function () {            this.Super("initWidget", arguments);            this.table = isc.ListGrid.create({               height: "100%",               ID: "ChildRiskTable",               dataSource: riskLiteDS,               alternateRecordStyles: true,               emptyMessage: "No Contributing Risks Allocated to this Summary Risk",               showGridSummary: true,               sortField: "currentTolerance",               sortDirection: "descending",               canExpandRecords: true,               expansionMode: "details",               selectionAppearance: "checkbox",               getBaseStyle: function (record, rowNum, colNum) {                  if (colNum == 0 || colNum == 1 || colNum == 2) {                     return "rankItem" + record.currentTolerance;                  } else {                     return this.Super("getBaseStyle", arguments);                  }               },               fields: [{                  name: "riskProjectCode",                  title: "Risk Code",                  width: 85,                  canGroupBy: false,                  align: "left",                  includeInRecordSummary: false,                  summaryFunction: "count",                  pluralTitle: "Risks",                  canReorder: false,                  formatCellValue: function (value, record) {                     if (record.promotionCode != "-") {                        return value + ' (' + record.toProjCode + ')';                     } else {                        return value;                     }                  }               }, {                  name: "currentTolerance",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  title: "Tolerance",                  type: "image",                  align: "center",                  width: 70,                  canReorder: false,                  canGroupBy: true,                  imageURLPrefix: "tol",                  imageURLSuffix: ".png",                  getGroupValue: function (value, record, field, fieldName, grid) {                     return value;                  },                  getGroupTitle: function (groupValue, groupNode, field, fieldName, grid) {                     switch (groupValue) {                     case 5:                        return "Extreme";                        break;                     case 4:                        return "High";                        break;                     case 3:                        return "Significant";                        break;                     case 2:                        return "Moderate";                        break;                     case 1:                        return "Low";                        break;                     }                  }               }, {                  name: "title",                  title: "Title",                  align: "left",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  canGroupBy: true,                  width: "100%"               }, {                  name: "ownerName",                  title: "Owner",                  align: "center",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  canGroupBy: true,                  width: 120               }, {                  name: "manager1Name",                  title: "Manager",                  align: "center",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  width: 120,                  canGroupBy: true,                  showIf: "false"               }, {                  name: "treatedImpact",                  title: "Treated Impact",                  type: "float",                  align: "center",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  canGroupBy: true,                  groupPrecision: 1,                  width: 40,                  formatCellValue: function (value) {                     if (isc.isA.Number(value)) {                        return Math.floor(value);                     }                     return value;                  },                  showIf: "false"               }, {                  name: "treatedProb",                  title: "Treated Prob",                  type: "float",                  align: "center",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  canGroupBy: true,                  groupPrecision: 1,                  width: 40,                  formatCellValue: function (value) {                     if (isc.isA.Number(value)) {                        return Math.floor(value);                     }                     return value;                  },                  showIf: "false"               }, {                  name: "inherentImpact",                  title: "Inherent Impact",                  type: "float",                  align: "center",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  canGroupBy: true,                  groupPrecision: 1,                  width: 40,                  formatCellValue: function (value) {                     if (isc.isA.Number(value)) {                        return Math.floor(value);                     }                     return value;                  },                  showIf: "false"               }, {                  name: "inherentProb",                  title: "Inherent Prob",                  type: "float",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  canGroupBy: true,                  groupPrecision: 1,                  align: "center",                  width: 40,                  formatCellValue: function (value) {                     if (isc.isA.Number(value)) {                        return Math.floor(value);                     }                     return value;                  },                  showIf: "false"               }, {                  name: "riskID",                  title: "Risk ID",                  type: "integer",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  align: "center",                  width: 0,                  canGroupBy: false,                  showIf: "false"               }, {                  name: "active",                  align: "center",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  title: "Active",                  type: "boolean",                  canGroupBy: true,                  width: 55,                  getGroupTitle: function (groupValue, groupNode, field, fieldName, grid) {                     if (groupValue) {                        return "Active Risks";                     } else {                        return "Dormant Risks";                     }                  }               }, {                  name: "treated",                  align: "center",                  includeInRecordSummary: false,                  showGridSummary: false,                  showGroupSummary: false,                  title: "Treated",                  type: "boolean",                  canGroupBy: true,                  width: 55               }],               // Properties of the details viewer for row               // expansion               expansionDetailsProperties: {                  height: 200,                  width: "100%",                  overflow: "scroll",                  fields: [{                     name: "riskProjectCode",                     title: "Risk Code",                     canEdit: false,                     width: 60,                     align: "left"                  }, {                     name: "title",                     title: "Title",                     align: "left",                     width: "100%"                  }, {                     name: "description",                     title: "Description",                     align: "left",                     width: "100%"                  }, {                     name: "startExposure",                     title: "Start of Exposure",                     type: "date",                     align: "center",                     width: 120,                     formatCellValue: function (value) {                        if (value) {                           return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                        }                     }                  }, {                     name: "endExposure",                     title: "End of Exposure",                     type: "date",                     align: "center",                     width: 120,                     formatCellValue: function (value) {                        if (value) {                           return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                        }                     }                  }, {                     name: "ownerName",                     title: "Owner",                     align: "center",                     width: 120                  }, {                     name: "manager1Name",                     title: "Manager",                     align: "center",                     width: 120                  }, {                     name: "treatedImpact",                     title: "Treated Impact",                     type: "double",                     align: "center",                     formatCellValue: function (value) {                        if (isc.isA.Number(value)) {                           return Math.floor(value);                        }                        return value;                     }                  }, {                     name: "treatedProb",                     title: "Treated Prob",                     type: "double",                     align: "center",                     formatCellValue: function (value) {                        if (isc.isA.Number(value)) {                           return Math.floor(value);                        }                        return value;                     }                  }, {                     name: "inherentImpact",                     title: "Inherent Impact",                     type: "double",                     align: "center",                     formatCellValue: function (value) {                        if (isc.isA.Number(value)) {                           return Math.floor(value);                        }                        return value;                     }                  }, {                     name: "inherentProb",                     title: "Inherent Prob",                     type: "double",                     align: "center",                     formatCellValue: function (value) {                        if (isc.isA.Number(value)) {                           return Math.floor(value);                        }                        return value;                     }                  }, {                     name: "treated",                     title: "Treated",                     type: "boolean",                     width: 55,                     formatCellValue: function (value) {                        if (value) {                           return "Yes";                        }                        return "No";                     }                  }]               }            });            try {               isc.ToolStrip.create({                  ID: "childButtonLayout",                  width: "100%",                  height: 24,                  border: "1px solid " + qrmCtrlColor,                  backgroundColor: qrmCtrlColor,                  members: [                  isc.Label.create({                     contents: "",                     height: 20,                     width: "100%"                  }), isc.ToolStripButton.create({                     icon: "icons/16/icon_add_files.png",                     title: "Add Contributiong Risk",                     click: function () {                        isc.say("Close this Risk Editor and use the \"Summary and Propogated Risks\" main tab to associate contributing risks");                     }                  }), isc.ToolStripMenuButton.create({                     title: "Selected Risks",                     showRollOver: false,                     menu: isc.Menu.create({                        showShadow: true,                        shadowDepth: 10,                        data: [{                           title: "Remove as a Contributing Risk",                           icon: "[SKIN]/actions/remove.png",                           enableIf: "(ChildRiskTable.getSelection().length > 0)?true:false",                           click: function () {                              try {                                 isc.RPCManager.sendRequest({                                    actionURL: "./removeContributingRisk",                                    prompt: "Removing Contributing Risks",                                    evalResult: false,                                    params: {                                       "PROJECTID": projectID,                                       "RISKID": qoRiskController.currentRisk.riskID,                                       "RISKS": JSON.stringify(ChildRiskTable.getSelection())                                    },                                    callback: function (                                    rpcResponse, data2, rpcRequest) {                                       ChildRiskTable.fetchData({                                          "PROJECTID": projectID,                                          "OPERATION": "getRiskLiteFetch",                                          "PARENTRISKID": qoRiskController.currentRisk.riskID,                                          "DESCENDANTS": true,                                          "NOCACHE": Math.random()                                       });                                       isc.say(data2);                                    }                                 });                              } catch (e) {                                 alert(e.message);                              }                           }                        }, {                           isSeparator: true                        }, {                           title: "Request Update from Risk Owner",                           icon: "icons/16/person_into.png",                           enableIf: "(ChildRiskTable.getSelection().length > 0)?true:false",                           click: function () {                              alert("Request Owner");                           }                        }, {                           title: "Request Update from Risk Manager",                           icon: "icons/16/person_into.png",                           enableIf: "(ChildRiskTable.getSelection().length > 0)?true:false",                           click: function () {                              alert("Request Manager");                           }                        }]                     })                  })]               });            } catch (e) {               alert(e.message);            }            this.table2 = isc.ListGrid.create({               height: "100%",               ID: "ChildStakeHolderTable",               dataSource: allRiskStakeholdersDS,               sortField: "name",               sortDirection: "descending",               alternateRecordStyles: true,               emptyMessage: "No Contributing Stakeholders to this Risk",               selectionAppearance: "checkbox",               fields: [{                  name: "name",                  title: "Stakeholder",                  width: 200,                  align: "left"               }, {                  name: "email",                  title: "Email Address",                  align: "left",                  width: "100%"               }, {                  name: "compoundName",                  title: "Role",                  align: "left",                  width: "300"               }]            });            try {               isc.ToolStrip.create({                  ID: "childStakeHolderButtonLayout",                  width: "100%",                  height: 24,                  border: "1px solid " + qrmCtrlColor,                  backgroundColor: qrmCtrlColor,                  members: [                  isc.Label.create({                     contents: "",                     height: 20,                     width: "100%"                  }), isc.ToolStripButton.create({                     title: "Add Contributing Stakeholder",                     icon: "icons/16/person.png",                     click: function () {                        qoRiskEditor.addStakeholderToRisk();                     }                  }), isc.ToolStripMenuButton.create({                     title: "Selected Stakeholders",                     showRollOver: false,                     menu: isc.Menu.create({                        showShadow: true,                        shadowDepth: 10,                        data: [{                           title: "Remove as a Contributing Stakeholder",                           icon: "icons/16/folder_out.png",                           enableIf: "(ChildStakeHolderTable.getSelection().length > 0)?true:false",                           click: function () {                              try {                                 isc.RPCManager.sendRequest({                                    actionURL: "./removeContributingRiskStakeholder",                                    prompt: "Removing Stakeholder",                                    evalResult: false,                                    params: {                                       "RISKID": qoRiskController.currentRisk.riskID,                                       "STAKEHOLDERS": JSON.stringify(ChildStakeHolderTable.getSelection())                                    },                                    callback: function (                                    rpcResponse, data2, rpcRequest) {                                       ChildStakeHolderTable.fetchData({                                          "PROJECTID": projectID,                                          "RISKID": qoRiskController.currentRisk.riskID,                                          "NOCACHE": Math.random()                                       });                                       isc.say(data2);                                    }                                 });                              } catch (e) {                                 alert(e.message);                              }                           }                        }, {                           isSeparator: true                        }, {                           title: "Request Update from Stakeholder",                           icon: "icons/16/disk_blue.png",                           enableIf: "(ChildStakeHolderTable.getSelection().length > 0)?true:false",                           click: function () {                              alert("Request Stakeholder");                           }                        }]                     })                  })]               });            } catch (e) {               alert(e.message);            }            this.addMembers([isc.QRMRiskEditorLabel.create({               title: "Contributing Risks",               height: 30,               ID: "IDContributingRiskLabel"            }), childButtonLayout, this.table, isc.QRMRiskEditorLabel.create({               title: "Contributing Stakeholders",               height: 40            }), childStakeHolderButtonLayout, this.table2]);         }      });   };   this.addStakeholderToRisk = function () {      isc.Window.create({         title: "Add Contributing Stakeholder To Risk",         ID: "addRiskStakeholderWin",         autoSize: true,         autoCenter: true,         isModal: true,         showModalMask: true,         showMinimizeButton: false,         autoDraw: true,         closeClick: function () {            this.Super("closeClick", arguments);         },         items: [isc.DynamicForm.create({            width: 550,            titleWidth: 180,            padding: 10,            ID: "addRiskStakeholderForm",            fields: [{               type: "header",               defaultValue: "Add Stakeholder to Risk"            }, {               name: "RowSpacerItem0",               _constructor: "RowSpacerItem"            }, {               name: "stakeholder",               width: 320,               title: "Contributing Stakeholder",               type: "comboBox",               allowEmptyValue: false,               optionDataSource: "allUsersDS",               pickListWidth: 320,               displayField: "compoundName",               valueField: "stakeholderID",               required: true            }, {               name: "role",               showTitle: true,               editorType: "text",               title: "Role",               width: 320,               required: true            }, {               name: "RowSpacerItem0",               _constructor: "RowSpacerItem"            }, {               name: "validateBtn",               title: "Submit",               type: "button",               align: "right",               colSpan: 2,               click: function () {                  addRiskStakeholderWin.hide();                  try {                     isc.RPCManager.sendRequest({                        actionURL: "./addRiskStakeholder",                        prompt: "Adding Stakeholder",                        evalResult: false,                        params: {                           "RISKID": qoRiskController.currentRisk.riskID,                           "STAKEHOLDERID": addRiskStakeholderForm.getValue("stakeholder"),                           "ROLE": addRiskStakeholderForm.getValue("role")                        },                        callback: function (rpcResponse, data2, rpcRequest) {                           ChildStakeHolderTable.fetchData({                              "PROJECTID": projectID,                              "RISKID": qoRiskController.currentRisk.riskID,                              "NOCACHE": Math.random()                           });                           isc.say(data2);                        }                     });                  } catch (e) {                     alert(e.message);                  }               }            }]         })]      });   };   this.getRiskEditorObjectiveLayout = function () {      return isc.VLayout.create({         ID: "ObjectiveLayout",         height: "100%",         width: "100%",         membersMargin: 5,         members: [isc.QRMRiskEditorLabel.create({            title: "Objectives Impacted"         }), isc.TreeGrid.create({            ID: "RiskObjectiveTree",            height: "100%",            width: "100%",            cursor: "hand",            showConnectors: true,            nodeIcon: "[SKIN]file.png",            folderIcon: "[SKIN]file.png",            closedIconSuffix: "",            showOpenIcons: false,            showDropIcons: false,            rowClick: function (record, recordNum, fieldNum) {               record.active = !record.active;               RiskObjectiveTree.redraw();               var activeRecords = RiskObjectiveTree.data.data.findAll("active", true);               var idsRec = new Array();               if (activeRecords != null) {                  for (var i = 0; i < activeRecords.length; i++) {                     idsRec.add(activeRecords[i].objectiveID);                  }               } else {                  idsRec.add(-1);               }               isc.RPCManager.showPrompt = true;               isc.RPCManager.sendRequest({                  promptStyle: "cursor",                  evalResult: false,                  params: {                     "DATA": JSON.stringify(idsRec),                     "RISKID": qoRiskController.riskID,                     "PROJECTID": project.projectID                  },                  callback: function (rpcResponse, data, rpcRequest) {                     if (data == "false") {                        isc.say("You do not have updates rights on this risk\nChanges not saved");                     }                  },                  actionURL: "./saveRiskObjectives"               });            },            getCellCSSText: function (record, rowNum, colNum) {               if (rowNum == 0) {                  return "color:black;";               }               if (colNum == 0) {                  if (record.active) {                     return "color:red;";                  }               }            }         })]      });   };   this.getRiskEditorResponseLayout = function () {      return isc.VLayout.create({         membersMargin: 5,         ID: "riskResponseLayout",         dirty: false,         deleteResponse: function () {            isc.RPCManager.sendRequest({               prompt: "Deleting Response Step",               showPrompt: true,               evalResult: false,               actionURL: "./deleteRiskMitigation",               params: {                  "DATA": JSON.stringify(riskEditorResponseTable.getSelection().getProperty("mitstepID")),                  "PROJECTID": project.projectID,                  "RISKID": qoRiskController.currentRisk.riskID               },               callback: function (rpcResponse, data, rpcRequest) {                  try {                     var resPlan = JSON.parse(data, dateParser).mitigationPlan.findAll("response", 1);                     if (resPlan == null) {                        riskEditorResponseTable.setData([]);                     } else {                        riskEditorResponseTable.setData(resPlan);                     }                  } catch (e) {                     isc.say(e.message);                  }               }            });         },         showMainButtons: function (show) {            if (show) {               responseNewStepBtn.show();               responseEditBtn.show();               responseDeleteBtn.show();               responseCancelEditBtn.hide();               responseFinishEditBtn.hide();            } else {               responseNewStepBtn.hide();               responseEditBtn.hide();               responseDeleteBtn.hide();               responseCancelEditBtn.show();               responseFinishEditBtn.show();            }         },         initWidget: function () {            this.Super("initWidget", arguments);            this.toolStrip = isc.HLayout.create({               width: "100%",               align: "right",               membersMargin: 5,               height: 24,               initWidget: function () {                  this.Super("initWidget", arguments);                  this.newBtn = isc.QRMAddButton.create({                     ID: "responseNewStepBtn",                     title: "Create New",                     click: function () {                        isc.RPCManager.sendRequest({                           prompt: "Adding Response Action",                           showPrompt: true,                           evalResult: false,                           actionURL: "./newRiskMitigation",                           params: {                              "PROJECTID": project.projectID,                              "RESPONSE": true,                              "RISKID": qoRiskController.currentRisk.riskID                           },                           callback: function (rpcResponse, data, rpcRequest) {                              try {                                 var riskTemp = JSON.parse(data, dateParser);                                 var mitPlan = riskTemp.mitigationPlan.findAll("response", 1);                                 if (mitPlan == null) {                                    riskEditorResponseTable.setData([]);                                 } else {                                    riskEditorResponseTable.setData(mitPlan);                                 }                              } catch (e) {                                 isc.say(e.message);                              }                           }                        });                     }                  });                  this.delBtn = isc.QRMDeleteButton.create({                     ID: "responseDeleteBtn",                     disabled: true,                     click: function () {                        riskResponseLayout.deleteResponse();                     }                  });                  this.editBtn = isc.QRMEditButton.create({                     ID: "responseEditBtn",                     disabled: true,                     click: function () {                        this.parentElement.parentElement.table.editSelectedRecord();                     }                  });                  this.cancelBtn = isc.QRMCancelButton.create({                     ID: "responseCancelEditBtn",                     title: "Cancel Edits",                     disabled: true,                     click: function () {                        this.parentElement.parentElement.table.cancelEditing();                     }                  });                  this.finishBtn = isc.QRMFinishButton.create({                     ID: "responseFinishEditBtn",                     title: "Finish Edits",                     disabled: true,                     click: function () {                        this.parentElement.parentElement.table.endEditing();                     }                  });                  this.addMembers([this.editBtn, this.delBtn, this.newBtn, this.cancelBtn, this.finishBtn]);               }            });            this.table = isc.ListGrid.create({               ID: "riskEditorResponseTable",               autoDraw: false,               alternateRecordStyles: true,               wrapCells: true,               fixedRecordHeights: false,               height: "100%",               confirmCancelEditing: false,               confirmDiscardEdits: false,               showGridSummary: true,               selectionAppearance: "checkbox",               editComplete: function (rowNum, colNum, newValues, oldValues, editCompletionEvent) {                  riskResponseLayout.showMainButtons(true);                  this.parentElement.dirty = true;                  isc.RPCManager.showPrompt = true;                  isc.RPCManager.sendRequest({                     evalResult: false,                     actionURL: "./saveRiskResponse",                     prompt: "Updating Response Action",                     params: {                        "DATA": JSON.stringify(this.getData()),                        "RISKID": qoRiskController.riskID,                        "PROJECTID": project.projectID                     },                     callback: function (rpcResponse, data, rpcRequest) {                        try {                           var resPlan = JSON.parse(data, dateParser).mitigationPlan.findAll("response", 1);                           if (resPlan == null) {                              riskEditorResponseTable.setData([]);                           } else {                              riskEditorResponseTable.setData(resPlan);                           }                           qoRiskController.dirty = true;                        } catch (e) {                           isc.say(e.message);                        }                     }                  });               },               editorExit: function (editCompletionEvent, record, newValue, rowNum, colNum) {                  riskResponseLayout.showMainButtons(true);                  this.parentElement.toolStrip.cancelBtn.setDisabled(true);                  this.parentElement.toolStrip.finishBtn.setDisabled(true);                  this.parentElement.toolStrip.delBtn.setDisabled(true);                  this.parentElement.toolStrip.editBtn.setDisabled(true);                  return true;               },               emptyMessage: "No Response Actions Defined",               fields: [{                  name: "description",                  title: "Description",                  canEdit: true,                  width: "100%",                  align: "left",                  summaryFunction: "count",                  pluralTitle: "Response Actions",                  editorType: "textArea",                  editorProperties: {                     height: 40                  }               }],               recordClick: function () {                  this.parentElement.toolStrip.delBtn.setDisabled(false);                  this.parentElement.toolStrip.editBtn.setDisabled(false);               },               editSelectedRecord: function () {                  riskResponseLayout.showMainButtons(false);                  this.startEditing(this.getRecordIndex(this.getSelectedRecord()));               },               editorEnter: function () {                  riskResponseLayout.showMainButtons(false);                  this.setValueMap(1, qoValueMap.manager);                  this.parentElement.toolStrip.cancelBtn.setDisabled(false);                  this.parentElement.toolStrip.finishBtn.setDisabled(false);               },               selectionChanged: function (record, state) {                  this.parentElement.toolStrip.editBtn.setDisabled(!state);                  this.parentElement.toolStrip.delBtn.setDisabled(!state);               }            });            this.addMember(isc.QRMRiskEditorLabel.create({               title: "Response Plan"            }));            this.addMembers([this.table, this.toolStrip]);         }      });   };   this.riskEditorTabSelected = function (tabNum, tabPane, ID, tab) {      qoCurrent.TabNum = tabNum;      qoCurrent.TabPane = tabPane;      qoCurrent.TabID = ID;      qoCurrent.Tab = tab;      try {         riskMitigationLayout.table.cancelEditing();         riskMitigationLayout.showMainButtons(true);         riskResponseLayout.table.cancelEditing();         riskResponseLayout.showMainButtons(true);         riskControlLayout.table.cancelEditing();         riskControlLayout.showMainButtons(true);      } catch (e) {         //      }      try {         if (tabPane.ID == "riskChildRiskLayout") {            try {               ChildRiskTable.fetchData({                  "PROJECTID": projectID,                  "OPERATION": "getRiskLiteFetch",                  "PARENTRISKID": qoRiskController.currentRisk.riskID,                  "DESCENDANTS": true,                  "NOCACHE": Math.random()               });               ChildStakeHolderTable.fetchData({                  "PROJECTID": projectID,                  "RISKID": qoRiskController.currentRisk.riskID,                  "NOCACHE": Math.random()               });            } catch (e) {               alert(e);            }            // Show or hide the contributring risk table if it is a summry            // or top risk            if (qoRiskController.currentRisk.summaryRisk || qoRiskController.currentRisk.forceDownParent) {               ChildRiskTable.show();               childButtonLayout.show();               IDContributingRiskLabel.show();            } else {               ChildRiskTable.hide();               childButtonLayout.hide();               IDContributingRiskLabel.hide();            }         }         if (tabPane.ID == "riskAttachmentLayout") {            getRiskAttachments();         }         if (tabPane.ID == "riskCommentLayout") {            getRiskComments();         }         if (tabPane.ID == "riskReviewLayout") {            getRiskReviewLayoutData();            getRiskAuditData();         }         if (tabPane.ID == "riskConsequenceLayout") {            updateConsequnceTable();            updateRiskEditorContingency();         }         if (tabPane.ID == "riskProbImpactLayout" && !riskProbImpactLayout.dirty) {            probImpactMatrixImg.setMatrix(qoRiskController.currentRisk);            probImpactFreqForm.clearValues();            if (qoRiskController.currentRisk.useCalculatedProb) {               probImpactFreqForm.setValue("liketype", qoRiskController.currentRisk.liketype);               probImpactFreqForm.setValue("likealpha", qoRiskController.currentRisk.likealpha);               if (qoRiskController.currentRisk.liketype == 3) {                  probImpactFreqForm.setValue("liket", qoRiskController.currentRisk.liket);               } else {                  probImpactFreqForm.setValue("liket", 0);               }               probImpactFreqForm.setValue("useCalculatedProb", "true");               probImpactFreqForm.setFormState(probImpactFreqForm, true);               probImpactFreqForm.setValue("likepostType", qoRiskController.currentRisk.likepostType);               probImpactFreqForm.setValue("likepostAlpha", qoRiskController.currentRisk.likepostAlpha);               if (qoRiskController.currentRisk.liketype == 3) {                  probImpactFreqForm.setValue("likepostT", qoRiskController.currentRisk.likepostT);               } else {                  probImpactFreqForm.setValue("likepostT", 0);               }               var prob = calcProb(qoRiskController.currentRisk, true);               if (isNaN(prob)) {                  prob = 0.0;               }               probImpactFreqForm.getItem("prob").setValue(qoQRM.roundDoubleStr(prob, 2));               prob = calcProb(qoRiskController.currentRisk, false);               if (isNaN(prob)) {                  prob = 0.0;               }               probImpactFreqForm.getItem("probPost").setValue(qoQRM.roundDoubleStr(prob, 2));            } else {               probImpactMatrixImg.setFormProb();            }            probImpactFreqForm.setValue("useCalculatedProb", qoRiskController.currentRisk.useCalculatedProb);            probImpactFreqForm.setFormState(probImpactFreqForm, qoRiskController.currentRisk.useCalculatedProb);            probImpactProbDescLayout.removeMembers(probImpactProbDescLayout.members);            probImpactProbDescLayout.addMember(isc.Label.create({               contents: "<div style='margin-bottom:15px;font-size:12px;font-weight:bold;font-famliy:Verdana,sans-serif'>Probability Descriptions</div>",               height: 20            }));            for (var p = 1; p <= qoCurrent.Matrix.maxProb; p++) {               var str1 = eval("qoCurrent.Matrix.prob" + p);               var val = eval("qoCurrent.Matrix.probVal" + p);               var cont = "<span style='margin:20px'><b>" + p + " - " + str1 + "</b>&nbsp;&nbsp;&nbsp;<i>Pr()< " + val + "</i></span>";               probImpactProbDescLayout.addMember(isc.Label.create({                  contents: cont,                  height: 20               }));            }            probImpactDescriptionLayout.removeMembers(probImpactDescriptionLayout.members);            probImpactImpactDescLayout.removeMembers(probImpactImpactDescLayout.members);            probImpactImpactDescLayout.addMember(isc.Label.create({               contents: "<div style='margin-bottom:15px;font-size:12px;font-weight:bold;font-famliy:Verdana,sans-serif'>Impact Descriptions</div>",               height: 20            }));            for (var p = 1; p <= qoCurrent.Matrix.maxImpact; p++) {               var cont = "<span style='margin:20px'><b>" + p + " - " + eval("qoCurrent.Matrix.impact" + p) + "</b></span>";               probImpactImpactDescLayout.addMember(isc.Label.create({                  contents: cont,                  height: 20               }));            }            var action;            try {               action = project.tolActions[4].tolAction;               if (action.length == 0) action = project.tolActions[4].longName;            } catch (e) {               action = "-";            }            probImpactDescriptionLayout.addMember(isc.Label.create({               contents: "<span style='color:white;font-weight:bold;background:red;padding:2px 5px 2px 5px;'>Tolerance 5</span>&nbsp;&nbsp;" + action,               height: 20            }));            try {               action = project.tolActions[3].tolAction;               if (action.length == 0) action = project.tolActions[3].longName;            } catch (e) {               action = "-";            }            probImpactDescriptionLayout.addMember(isc.Label.create({               contents: "<span style='color:black;font-weight:bold;background:orange;padding:2px 5px 2px 5px;'>Tolerance 4</span>&nbsp;&nbsp;" + action,               height: 20            }));            try {               action = project.tolActions[2].tolAction;               if (action.length == 0) action = project.tolActions[2].longName;            } catch (e) {               action = "-";            }            probImpactDescriptionLayout.addMember(isc.Label.create({               contents: "<span style='color:black;font-weight:bold;background:yellow;padding:2px 5px 2px 5px;'>Tolerance 3</span>&nbsp;&nbsp;" + action,               height: 20            }));            try {               action = project.tolActions[1].tolAction;               if (action.length == 0) action = project.tolActions[1].longName;            } catch (e) {               action = "-";            }            probImpactDescriptionLayout.addMember(isc.Label.create({               contents: "<span style='color:black;font-weight:bold;background:#00ff00;padding:2px 5px 2px 5px;'>Tolerance 2</span>&nbsp;&nbsp;" + action,               height: 20            }));            try {               action = project.tolActions[0].tolAction;               if (action.length == 0) action = project.tolActions[0].longName;            } catch (e) {               action = "-";            }            probImpactDescriptionLayout.addMember(isc.Label.create({               contents: "<span style='color:black;font-weight:bold;background:#00ffff;padding:2px 5px 2px 5px;'>Tolerance 1</span>&nbsp;&nbsp;" + action,               height: 20            }));            riskProbImpactLayout.setSinglePhase(qoQRM.singlePhase, qoRiskController.currentRisk);         }      } catch (e) {         isc.say(e.message);      }   };   this.createRiskEditor = function () {      try {         if (typeof (idRiskEditorWindow) != "undefined" && project.tabsToUse == qoQRM.currentEditorMask) {            return;         }         qoQRM.currentEditorMask = project.tabsToUse;         isc.TabSet.create({            width: "100%",            height: "100%",            ID: "riskTabSet",            backgroundColor: "white",            tabBarPosition: "top",            tabSelected: function (tabNum, tabPane, ID, tab) {               try {                  qoRiskEditor.riskEditorTabSelected(tabNum, tabPane, ID, tab);               } catch (error) {                  alert(error.message);               }            }         });         try {            riskTabSet.addTab({               title: "Evaluation",               pane: this.getRiskEditorEvalLayout()            });            riskTabSet.addTab({               title: "Prob/Impact",               pane: this.getRiskEditorProbImpactLayout()            });            if (qoQRM.currentEditorMask & qoQRM.pageMitigation) {               riskTabSet.addTab({                  title: "Mitigation",                  pane: this.getRiskEditorMitigationLayout()               });            }            riskTabSet.addTab({               ID: "riskEditorChildTabID",               title: "Contributing Risks & Stakeholders",               pane: this.getRiskEditorChildRiskLayout()            });            if (qoQRM.currentEditorMask & qoQRM.pageComment) {               riskTabSet.addTab({                  title: "Staus Updates",                  pane: this.getRiskEditorCommentLayout()               });            }            if (qoQRM.currentEditorMask & qoQRM.pageResponse) {               riskTabSet.addTab({                  title: "Response",                  pane: this.getRiskEditorResponseLayout()               });            }            if (qoQRM.currentEditorMask & qoQRM.pageConsequence) {               riskTabSet.addTab({                  title: "Consequences",                  pane: this.getRiskEditorConsequenceLayout()               });            }            if (qoQRM.currentEditorMask & qoQRM.pageControl) {               riskTabSet.addTab({                  title: "Controls",                  pane: this.getRiskEditorControlLayout()               });            }            if (qoQRM.currentEditorMask & qoQRM.pageObjective) {               riskTabSet.addTab({                  title: "Objectives",                  pane: this.getRiskEditorObjectiveLayout()               });            }            if (qoQRM.currentEditorMask & qoQRM.pageAttachment) {               riskTabSet.addTab({                  title: "Attachments",                  pane: this.getRiskEditorAttachmentLayout()               });            }            if (qoQRM.currentEditorMask & qoQRM.pageAudit) {               riskTabSet.addTab({                  title: "Audits & Reviews",                  pane: this.getRiskEditorReviewLayout()               });            }         } catch (e) {            alert(e.message);         }         isc.QRMSaveButton.create({            ID: "riskSaveBtn",            autoDraw: false,            disabled: true,            click: function () {               var tab = 0;               if (riskTabSet.getTab(1).pane.dirty) {                  tab = 1;               }               if (riskTabSet.getTab(0).pane.dirty) {                  tab = 0;               }               if (riskTabSet.getTab(2).pane.dirty) {                  tab = 2;               }               if (qoRiskController.allowEditorChanges && qoRiskController.secAllowEdit) {                  try {                     // first two tabs are saved in one call                     if (riskTabSet.getTab(0).pane.dirty || riskTabSet.getTab(1).pane.dirty) {                        // If the form is not valid, focus on                        // the form and exit                        if (!riskBasicForm.validate()) {                           riskTabSet.selectTab(0);                           return;                        }                        // Collect data from risk Basic Form                        var values = riskBasicForm.getValues();                        // null out some values to save                        // transmission bandwidth                        values.mitigationPlan = null;                        values.probConsequenceNodes = null;                        values.controls = null;                        values.objectivesImpacted = null;                        values.startExposure = simplifyDate(values.startExposure);                        values.endExposure = simplifyDate(values.endExposure);                        values.mitPlanSummary = riskMitPlanSummaryForm.getItem("mitPlanSummary").getValue();                        values.mitPlanSummaryUpdate = riskMitPlanSummaryForm2.getItem("mitPlanSummaryUpdate").getValue();                        // Collect data from Prob/Impact tab                        if (riskTabSet.getTab(1).pane.dirty) {                           if (qoQRM.singlePhase) {                              values.treatedProb = probImpactMatrixImgPreMitImg.getProb();                              values.treatedImpact = probImpactMatrixImgPreMitImg.getImpact();                              values.inherentProb = probImpactMatrixImgPreMitImg.getProb();                              values.inherentImpact = probImpactMatrixImgPreMitImg.getImpact();                              values.useCalculatedProb = probImpactFreqForm.getItem("useCalculatedProb").getValue();                              values.liket = probImpactFreqForm.getItem("liket").getValue();                              values.likealpha = probImpactFreqForm.getItem("likealpha").getValue();                              values.likepostT = probImpactFreqForm.getItem("liket").getValue();                              values.likepostAlpha = probImpactFreqForm.getItem("likealpha").getValue();                              values.liketype = probImpactFreqForm.getItem("liketype").getValue();                              values.likepostType = probImpactFreqForm.getItem("liketype").getValue();                              values.likeprop = probImpactFreqForm.getItem("prob").getValue();                              values.likepostProb = probImpactFreqForm.getItem("prob").getValue();                           } else {                              values.treatedProb = probImpactMatrixImgPostMitImg.getProb();                              values.treatedImpact = probImpactMatrixImgPostMitImg.getImpact();                              values.inherentProb = probImpactMatrixImgPreMitImg.getProb();                              values.inherentImpact = probImpactMatrixImgPreMitImg.getImpact();                              values.liket = probImpactFreqForm.getItem("liket").getValue();                              values.likealpha = probImpactFreqForm.getItem("likealpha").getValue();                              values.likepostT = probImpactFreqForm.getItem("likepostT").getValue();                              values.likepostAlpha = probImpactFreqForm.getItem("likepostAlpha").getValue();                              values.liketype = probImpactFreqForm.getItem("liketype").getValue();                              values.likepostType = probImpactFreqForm.getItem("likepostType").getValue();                              values.likeprop = probImpactFreqForm.getItem("prob").getValue();                              values.likepostProb = probImpactFreqForm.getItem("probPost").getValue();                              values.useCalculatedProb = probImpactFreqForm.getItem("useCalculatedProb").getValue();                           }                        }                        isc.RPCManager.showPrompt = true;                        isc.RPCManager.sendRequest({                           promptStyle: "cursor",                           evalResult: false,                           actionURL: "./saveRisk",                           params: {                              "RISKID": qoRiskController.currentRisk.riskID,                              "PROJECTID": qoRiskController.currentRisk.projectID,                              "DATA": JSON.stringify(values),                              "NOCACHE": Math.random()                           },                           callback: function (rpcResponse, data, rpcRequest) {                              try {                                 riskTabSet.getTab(0).pane.dirty = false;                                 riskTabSet.getTab(1).pane.dirty = false;                                 riskTabSet.setTabTitle(riskTabSet.getTab(0), "Evaluation");                                 riskTabSet.setTabTitle(riskTabSet.getTab(1), "Prob/Impact");                                 qoRiskController.resetOnExit = true;                                 getRiskAndDisplayCallBack(data, tab, false);                                 RiskEditorTabSetHolder.show();                              } catch (e) {                                 isc.say(e.message);                              }                           }                        });                     }                     riskResetBtn.setDisabled(true);                     riskSaveBtn.setDisabled(true);                     if (qoRiskController.dirty) {                        idRiskEditorWindow.setTitle("<span style='color:white'>" + qoRiskController.currentRisk.riskProjectCode + " - " + qoRiskController.currentRisk.title + "</span>");                     }                  } catch (e) {                     isc.say(e.message);                  }               }            }         });         isc.QRMRefreshButton.create({            title: "Reset",            ID: "riskResetBtn",            autoDraw: false,            disabled: true,            click: function () {               riskTabSet.selectTab(0);               getRiskAndDisplay(qoRiskController.riskID);               riskProbImpactLayout.dirty = false;               riskResponseLayout.dirty = false;               ObjectiveLayout.dirty = false;               riskMitigationLayout.dirty = false;               riskEditorLikelihoodCombo.dirty = false;               riskControlLayout.dirty = false;               riskConsequenceLayout.dirty = false;               allowEditorChange = true;            }         });         isc.QRMExportButton.create({            ID: "riskDownloadBtn",            autoDraw: false,            disabled: true,            click: function () {               alert("DOWNLOAD RISK");            }         });         var holder = isc.VLayout.create({            ID: "RiskEditorTabSetHolder",            backgroundColor: "white",            height: "100%",            width: "100%",            members: [riskTabSet],            layoutTopMargin: 5,            layoutMargin: 5         });         var btnholder = isc.HLayout.create({            vwidth: "100%",            align: "right",            members: [riskSaveBtn, riskResetBtn, riskDownloadBtn],            layoutTopMargin: 5,            layoutMargin: 5,            membersMargin: 4         });         isc.Window.create({            title: "Risk Editor",            ID: "idRiskEditorWindow",            headerControls: ["headerLabel", "maximizeButton", "closeButton"],            headerDefaults: {               layoutMargin: 1,               membersMargin: 5,               height: 26            },            items: [btnholder, holder],            height: Math.min(MainPane.height, 760),            width: Math.min(MainPane.width * 0.98, 1250),            isModal: true,            showModalMask: true,            showMaximizeButton: false,            autoCenter: true,            closeClick: function () {               try {                  if (qoRiskController.dirty) {                     isc.ask("You have unsaved changes.\n\nUnsaved changes will be lost if you continue. \nDo you wish to continue?", function (value) {                        if (!value) {                           return true;                        } else {                           try {                              riskMitigationLayout.table.cancelEditing();                           } catch (e) {                              //                           }                           riskProbImpactLayout.dirty = false;                           qoRiskController.allowEditorChanges = true;                           qoRiskController.riskID = 0;                           RiskTableWindow.show();                           idRiskEditorWindow.hide();                           registerRiskInterest(null);                           if (qoRiskController.dirty || qoRiskController.contingencyDirty || qoRiskController.resetOnExit) {                              updateSelectedProject();                              qoRiskController.dirty = false;                              qoRiskController.contingencyDirty = false;                              qoRiskController.resetOnExit = false;                           }                           return false;                        }                     }, {                        buttons: [Dialog.OK, Dialog.CANCEL]                     });                  } else {                     try {                        riskMitigationLayout.table.cancelEditing();                     } catch (e) {                        //                     }                     try {                        riskProbImpactLayout.dirty = false;                        qoRiskController.allowEditorChanges = true;                        qoRiskController.riskID = 0;                        RiskTableWindow.show();                        idRiskEditorWindow.hide();                        registerRiskInterest(null);                        if (qoRiskController.dirty || qoRiskController.contingencyDirty || qoRiskController.resetOnExit) {                           updateSelectedProject();                           qoRiskController.dirty = false;                           qoRiskController.contingencyDirty = false;                           qoRiskController.resetOnExit = false;                        }                        return false;                     } catch (e) {                        alert("Position 1 " + e.message);                     }                  }               } catch (e) {                  alert(e.message);               }            }         });         return idRiskEditorWindow;      } catch (ex1) {         alert(ex1.message);      }   };}function ReportEngine() {   this.reportParamMap = new Map();   this.flowController = function (report) {             var noSelectWindow = false;      if (report.checkTableSelection) {         if (!this.checkTableSelection()) return;      }      if (report.baseValues) {         this.setBaseReportValues(report.reportID);      }      if (report.excelOnly) {         this.reportParamMap.put('format', 'MS Excel');      }      if (report.projectRisk) {         this.reportParamMap.put('projectRisk', true);         this.setExtForProjectReport();      }      if (report.addAllRiskIDS) {         this.addAllRiskIDS();         this.setExtForRegistryReport();      }      if (report.registerReport) {         this.reportParamMap.put('registerReport', true);         this.setExtForRegistryReport();      }      if (report.addSelectedRiskIDS) {         this.addSelectedRiskIDS();         this.setExtForRegistryReport();      }      if (report.analysisWidget){         noSelectWindow = true;         AnalysisWidgetID.prepareExport();      }      if (report.relMatrix){                  noSelectWindow = true;                  if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Current Tolerance") {            this.reportParamMap.put("currentState", true);            this.reportParamMap.put("inherentState", false);            this.reportParamMap.put("treatedState", false);         }         if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Un Treated Tolerance") {            this.reportParamMap.put("currentState", false);            this.reportParamMap.put("inherentState", true);            this.reportParamMap.put("treatedState", false);         }         if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Treated Tolerance") {            this.reportParamMap.put("currentState", false);            this.reportParamMap.put("inherentState", false);            this.reportParamMap.put("treatedState", true);         }      }            if (report.noSelectWindow){         noSelectWindow = true;      }            if (report.detailConfigWindow) {         this.getRiskReportConfigWindow(noSelectWindow);         // Submission is taken care of by the config window code         return;      }      if (report.submit) {         this.submitBackGroundReport(noSelectWindow);         return;      }   };   this.checkTableSelection = function () {      if (viewState == "Regular") {         return true;      } else {         alert("Please Use The 'Regular' Table Format View");         return false;      }   };   this.submitBackGroundReport = function (noSelectWindow) {      startChatChannel();               isc.RPCManager.sendRequest({         showPrompt: true,         prompt: "Submitting Report for Processing",         evalResult: true,          prompt: "Submitting Report Request",         params: {            "OPERATION": "submitReportRequest",            "DATA": JSON.stringify(this.reportParamMap),            "PROJECTID": projectID,            "DESCENDANTS": checkDescendants.getValue(),            "action": "SUBMITANDEXECUTE"         },         callback: function (rpcResponse, jobID, rpcRequest) {            if (noSelectWindow){               isc.say("Report Submitted for Processing (ID: " + jobID + ").<br/><br/>Use the 'Reports' tab to view result");            } else {               qoQRM.ConcurrentPane.setProject(true);               ReportSelectWindow.hide();               isc.say("Report Submitted for Processing (ID: " + jobID + ").");                           }         },         actionURL: "./report"      });      if (typeof (idRiskReportConfigWindow) != "undefined") {         idRiskReportConfigWindow.hide();      }   };   this.setBaseReportValues = function (id) {      this.reportParamMap.clear();      this.reportParamMap.put("userID", userID);      this.reportParamMap.put("contextID", projectID);      this.reportParamMap.put("projectID", projectID);      this.reportParamMap.put("reportID", id);      this.reportParamMap.put("project", project.projectTitle);      this.reportParamMap.put("descendants", checkDescendants.getValue());      this.reportParamMap.put("nocache", Math.random());   };   this.addSelectedRiskIDS = function () {      var recs = RiskTable.getSelection();      var counter = recs.length;      for (var i = 0; i < counter; i++) {         this.reportParamMap.put("riskID" + i, recs[i].riskID);      }   };   this.addAllRiskIDS = function () {      var counter = RiskTable.data.localData.length;      for (var i = 0; i < counter; i++) {         this.reportParamMap.put("riskID" + i, RiskTable.data.localData[i].riskID);      }   };   this.setExtForRegistryReport = function () {      this.reportParamMap.put("extremeFilter", DynamicFormTolerance.getItem("Extreme").getValue());      this.reportParamMap.put("highFilter", DynamicFormTolerance.getItem("High").getValue());      this.reportParamMap.put("sigFilter", DynamicFormTolerance.getItem("Significant").getValue());      this.reportParamMap.put("modFilter", DynamicFormTolerance.getItem("Moderate").getValue());      this.reportParamMap.put("lowFilter", DynamicFormTolerance.getItem("Low").getValue());      this.reportParamMap.put("activeFilter", DynamicFormStatus.getItem("Active").getValue());      this.reportParamMap.put("pendingFilter", DynamicFormStatus.getItem("Pending").getValue());      this.reportParamMap.put("inactiveFilter", DynamicFormStatus.getItem("In Active").getValue());      this.reportParamMap.put("treatedStatus", DynamicFormStatus.getItem("Treated").getValue());      this.reportParamMap.put("inherentStatus", DynamicFormStatus.getItem("Untreated").getValue());      this.reportParamMap.put("tol5", "Extreme");      this.reportParamMap.put("tol4", "High");      this.reportParamMap.put("tol3", "Significant");      this.reportParamMap.put("tol2", "Moderate");      this.reportParamMap.put("tol1", "Low");      this.reportParamMap.put("descendants", checkDescendants.getValue());      this.reportParamMap.put("contextName", project.projectTitle);      this.reportParamMap.put("riskOwner", DynamicFormOwner.getItem("ownerID").getDisplayValue());      this.reportParamMap.put("riskManager", DynamicFormOwner.getItem("manager1ID").getDisplayValue());      this.reportParamMap.put("riskCategory", DynamicFormOwner.getItem("primCatID").getDisplayValue());      this.reportParamMap.put("DESCENDANTS", checkDescendants.getValue());      this.reportParamMap.put("PROJECTID", projectID);      this.reportParamMap.put("OPERATION", "getRiskLiteFetch");      this.reportParamMap.put("PROCESSFILTER", true);      this.reportParamMap.put("TOLEX", DynamicFormTolerance.getItem("Extreme").getValue());      this.reportParamMap.put("TOLHIGH", DynamicFormTolerance.getItem("High").getValue());      this.reportParamMap.put("TOLSIG", DynamicFormTolerance.getItem("Significant").getValue());      this.reportParamMap.put("TOLMOD", DynamicFormTolerance.getItem("Moderate").getValue());      this.reportParamMap.put("TOLLOW", DynamicFormTolerance.getItem("Low").getValue());      this.reportParamMap.put("STATACTIVE", DynamicFormStatus.getItem("Active").getValue());      this.reportParamMap.put("STATPENDING", DynamicFormStatus.getItem("Pending").getValue());      this.reportParamMap.put("STATINACTIVE", DynamicFormStatus.getItem("In Active").getValue());      this.reportParamMap.put("STATTREATED", DynamicFormStatus.getItem("Treated").getValue());      this.reportParamMap.put("STATUNTREATED", DynamicFormStatus.getItem("Untreated").getValue());      this.reportParamMap.put("CATID", (typeof (DynamicFormOwner.getItem("primCatID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("primCatID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("primCatID").getValue());      this.reportParamMap.put("OWNERID", (typeof (DynamicFormOwner.getItem("ownerID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("ownerID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("ownerID").getValue());      this.reportParamMap.put("MANAGERID", (typeof (DynamicFormOwner.getItem("manager1ID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("manager1ID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("manager1ID").getValue());      try {         this.reportParamMap.put("sortBy", RiskTable.getField(RiskTable.getFieldNum(RiskTable.sortField)).title);      } catch (e) {         this.reportParamMap.put("sortBy", "-");      }   };   this.setExtForProjectReport = function () {      this.reportParamMap.put("extremeFilter", true);      this.reportParamMap.put("highFilter", true);      this.reportParamMap.put("sigFilter", true);      this.reportParamMap.put("modFilter", true);      this.reportParamMap.put("lowFilter", true);      this.reportParamMap.put("activeFilter", true);      this.reportParamMap.put("pendingFilter", true);      this.reportParamMap.put("inactiveFilter", true);      this.reportParamMap.put("treatedStatus", true);      this.reportParamMap.put("inherentStatus", true);      this.reportParamMap.put("tol5", "Extreme");      this.reportParamMap.put("tol4", "High");      this.reportParamMap.put("tol3", "Significant");      this.reportParamMap.put("tol2", "Moderate");      this.reportParamMap.put("tol1", "Low");      this.reportParamMap.put("descendants", checkDescendants.getValue());      this.reportParamMap.put("contextName", project.projectTitle);      this.reportParamMap.put("riskOwner", "-");      this.reportParamMap.put("riskManager", "-");      this.reportParamMap.put("riskCategory", "-");      this.reportParamMap.put("sortBy", "-");   };   this.setExtForRiskReport = function () {      try {      this.reportParamMap.put("showCause", idRiskReportConfigForm0.getItem("Cause").getValue());      this.reportParamMap.put("showCategories", idRiskReportConfigForm0.getItem("Categories").getValue());      this.reportParamMap.put("showTolerance", idRiskReportConfigForm0.getItem("Tolerance").getValue());      this.reportParamMap.put("showKeyDates", idRiskReportConfigForm0.getItem("KeyDates").getValue());      this.reportParamMap.put("showAreaImpacted", idRiskReportConfigForm0.getItem("Impacted Area").getValue());      this.reportParamMap.put("showObjectives", idRiskReportConfigForm0.getItem("Objectives Impacted").getValue());      this.reportParamMap.put("showProb", idRiskReportConfigForm0.getItem("Probability").getValue());      this.reportParamMap.put("showImpact", idRiskReportConfigForm0.getItem("Impact").getValue());      this.reportParamMap.put("showMitPlan", idRiskReportConfigForm0.getItem("Mitigation Plans").getValue());      this.reportParamMap.put("showControls", idRiskReportConfigForm0.getItem("Controls").getValue());      this.reportParamMap.put("showComments", idRiskReportConfigForm0.getItem("Comments").getValue());      this.reportParamMap.put("showConsequence", idRiskReportConfigForm0.getItem("Consequences").getValue());      this.reportParamMap.put("showRiskMatrix", idRiskReportConfigForm0.getItem("Risk Matrix").getValue());      } catch (e){         alert("Got an Error "+e.message);      }   };   this.getRiskReportConfigWindow = function (noSelectWindow) {      if (typeof (idRiskReportConfigWindow) == "undefined") {         isc.Window.create({            ID: "idRiskReportConfigWindow",            title: "Risk Report Configuration",            memberMargin: 5,            autoSize: true,            showMinimizeButton: false,            autoCenter: true,            isModal: true,            headerIconProperties: {               src: "icons/16/printer3.png"            },            showModalMask: true,            autoDraw: false,            items: [isc.DynamicForm.create({               fields: [{                  type: "header",                  defaultValue: "Report Content",                  startRow: true               }, {                  showTitle: false,                  name: "Cause",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  name: "Categories",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  name: "Tolerance",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  name: "KeyDates",                  title: "Key Dates",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  name: "ImpactedArea",                  title: "Impacted Area",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  title: "Objectives Impacted",                  name: "ObjectivesImpacted",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  name: "Probability",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  name: "Treatment",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  title: "Mitigation Plans",                  name: "MitigationPlans",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  name: "Controls",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  name: "Consequences",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  name: "Comments",                  defaultValue: true,                  _constructor: "CheckboxItem"               }, {                  showTitle: false,                  title: "Risk Matrix",                  name: "RiskMatrix",                  defaultValue: true,                  _constructor: "CheckboxItem"               }],               numCols: 4,               ID: "idRiskReportConfigForm0",               autoDraw: false            }), isc.HLayout.create({               width: 250,               height: 35,               layoutMargin: 5,               members: [isc.LayoutSpacer.create({                  width: "100%"               }), isc.IButton.create({                  width: 150,                  title: "Generate Report",                  click: function () {//                     if( RiskTable.getSelection().length == 0 ){//                        isc.say("Please select risks before running a report");//                        return;//                     } else {                       qoReportEngine.generateReport(noSelectWindow);//                     }                  }               })]            })]         });      }      idRiskReportConfigWindow.show();   };   this.generateReport = function (noSelectWindow) {      try {         qoReportEngine.reportParamMap.put("format", "PDF");//         qoReportEngine.reportParamMap.put("showDescription", idRiskReportConfigForm0.getItem("Description").getValue());         qoReportEngine.reportParamMap.put("showCause", idRiskReportConfigForm0.getItem("Cause").getValue());         qoReportEngine.reportParamMap.put("showCategories", idRiskReportConfigForm0.getItem("Categories").getValue());         qoReportEngine.reportParamMap.put("showTolerance", idRiskReportConfigForm0.getItem("Tolerance").getValue());         qoReportEngine.reportParamMap.put("showKeyDates", idRiskReportConfigForm0.getItem("KeyDates").getValue());         qoReportEngine.reportParamMap.put("showImpactedAreas", idRiskReportConfigForm0.getItem("ImpactedArea").getValue());         qoReportEngine.reportParamMap.put("showObjectivesImpacted", idRiskReportConfigForm0.getItem("ObjectivesImpacted").getValue());         qoReportEngine.reportParamMap.put("showTreatment", idRiskReportConfigForm0.getItem("Treatment").getValue());         qoReportEngine.reportParamMap.put("showProbability", idRiskReportConfigForm0.getItem("Probability").getValue());         qoReportEngine.reportParamMap.put("showMitigationPlans", idRiskReportConfigForm0.getItem("MitigationPlans").getValue());         qoReportEngine.reportParamMap.put("showControls", idRiskReportConfigForm0.getItem("Controls").getValue());         qoReportEngine.reportParamMap.put("showConsequences", idRiskReportConfigForm0.getItem("Consequences").getValue());         qoReportEngine.reportParamMap.put("showComments", idRiskReportConfigForm0.getItem("Comments").getValue());         qoReportEngine.reportParamMap.put("showRiskMatrix", idRiskReportConfigForm0.getItem("RiskMatrix").getValue());         qoReportEngine.submitBackGroundReport(noSelectWindow);      } catch (e) {         alert(e);      }   };   this.selectAndRunReport = function () {      if (typeof (ReportSelectWindow) == "undefined") {         isc.ListGrid.create({            ID: "reportReportGrid",            width: "100%",            height: "100%",            alternateRecordStyles: true,            selectionType: "single",            recordClick: function (viewer, record) {               try {                  reportPreviewPane.setSrc("./reportPreview?repID=" + record.reportID+"&h="+reportPreviewPane.getHeight()+"&w="+reportPreviewPane.getWidth());               } catch (e) {                  alert(e.message);               }            },            gridComponents: ["header", "body", isc.ToolStrip.create({               width: "100%",               height: 26,               defaultLayoutAlign: "center",               members: [isc.LayoutSpacer.create({                  width: "*"               }), isc.IButton.create({                  title: "Execute Report",                  showOverCanvas: true,                  showRollOver: true,                  showDisabledIcon: true,                  icon: "[SKIN]/actions/forward.png",                  width: 140,                  click: function () {                     try {                        qoReportEngine.flowController(reportReportGrid.getSelection()[0]);                        ReportSelectWindow.hide();                     } catch (e) {                        alert(e.message);                     }                  }               }), isc.LayoutSpacer.create({                  width: 5               })]            })],            fields: [{               name: "title",               title: "Report Title"            }, {               name: "type",               title: "Type",               showIf: "false",               GRP_RISK: 2,               GRP_PROJECT: 1,               GRP_EXPORT: 3,               getGroupValue: function (value, record, field, fieldName, grid) {                  if (record.type == "RISK") return this.GRP_RISK;                  if (record.type == "PROJECT") return this.GRP_PROJECT;                  if (record.type == "EXPORT") return this.GRP_EXPORT;               },               getGroupTitle: function (groupValue, groupNode, field, fieldName, grid) {                  var baseTitle = "";                  switch (groupValue) {                  case this.GRP_RISK:                     baseTitle = "Risk Report - All Project Risks";                     break;                  case this.GRP_PROJECT:                     baseTitle = "Project Reports";                     break;                  case this.GRP_EXPORT:                     baseTitle = "Export All Project Risks";                     break;                  }                  return baseTitle;               }            }],            groupByField: 'type',            groupStartOpen: "all"         });         isc.Window.create({            title: "Select Report To Execute",            ID: "ReportSelectWindow",            layoutMargin: 5,            headerControls: ["headerLabel", "maximizeButton", "closeButton"],            headerDefaults: {               layoutMargin: 1,               membersMargin: 5,               height: 26            },            items: [isc.VLayout.create({               width: "100%",               height: "100%",               layoutMargin: 5,               membersMargin: 5,               members: [isc.Label.create({                  ID: "ReportWindowProjectLabel",                  height: 40,                  width: "100%",                  layoutMargin: 5,                  backgroundColor: qrmCtrlColor,                  align: "left",                  wrap: false               }), isc.HLayout.create({                  width: "100%",                  membersMargin: 5,                  height: "100%",                  members: [                   isc.VLayout.create({                     width:"100%",                     height:"100%",                     members:[isc.QRMLabel.create({title:"Select Report"}),reportReportGrid]                  }),                  isc.VLayout.create({                     width:"100%",                     height:"100%",                     members:[isc.QRMLabel.create({title:"Report Sample Preview"}),                              isc.Img.create({                              border: "1px solid black",                              imageType: "stretch",                              ID: "reportPreviewPane",                              height: "100%",                              width: "100%"                     })]                  })]               })]            })],                                                height: Math.min(MainPane.height, 760),            width: Math.min(MainPane.width * 0.98, 1250),            isModal: true,            showModalMask: true,            showMaximizeButton: false,            autoCenter: true         });      }      ReportSelectWindow.show();      isc.RPCManager.sendRequest({         prompt: "Retrieving Reports",         evalResult: true,         actionURL: "./getHomePageReports",         callback: function (rpcResponse, data, rpcRequest) {            try {               reportReportGrid.setData(data);            } catch (e) {               alert(e.message);            }         }      });      ReportWindowProjectLabel.setContents("<span style='font-weight:normal;font-size:11pt'> &nbsp;&nbsp;Any project specifc reports will be run against: </span><span style='font-weight:bold;font-size:11pt'>" + qoQRM.projectTitleStr + "</span>");      reportPreviewPane.setSrc("./reportPreview?repID=0");   };}function defineJSON() {   if (!this.JSON) {      JSON = function () {         function f(n) { // Format integers to have at least two digits.            return n < 10 ? '0' + n : n;         }         Date.prototype.toJSON = function () {            return this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z';         };         var escapeable = /["\\\x00-\x1f\x7f-\x9f]/g,            gap, indent, meta = { // table               // of               // character               // substitutions               '\b': '\\b',               '\t': '\\t',               '\n': '\\n',               '\f': '\\f',               '\r': '\\r',               '"': '\\"',               '\\': '\\\\'            },            rep;         function quote(string) {            return escapeable.test(string) ? '"' + string.replace(escapeable, function (a) {               var c = meta[a];               if (typeof c === 'string') {                  return c;               }               c = a.charCodeAt();               return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);            }) + '"' : '"' + string + '"';         }         function str(key, holder) {            var i, // The loop counter.            k, // The member key.            v, // The member value.            length, mind = gap,               partial, value = holder[key];            if (value && typeof value === 'object' && typeof value.toJSON === 'function') {               value = value.toJSON(key);            }            if (typeof rep === 'function') {               value = rep.call(holder, key, value);            }            switch (typeof value) {            case 'string':               return quote(value);            case 'number':               return isFinite(value) ? String(value) : 'null';            case 'boolean':            case 'null':               return String(value);            case 'object':               if (!value) {                  return 'null';               }               gap += indent;               partial = [];               if (typeof value.length === 'number' && !(value.propertyIsEnumerable('length'))) {                  length = value.length;                  for (i = 0; i < length; i += 1) {                     partial[i] = str(i, value) || 'null';                  }                  v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';                  gap = mind;                  return v;               }               if (typeof rep === 'object') {                  length = rep.length;                  for (i = 0; i < length; i += 1) {                     k = rep[i];                     if (typeof k === 'string') {                        v = str(k, value, rep);                        if (v) {                           partial.push(quote(k) + (gap ? ': ' : ':') + v);                        }                     }                  }               } else {                  for (k in value) {                     v = str(k, value, rep);                     if (v) {                        partial.push(quote(k) + (gap ? ': ' : ':') + v);                     }                  }               }               v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';               gap = mind;               return v;            }         }         return {            stringify: function (value, replacer, space) {               var i;               gap = '';               indent = '';               if (space) {                  if (typeof space === 'number') {                     for (i = 0; i < space; i += 1) {                        indent += ' ';                     }                  } else if (typeof space === 'string') {                     indent = space;                  }               }               if (!replacer) {                  rep = function (key, value) {                     if (!Object.hasOwnProperty.call(this, key)) {                        return undefined;                     }                     return value;                  };               } else if (typeof replacer === 'function' || (typeof replacer === 'object' && typeof replacer.length === 'number')) {                  rep = replacer;               } else {                  throw new Error('JSON.stringify');               }               return str('', {                  '': value               });            },            parse: function (text, reviver) {               var j;               function walk(holder, key) {                  var k, v, value = holder[key];                  if (value && typeof value === 'object') {                     for (k in value) {                        if (Object.hasOwnProperty.call(value, k)) {                           v = walk(value, k);                           if (v !== undefined) {                              value[k] = v;                           } else {                              delete value[k];                           }                        }                     }                  }                  return reviver.call(holder, key, value);               }               if (/^[\],:{}\s]*$/.test(text.replace(/\\["\\\/bfnrtu]/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {                  j = eval('(' + text + ')');                  return typeof reviver === 'function' ? walk({                     '': j                  }, '') : j;               }               throw new SyntaxError('JSON.parse');            },            quote: quote         };      }();   }}function dateParser(key, value) {   var a;   if (typeof value === 'string') {      a = /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/.exec(value);      if (a) {         var d = new Date();         d.setFullYear(+a[1], +a[2] - 1, +a[3]);         d.setHours(+a[4], +a[5], +a[6], 0);         return d;      }      a = /^(\d{4})-(\d{2})-(\d{2})/.exec(value);      if (a) {         return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3]));      }   }   return value;}function simplifyDate(sdParam) {   var sd = sdParam;   try {      if (sd == null) {         sd = new Date();      }      var year = sd.getFullYear();      var month = sd.getMonth() + 1;      var day = sd.getDate();      var mStr = "";      if (month < 10) {         mStr = mStr + "0" + month;      } else {         mStr = mStr + month;      }      var dStr = "";      if (day < 10) {         dStr = dStr + "0" + day;      } else {         dStr = dStr + day;      }      return year + "-" + mStr + "-" + dStr;   } catch (e) {      return sd;   }}function Map() {   // members   this.keyArray = new Array();   // Keys   this.valArray = new Array();   // Values   this.put = function (key, val) {      var elementIndex = this.findIt(key);      if (elementIndex == (-1)) {         this.keyArray.push(key);         this.valArray.push(val);      } else {         this.valArray[elementIndex] = val;      }   };   this.get = function (key) {      var result = null;      var elementIndex = this.findIt(key);      if (elementIndex != (-1)) {         result = this.valArray[elementIndex];      }      return result;   };   this.remove = function (key) {      var elementIndex = this.findIt(key);      if (elementIndex != (-1)) {         this.keyArray = this.keyArray.removeAt(elementIndex);         this.valArray = this.valArray.removeAt(elementIndex);      }      return;   };   this.size = function () {      return (this.keyArray.length);   };   this.clear = function () {      while (this.keyArray.length > 0) {         this.keyArray.pop();         this.valArray.pop();      }   };   this.keySet = function () {      return (this.keyArray);   };   this.valSet = function () {      return (this.valArray);   };   this.showMe = function () {      var result = "";      for (var i = 0; i < this.keyArray.length; i++) {         result += "Key: " + this.keyArray[i] + "\tValues: " + this.valArray[i] + "\n";      }      return result;   };   this.findIt = function (key) {      var result = (-1);      for (var i = 0; i < this.keyArray.length; i++) {         if (this.keyArray[i] == key) {            result = i;            break;         }      }      return result;   };   this.removeAt = function (index) {      var part1 = this.slice(0, index);      var part2 = this.slice(index + 1);      return (part1.concat(part2));   };}function ProjectManager() {   this.dirtyEditor = false;   this.projectEditorDirty = function () {      projectSaveBtn.setDisabled(false);      projectResetBtn.setDisabled(false);      if (!this.dirtyEditor) {         this.dirtyEditor = true;      }   };   this.projectEditorClean = function () {      projectResetBtn.setDisabled(true);      projectSaveBtn.setDisabled(true);      projectEditorCategory.dirty = false;      projectEditorConsequence.dirty = false;      projectEditorMatrix.dirty = false;      // projectEditorMetric.dirty = false;      projectEditorObjective.dirty = false;      projectEditorStakeholders.dirty = false;      projectEditorBasic.dirty = false;      if (this.dirtyEditor) {         this.dirtyEditor = false;      }   };   this.getUserMgrProjects = function (proj, autoSelect) {      try {         projects = "";         project = proj;         isc.RPCManager.sendRequest({            evalResult: true,            showPrompt: true,            bypassCache: true,            prompt: "Retrieving Managed Projects",            callback: function (rpcResponse, list, rpcRequest) {               qoAll.Users.clear();               qoAll.Matrices.clear();               try {                  projects = list[0];                  projects.setProperty("isFolder", "true");                  if (projects.length <= 0) {                     isc.say(("You do not have Project Management Rights to any of the projects"), function () {                        toggleMode(0);                     });                  } else {                     qoAll.Users = list[1];                     for (var i2 = 0; i2 < list[2].length; i2++) {                        qoAll.Matrices[list[2][i2].matrixID] = list[2][i2];                     }                     projects.remove(projects.find("projectID", -1));                     QRMNavigator.setData(isc.Tree.create({                        ID: "projectTreeData",                        modelType: "parent",                        showRoot: false,                        idField: "projectID",                        parentIdField: "parentID",                        data: projects                     }));                     QRMNavigator.getData().openAll();                     if (autoSelect) {                        QRMNavigator.selectRecord(0);                        QRMNavigator.recordClick();                     }                  }               } catch (e) {                  alert(e.message);               }            },            actionURL: "./getUserMgmtProjects"         });      } catch (e) {         isc.say(e.message);      }   };   this.constructMgrApp = function () {      try {         isc.VLayout.create({            backgroundColor: qrmCtrlColor,            membersMargin: 2,            ID: "ProjectEditorWindow",            layoutMargin: 2,            layoutTopMargin: 2,            layoutBottomMargin: 2,            layoutRightMargin: 2,            layoutLeftMargin: 2,            height: "100%",            width: "100%",            members: [this.getProjectEditorTabSet()],            autoDraw: true         });      } catch (e) {         alert("QRM Construct App Error " + e.message);      }      return ProjectEditorWindow;   };   this.getProjectEditorTabSet = function () {      return isc.TabSet.create({         width: "100%",         height: "100%",         paneContainerProperties: {            backgroundColor: qrmCtrlColor         },         ID: "projectTabSet",         tabBarPosition: "top",         tabDeselected: function (tabNum, tabPane, ID, tab1) {            try {               if (projectTabSet.getTabPane(projectTabSet.getSelectedTab()).dirty) {                  isc.ask("Save Changes?", function (value) {                     if (value) {                        projectTabSet.getTabPane(projectTabSet.getSelectedTab()).saveFn();                     } else {                        projectTabSet.getTabPane(projectTabSet.getSelectedTab()).resetFn();                     }                  });               }            } catch (e) {               // Might happen if pane has not been given in ID yet            }         },         tabs: [{            title: "Project Definition",            pane: this.getPaneProjectBasic()         }, {            title: "Owner and Managers",            pane: this.getPaneOwnersAndManagers()         }, {            title: "Objectives",            pane: this.getPaneObjectives()         }, {            title: "Categories",            pane: this.getPaneCategories()         }, {            title: "Quantifiable Consequences",            pane: this.getPaneConsequences()         }, {            title: "Tolerance and Matrix",            pane: this.getPaneMatrix()         }]      });   };   this.attachTemplate = function () {      if (typeof (modalAttachTemplateWindow) == "undefined") {         isc.Window.create({            ID: "modalAttachTemplateWindow",            title: "AttachTemplate",            autoSize: true,            autoCenter: true,            isModal: true,            showModalMask: true,            showMinimizeButton: false,            autoDraw: true,            closeClick: function () {               ProjectTemplateForm.clearValue("projectID");               ProjectTemplateForm.clearValue("UploadItem0");               this.Super("closeClick", arguments);            },            items: [isc.DynamicForm.create({               ID: "ProjectTemplateForm",               encoding: "multipart",               width: 400,               numCols: 2,               target: "_qrmFormTarget",               action: "./installTemplate",               fields: [{                  _constructor: "HeaderItem",                  defaultValue: "Attach Template"               }, {                  title: "Template File",                  name: "UploadItem0",                  _constructor: "UploadItem",                  showTitle: false,                  colSpan: 2,                  width: 400               }, {                  name: "inludeTemplateRoot",                  title: "Include Template Root",                  type: "boolean",                  showTitle: false,                  align: "left",                  defaultValue: true,                  colSpan: 2               }, {                  name: "inludeRisks",                  title: "Include Risk (if present)",                  type: "boolean",                  showTitle: false,                  align: "left",                  defaultValue: true,                  colSpan: 2               }, {                  name: "inheritStakeholders",                  title: "Inherit stakeolders from root",                  type: "boolean",                  showTitle: false,                  align: "left",                  defaultValue: true,                  colSpan: 2               }, {                  name: "projectID",                  type: "hidden"               }, {                  name: "SubmitItem0",                  _constructor: "ButtonItem",                  title: "Install Template",                  align: "right",                  startRow: false,                  colSpan: 2,                  click: function () {                     if (this.eventParent.validate()) {                        isc.Window.create({                           ID: "waitingOnTemplateUploadWindow",                           title: "Quay Risk Manager",                           width: 600,                           height: 150,                           showMinimizeButton: false,                           autoCenter: true,                           isModal: true,                           showModalMask: true,                           headerIconProperties: {                              src: "icons/16/import.png"                           },                           autoDraw: true,                           items: [isc.Label.create({                              height: "100%",                              padding: 10,                              align: "center",                              valign: "center",                              wrap: false,                              contents: "<div><img alt='' src='./wait30trans.gif' style='float:left' /><h3 style='font-size:14;font-weight:bold'>Uploading and Installing Project Template</h3><br><h4 style='font-size:12;font-weight:bold'>Please Standby</h4></div>"                           })]                        });                        waitingOnTemplateUploadWindow.show();                        this.eventParent.submitForm();                        this.eventParent.clearValue("UploadItem0");                        modalAttachTemplateWindow.hide();                     }                  }               }]            })]         });      } else {         modalAttachTemplateWindow.show();      }      ProjectTemplateForm.getItem("projectID").setValue(QRMNavigator.getSelectedRecord().projectID);   };   this.getPaneProjectBasic = function () {      var form = isc.DynamicForm.create({         ID: "projectBasicForm",         numCols: 2,         autoDraw: false,         titleWidth: 160,         hiliteRequiredFields: true,         width: "100%",         fields: [{            name: "projectTitle",            type: "text",            title: "Project Title",            width: 500,            colSpan: 4,            changed: "projectEditorBasic.changed();",            required: true         }, {            name: "projectCode",            type: "text",            title: "Project Code",            width: 60,            colSpan: 4,            changed: "projectEditorBasic.changed();",            required: true         }, {            name: "projectDescription",            width: 500,            type: "textarea",            required: true,            colSpan: 4,            height: 90,            changed: "projectEditorBasic.changed();",            title: "Description"         }, {            name: "projectRiskManagerID",            width: "200",            title: "Project Risk Manager",            required: true,            type: "select",            allowEmptyValue: false,            changed: "projectEditorBasic.changed();",            startRow: true         }, {            name: "projectStartDate",            width: "300",            title: "Project Start Date",            type: "date",            changed: "projectEditorBasic.changed();",            startRow: true         }, {            name: "projectEndDate",            width: "300",            title: "Project End Date",            type: "date",            changed: "projectEditorBasic.changed();",            startRow: true         }, {            name: "minimumSecurityLevel",            title: "Minimum Security",            required: true,            type: "select",            valueMap: {               0: "Public",               1: "Restricted",               2: "Private"            },            allowEmptyValue: false,            changed: "projectEditorBasic.changed();",            startRow: true         }, {            name: "singlePhase",            title: "Use Single Phase Modelling",            type: "checkbox",            changed: "projectEditorBasic.changed();",            startRow: true         }, {            name: "projectID",            _constructor: "HiddenItem"         }]      });      isc.ListGrid.create({         width: "100%",         height: "100%",         ID: "reportGrid",         alternateRecordStyles: true,         fields: [{            name: "reportName",            type: "text",            title: "Report Name",            width: 200         }, {            name: "reportDescription",            title: "Description",            type: "text"         }, {            name: "reporttype",            title: "Type",            type: "text",            width: 100         }]      });      isc.DynamicForm.create({         ID: "projectTabsForm",         numCols: 2,         autoDraw: false,         titleWidth: 10,         hiliteRequiredFields: true,         width: "100%",         fields: [{            defaultValue: "Risk Editor Tabs to Enable",            type: "header"         }, {            name: "riskData",            type: "checkbox",            title: "Risk Data",            disabled: true,            defaultValue: true         }, {            name: "riskProbImpact",            type: "checkbox",            title: "Probability and Impact",            disabled: true,            defaultValue: true         }, {            name: "riskMitigation",            type: "checkbox",            changed: "projectEditorBasic.changed();",            title: "Mitigation Plan"         }, {            name: "riskResponse",            type: "checkbox",            changed: "projectEditorBasic.changed();",            title: "Response Plan"         }, {            name: "riskConsequences",            type: "checkbox",            changed: "projectEditorBasic.changed();",            title: "Quantifiable Consequences"         }, {            name: "riskControls",            type: "checkbox",            changed: "projectEditorBasic.changed();",            title: "Risk Controls"         }, {            name: "riskObjectives",            type: "checkbox",            changed: "projectEditorBasic.changed();",            title: "Objectives Impacted"         }, {            name: "riskAttachment",            type: "checkbox",            changed: "projectEditorBasic.changed();",            title: "Attachments"         }, {            name: "riskComments",            type: "checkbox",            changed: "projectEditorBasic.changed();",            title: "Comments"         }, {            name: "riskAudit",            type: "checkbox",            changed: "projectEditorBasic.changed();",            title: "Audit Status"         }]      });      return isc.VLayout.create({         members: [form, isc.QRMReportAttachmentForm.create(), isc.HLayout.create({            membersMargin: 15,            members: [reportGrid, projectTabsForm],            width: "100%"         })],         dirty: false,         ID: "projectEditorBasic",         membersMargin: 5,         backgroundColor: qrmCtrlColor,         changed: function () {            this.dirty = true;            qoProjectManager.projectEditorDirty();         },         saveFn: function () {            if (!projectBasicForm.validate()) return;            var values = projectBasicForm.getValues();            values.projectStartDate = simplifyDate(values.projectStartDate);            values.projectEndDate = simplifyDate(values.projectEndDate);            isc.RPCManager.showPrompt = false;            isc.RPCManager.sendRequest({               evalResult: false,               params: {                  "PROJECTID": project.projectID,                  "DATA": JSON.stringify(values),                  "DATA2": JSON.stringify(projectTabsForm.getValues())               },               callback: function (rpcResponse, dta, rpcRequest) {                  project = JSON.parse(dta, dateParser);                  projectEditorBasic.dirty = false;                  qoProjectManager.projectEditorClean();                  this.getUserMgrProjects(project);                  resetCurrentProject();               },               actionURL: "./updateProject"            });         },         resetFn: function () {            resetProject(project.projectID);            this.dirty = false;         },         autoDraw: false      });   };   this.newProject = function () {      if (typeof (editNewProjectModalWindow) == "undefined") {         isc.Window.create({            ID: "editNewProjectModalWindow",            title: "New Project",            autoSize: true,            showMinimizeButton: false,            autoCenter: true,            isModal: true,            showModalMask: true,            autoDraw: true,            items: [this.getNewProjectLayout()]         });      } else {         editNewProjectModalWindow.show();      }      var parentProjects = projects.sortByProperty("projectID", true);      parentProjects.remove(parentProjects.find("projectID", -1));      projectNewForm.getItem("parentID").setValueMap(parentProjects.getValueMap("projectID", "projectTitle"));      projectNewForm.getItem("parentID").setValue(QRMMgrNavigator.getSelectedRecord().projectID);   };   this.deleteProject = function () {      try {         var record = QRMNavigator.getSelectedRecord();         var answer = confirm("Are you sure you want to delete the risk context " + record.projectTitle + " (" + record.projectCode + ")" + ", all its sub contexts and the associated risks?");         if (answer) {            isc.RPCManager.showPrompt = true;            isc.RPCManager.sendRequest({               prompt: "Deleting risk context " + record.projectTitle + " (" + record.projectCode + ")",               evalResult: true,               params: {                  "DATA": record.projectID               },               callback: function (rpcResponse, dta, rpcRequest) {                  isc.say("Risk Context Deleted");                  qoProjectManager.getUserMgrProjects();               },               actionURL: "./deleteProject"            });         } else {            return;         }      } catch (e) {         alert(e.message);      }   };   this.getNewProjectLayout = function () {      var form1 = isc.DynamicForm.create({         ID: "projectNewForm",         width: 750,         numCols: 2,         autoDraw: false,         titleWidth: 180,         hiliteRequiredFields: true,         fields: [{            name: "projectTitle",            type: "text",            title: "Project Title",            width: 500,            required: true         }, {            name: "projectCode",            type: "text",            title: "Project Code",            width: 80,            required: true         }, {            name: "parentID",            width: 200,            title: "Parent Project",            required: true,            type: "select",            allowEmptyValue: false,            startRow: true         }, {            name: "projectDescription",            width: 500,            type: "textarea",            required: true,            height: 100,            title: "Description"         }, {            name: "projectStartDate",            width: "300",            title: "Start of Project",            type: "date",            startRow: true         }, {            name: "projectEndDate",            width: "300",            title: "End of Project",            type: "date",            startRow: true         }, {            name: "validateBtn",            title: "Create New Project",            type: "button",            align: "right",            colSpan: 2,            click: function () {               if (!projectNewForm.validate()) return;               var values = projectNewForm.getValues();               values.startProject = simplifyDate(values.startProject);               values.endProject = simplifyDate(values.endProject);               try {                  values.singlePhase = projects.find("projectID", values.parentID).singlePhase;               } catch (e) {                  alert(e.message);               }               isc.RPCManager.showPrompt = true;               isc.RPCManager.sendRequest({                  prompt: "Creating Risk Context '" + values.projectTitle + "'",                  evalResult: true,                  params: {                     "OPERATION": "newProject",                     "DATA": JSON.stringify(values)                  },                  callback: function (rpcResponse, dta, rpcRequest) {                     isc.say("Project Created");                     editNewProjectModalWindow.closeClick();                     qoProjectManager.getUserMgrProjects();                  },                  actionURL: "./newProject"               });            }         }]      });      return isc.VLayout.create({         width: "100%",         membersMargin: 5,         layoutMargin: 5,         members: [form1]      });   };   this.getPaneOwnersAndManagers = function () {      var stakeGrid = isc.ListGrid.create({         ID: "stakeGrid",         editOnFocus: true,         modalEditing: true,         alternateRecordStyles: true,         fields: [{            name: "name",            type: "text",            title: "Stake Holder",            width: 200,            canEdit: false         }, {            name: "email",            type: "text",            title: "Email Address",            width: 350,            canEdit: false         }, {            name: "owner",            title: "Risk Owner",            type: "boolean",            width: 100,            canEdit: true         }, {            name: "manager",            title: "Risk Manager",            type: "boolean",            width: 100,            canEdit: true         }, {            name: "user",            title: "Risk User",            type: "boolean",            width: 100,            canEdit: true         }],         editComplete: function (rowNum, colNum, newValues, oldValues, editCompletionEvent) {            if (newValues != oldValues) projectEditorStakeholders.changed();         }      });      isc.ToolStrip.create({         width: "100%",         align: "right",         ID: "projectEditorStakeholdersToolStrip",         backgroundColor: qrmCtrlColor,         border: "0px solid " + qrmCtrlColor,         layoutMargin: 5,         membersMargin: 5,         height: 24,         initWidget: function () {            this.Super("initWidget", arguments);            this.newBtn = isc.IButton.create({               title: "New User",               disabled: false,               click: function () {                  if (typeof (newPersonModalWindow) == "undefined") {                     var form = isc.DynamicForm.create({                        width: 600,                        titleWidth: 150,                        padding: 10,                        ID: "newPersonForm",                        fields: [{                           type: "header",                           defaultValue: "New User Details"                        }, {                           name: "name",                           type: "text",                           title: "Name",                           required: true,                           width: 400                        }, {                           name: "email",                           type: "text",                           title: "Email",                           required: true,                           width: 400                        }, {                           name: "passwordNew",                           type: "password",                           title: "New Password",                           required: true                        }, {                           name: "password2",                           title: "Password Again",                           type: "password",                           required: true,                           validators: [{                              type: "matchesField",                              otherField: "passwordNew",                              errorMessage: "Passwords do not match"                           }, {                              type: "lengthRange",                              min: 6,                              max: 10,                              errorMessage: "Passwords must be at least 6 characters long"                           }]                        }, {                           name: "validateBtn",                           title: "Submit",                           type: "button",                           align: "right",                           colSpan: 2,                           click: function () {                              if (newPersonForm.validate()) {                                 isc.RPCManager.sendRequest({                                    evalResult: true,                                    actionURL: "./newPersonRep",                                    params: {                                       "OPERATION": "newPersonRep",                                       "DATA": JSON.stringify(newPersonForm.getValues())                                    },                                    callback: function (                                    rpcResponse, msg, rpcRequest) {                                       if (msg == "-1") {                                          isc.confirm("User with entered email already exists. Add to repository?", function (                                          value) {                                             if (value) {                                                isc.RPCManager.sendRequest({                                                   evalResult: true,                                                   actionURL: "./newExistingPersonRep",                                                   params: {                                                      "DATA": JSON.stringify(newPersonForm.getValues())                                                   },                                                   callback: function (                                                   response1, data1, request1) {                                                      isc.say(data1);                                                      newPersonModalWindow.hide();                                                      resetProject(project.projectID);                                                      this.dirty = false;                                                   }                                                });                                             } else {                                                newPersonModalWindow.hide();                                                resetProject(project.projectID);                                                this.dirty = false;                                             }                                          });                                       } else {                                          isc.say(msg);                                          newPersonModalWindow.hide();                                          resetProject(project.projectID);                                          this.dirty = false;                                       }                                    }                                 });                              }                           }                        }]                     });                     isc.Window.create({                        ID: "newPersonModalWindow",                        title: "New Quay Risk Manager User",                        showMinimizeButton: false,                        autoCenter: true,                        isModal: true,                        showModalMask: true,                        autoDraw: true,                        autoSize: true,                        items: [form]                     });                  } else {                     newPersonModalWindow.show();                  }               }            });            this.existingBtn = isc.IButton.create({               title: "Add Existing",               disabled: false,               click: function () {                  if (typeof (newPersonModalWindow) == "undefined") {                     var form = isc.DynamicForm.create({                        width: 600,                        titleWidth: 150,                        padding: 10,                        ID: "newPersonForm2",                        fields: [{                           type: "header",                           defaultValue: "Existing User Details"                        }, {                           name: "email",                           type: "text",                           title: "Email",                           required: true,                           width: 400                        }, {                           name: "validateBtn",                           title: "Submit",                           type: "button",                           align: "right",                           colSpan: 2,                           click: function () {                              isc.RPCManager.sendRequest({                                 evalResult: true,                                 actionURL: "./newExistingPersonRep",                                 params: {                                    "DATA": JSON.stringify(newPersonForm2.getValues())                                 },                                 callback: function (rpcResponse, msg, rpcRequest) {                                    isc.say(msg);                                    newPersonModalWindow2.hide();                                    resetProject(project.projectID);                                    this.dirty = false;                                 }                              });                           }                        }]                     });                     isc.Window.create({                        ID: "newPersonModalWindow2",                        title: "Add Existing User to Repository",                        showMinimizeButton: false,                        autoCenter: true,                        isModal: true,                        showModalMask: true,                        autoDraw: true,                        autoSize: true,                        items: [form]                     });                  } else {                     newPersonModalWindow2.show();                  }               }            });            this.deleteBtn = isc.IButton.create({               title: "Delete User",               disabled: false,               click: function () {                  try {                     var record = stakeGrid.getSelectedRecord();                     isc.confirm("Are you sure you want to delete the user " + record.name + "?", function (answer) {                        if (answer) {                           isc.RPCManager.showPrompt = true;                           isc.RPCManager.sendRequest({                              prompt: "Deleting user " + record.name,                              evalResult: true,                              params: {                                 "OPERATION": "deleteUser",                                 "DATA": record.stakeholderID                              },                              callback: function (rpcResponse, dta, rpcRequest) {                                 isc.say(dta);                                 resetProject(project.projectID);                              },                              actionURL: "./deleteUser"                           });                        } else {                           return;                        }                     });                  } catch (e) {                     alert(e.message);                  }               }            });            this.addMembers([this.deleteBtn, this.newBtn, this.existingBtn]);         }      });      return isc.VLayout.create({         width: "100%",         ID: "projectEditorStakeholders",         backgroundColor: qrmCtrlColor,         membersMargin: 5,         layoutMargin: 5,         members: [stakeGrid, projectEditorStakeholdersToolStrip],         changed: function () {            this.dirty = true;            qoProjectManager.projectEditorDirty();         },         saveFn: function () {            isc.RPCManager.sendRequest({               evalResult: true,               actionURL: "./saveProjectStakeholders",               params: {                  "PROJECTID": project.projectID,                  "OWNERS": (JSON.stringify(stakeGrid.data.findAll("owner", true))),                  "MANAGERS": (JSON.stringify(stakeGrid.data.findAll("manager", true))),                  "USERS": (JSON.stringify(stakeGrid.data.findAll("user", true))),                  "NONCACHE": Math.random()               },               callback: function (rpcResponse, dta, rpcRequest) {                  resetProject(project.projectID);                  this.dirty = false;               }            });         },         resetFn: function () {            resetProject(project.projectID);            this.dirty = false;         }      });   };   this.getPaneObjectives = function () {      isc.DataSource.create({         ID: "objectiveTreeDS",         clientOnly: true,         fields: [{            type: "text",            title: "Objective",            name: "objective",            length: 128         }, {            type: "integer",            name: "objectiveID",            required: true,            primaryKey: true         }, {            type: "integer",            name: "parentID",            required: true,            foreignKey: "objectiveTreeDS.objectiveID",            rootValue: -1         }]      });      isc.TreeGrid.create({         ID: "idProjectObjectiveTree",         backgroundColor: qrmCtrlColor,         height: "100%",         width: "100%",         nodeIcon: "[SKIN]file.png",         folderIcon: "[SKIN]file.png",         alternateRecordStyles: true,         closedIconSuffix: "",         showOpenIcons: false,         showDropIcons: false,         showConnectors: true,         modalEditing: true,         canEdit: true,         recordClick: function () {            if (this.getSelectedRecord().generation >= 0) {               projectEditorObjectiveToolStrip.delBtn.enable();               projectEditorObjectiveToolStrip.editBtn.enable();               projectEditorObjectiveToolStrip.newBtn.enable();            } else {               projectEditorObjectiveToolStrip.delBtn.disable();               projectEditorObjectiveToolStrip.editBtn.disable();               projectEditorObjectiveToolStrip.newBtn.enable();            }         },         dataArrived: function () {            idProjectObjectiveTree.getData().openAll();            projectEditorObjectiveToolStrip.delBtn.disable();            projectEditorObjectiveToolStrip.editBtn.disable();            projectEditorObjectiveToolStrip.newBtn.disable();         },         editorEnter: function () {            switch (this.getSelectedRecord().generation) {            case -1:               this.endEditing();               break;            case 1:               isc.say("Caution. Objective was defined by a sub project");               break;            }         },         editorExit: function (editCompletionEvent, record, newValue, rowNum, colNum) {            if (record.generation >= 0) {               if (editCompletionEvent != "escape") {                  record.imageIndicator = 3;                  record.dirty = true;                  projectEditorObjective.changed();               }            }            return true;         },         editSelectedRecord: function () {            this.startEditing(this.getRecordIndex(this.getSelectedRecord()));         },         dataSource: objectiveTreeDS,         fields: [{            name: "objective",            parseEditorValue: function (value, record, rowNum, colNum, grid) {               try {                  if (record.generation < 0) {                     return record.decription;                  }                  return value;               } catch (e) {                  return value;               }            }         }, {            name: "imageIndicator",            title: "Status",            canEdit: false,            type: "image",            align: "center",            width: 70,            imageURLPrefix: "leg",            imageURLSuffix: ".png"         }]      });      isc.ToolStrip.create({         width: "100%",         align: "right",         border: "0px solid " + qrmCtrlColor,         ID: "projectEditorObjectiveToolStrip",         backgroundColor: qrmCtrlColor,         layoutMargin: 5,         membersMargin: 5,         height: 24,         initWidget: function () {            this.Super("initWidget", arguments);            this.newBtn = isc.IButton.create({               title: "Create New",               disabled: true,               click: function () {                  projectEditorObjective.changed();                  projObjectives.add({                     objectiveID: tempIndex--,                     parentID: idProjectObjectiveTree.getSelectedRecord().objectiveID,                     objective: "New Project Objectives",                     generation: 0,                     imageIndicator: 3                  });                  objectiveTreeDS.testData = projObjectives;                  idProjectObjectiveTree.fetchData();               }            });            this.delBtn = isc.IButton.create({               title: "Delete",               disabled: true,               click: function () {                  if (idProjectObjectiveTree.getSelectedRecord().generation >= 0) {                     if (idProjectObjectiveTree.getSelectedRecord().objectiveID > 0) {                        projectEditorObjective.deleteObjs.push(idProjectObjectiveTree.getSelectedRecord().objectiveID);                     }                     projectEditorObjective.changed();                     projObjectives.remove(projObjectives.find("objectiveID", idProjectObjectiveTree.getSelectedRecord().objectiveID));                     objectiveTreeDS.testData = projObjectives;                     idProjectObjectiveTree.fetchData();                  }               }            });            this.editBtn = isc.IButton.create({               title: "Edit",               disabled: true,               click: function () {                  if (idProjectObjectiveTree.getSelectedRecord().generation >= 0) {                     projectEditorObjective.changed();                     idProjectObjectiveTree.editSelectedRecord();                  }               }            });            this.addMembers([this.newBtn, this.delBtn, this.editBtn]);         }      });      return isc.VLayout.create({         width: "100%",         ID: "projectEditorObjective",         deleteObjs: new Array(),         backgroundColor: qrmCtrlColor,         membersMargin: 5,         layoutMargin: 5,         members: [idProjectObjectiveTree, isc.Legend.create(), projectEditorObjectiveToolStrip],         changed: function () {            this.dirty = true;            qoProjectManager.projectEditorDirty();         },         saveFn: function () {            isc.RPCManager.sendRequest({               evalResult: true,               params: {                  "PROJECTID": project.projectID,                  "DATA": (JSON.stringify(idProjectObjectiveTree.getData().dataSource.testData.findAll("generation", 0))),                  "DATADELETE": (JSON.stringify(projectEditorObjective.deleteObjs))               },               callback: function (rpcResponse, dta, rpcRequest) {                  resetProject(project.projectID);                  this.dirty = false;                  this.deleteObjs.clear();               },               actionURL: "./saveProjectObjectives"            });         },         resetFn: function () {            this.deleteObjs.clear();            resetProject(project.projectID);            this.dirty = false;         }      });   };   this.getPaneCategories = function () {      var primLayout = isc.VLayout.create({         width: "50%",         membersMargin: 5,         layoutMargin: 5      });      isc.ListGrid.create({         ID: "primCatGrid",         alternateRecordStyles: true,         modalEditing: true,         recordClick: function () {            secCatGrid.setData([]);            secCatGrid.setData(this.getSelectedRecord().sec);            if (this.getSelectedRecord().generation >= 0) {               projectEditorPrimCatToolStrip.delBtn.enable();               projectEditorPrimCatToolStrip.editBtn.enable();               projectEditorSecCatToolStrip.delBtn.disable();               projectEditorSecCatToolStrip.editBtn.disable();               projectEditorSecCatToolStrip.newBtn.enable();            } else {               projectEditorPrimCatToolStrip.delBtn.disable();               projectEditorPrimCatToolStrip.editBtn.disable();               projectEditorSecCatToolStrip.delBtn.disable();               projectEditorSecCatToolStrip.editBtn.disable();               projectEditorSecCatToolStrip.newBtn.enable();            }         },         fields: [{            name: "imageIndicator",            title: "Status",            canEdit: false,            type: "image",            align: "center",            width: 70,            imageURLPrefix: "leg",            imageURLSuffix: ".png"         }, {            name: "description",            type: "text",            title: "Primary Category",            canEdit: true,            editorEnter: function (record, value, rowNum, colNum) {               this.parseValueAlert = false;            },            parseEditorValue: function (value, record, rowNum, colNum, grid) {               try {                  if (record.generation < 0) {                     return record.decription;                  }                  return value;               } catch (e) {                  return value;               }            }         }],         editSelectedRecord: function () {            this.startEditing(this.getRecordIndex(this.getSelectedRecord()));         },         removeSelectedRecord: function () {            this.data.remove(this.getSelectedRecord());         },         editorEnter: function () {            switch (this.getSelectedRecord().generation) {            case -1:               this.endEditing();               break;            case 1:               isc.say("Caution. Category was defined by a sub project");               break;            }         },         editorExit: function (editCompletionEvent, record, newValue, rowNum, colNum) {            if (record.generation >= 0) {               if (editCompletionEvent != "escape") {                  record.dirty = true;                  record.imageIndicator = 3;                  projectEditorCategory.changed();               }            }            return true;         }      });      primLayout.addMember(primCatGrid);      isc.ToolStrip.create({         width: "100%",         align: "right",         border: "0px solid " + qrmCtrlColor,         ID: "projectEditorPrimCatToolStrip",         backgroundColor: qrmCtrlColor,         layoutMargin: 5,         membersMargin: 5,         height: 24,         initWidget: function () {            this.Super("initWidget", arguments);            this.newBtn = isc.IButton.create({               title: "Create New",               click: function () {                  var recs = primCatGrid.getData();                  recs.push({                     contextID: projectID,                     description: "New Primary Category",                     generation: 0,                     internalID: tempIndex--,                     parentID: 1,                     sec: new Array(),                     dirty: true,                     imageIndicator: 3                  });                  primCatGrid.setData([]);                  primCatGrid.setData(recs);                  projectEditorCategory.changed();               }            });            this.delBtn = isc.IButton.create({               title: "Delete",               disabled: true,               click: function () {                  if (primCatGrid.getSelectedRecord().generation >= 0) {                     if (primCatGrid.getSelectedRecord().internalID > 0) {                        projectEditorCategory.deleteCats.push(primCatGrid.getSelectedRecord().internalID);                     }                     primCatGrid.removeSelectedRecord();                     secCatGrid.setData([]);                     projectEditorPrimCatToolStrip.delBtn.disable();                     projectEditorPrimCatToolStrip.editBtn.disable();                     projectEditorCategory.changed();                  }               }            });            this.editBtn = isc.IButton.create({               title: "Edit",               disabled: true,               click: function () {                  projectEditorCategory.changed();                  primCatGrid.editSelectedRecord();               }            });            this.addMembers([this.newBtn, this.delBtn, this.editBtn]);         }      });      primLayout.addMembers([isc.Legend.create(), projectEditorPrimCatToolStrip]);      var secLayout = isc.VLayout.create({         width: "50%",         membersMargin: 5,         layoutMargin: 5      });      isc.ListGrid.create({         ID: "secCatGrid",         alternateRecordStyles: true,         modalEditing: true,         parseValueAlert: false,         recordClick: function () {            if (this.getSelectedRecord().generation >= 0) {               projectEditorSecCatToolStrip.delBtn.enable();               projectEditorSecCatToolStrip.editBtn.enable();            } else {               projectEditorSecCatToolStrip.delBtn.disable();               projectEditorSecCatToolStrip.editBtn.disable();            }         },         fields: [{            name: "imageIndicator",            title: "Status",            canEdit: false,            type: "image",            align: "center",            width: 70,            imageURLPrefix: "leg",            imageURLSuffix: ".png"         }, {            name: "description",            type: "text",            title: "Secondary Category",            canEdit: true,            editorEnter: function (record, value, rowNum, colNum) {               this.parseValueAlert = false;            },            parseEditorValue: function (value, record, rowNum, colNum, grid) {               try {                  if (record.generation < 0) {                     return record.decription;                  }                  return value;               } catch (e) {                  return value;               }            }         }],         editSelectedRecord: function () {            this.startEditing(this.getRecordIndex(this.getSelectedRecord()));         },         editorEnter: function () {            switch (this.getSelectedRecord().generation) {            case -1:               this.endEditing();               break;            case 1:               isc.say("Caution. Category was defined by a sub project");               break;            }         },         editorExit: function (editCompletionEvent, record, newValue, rowNum, colNum) {            if (record.generation >= 0) {               if (editCompletionEvent != "escape") {                  record.imageIndicator = 3;                  record.dirty = true;                  projectEditorCategory.changed();               }            }            return true;         }      });      secLayout.addMember(secCatGrid);      isc.ToolStrip.create({         width: "100%",         align: "right",         ID: "projectEditorSecCatToolStrip",         border: "0px solid " + qrmCtrlColor,         backgroundColor: qrmCtrlColor,         layoutMargin: 5,         membersMargin: 5,         height: 24,         initWidget: function () {            this.Super("initWidget", arguments);            this.newBtn = isc.IButton.create({               title: "Create New",               disabled: true,               click: function () {                  secCatGrid.endEditing();                  var newSec = {                     contextID: projectID,                     description: "New Secondary Category",                     generation: 0,                     internalID: tempIndex--,                     parentID: primCatGrid.getSelectedRecord().internalID,                     sec: null,                     imageIndicator: 3,                     dirty: true                  };                  var primRec = primCatGrid.getSelectedRecord();                  if (!primRec.sec) {                     primRec.sec = new Array();                  }                  primRec.sec.push(newSec);                  secCatGrid.setData([]);                  secCatGrid.setData(primRec.sec);                  projectEditorCategory.changed();                  projectEditorSecCatToolStrip.delBtn.disable();                  projectEditorSecCatToolStrip.editBtn.disable();               }            });            this.delBtn = isc.IButton.create({               title: "Delete",               disabled: true,               click: function () {                  var secRec = secCatGrid.getSelectedRecord();                  var primRec = primCatGrid.getSelectedRecord();                  if (secRec.internalID > 0) {                     projectEditorCategory.deleteCats.push(secRec.internalID);                     primRec.sec.remove(secRec);                     secCatGrid.setData(primRec.sec);                     projectEditorSecCatToolStrip.delBtn.disable();                     projectEditorSecCatToolStrip.editBtn.disable();                     projectEditorCategory.changed();                  }               }            });            this.editBtn = isc.IButton.create({               title: "Edit",               disabled: true,               click: function () {                  projectEditorCategory.changed();                  secCatGrid.editSelectedRecord();                  projectEditorSecCatToolStrip.delBtn.disable();                  projectEditorSecCatToolStrip.editBtn.disable();               }            });            this.addMembers([this.newBtn, this.delBtn, this.editBtn]);         }      });      secLayout.addMembers([isc.Legend.create(), projectEditorSecCatToolStrip]);      return isc.HLayout.create({         width: "100%",         ID: "projectEditorCategory",         deleteCats: new Array(),         backgroundColor: qrmCtrlColor,         membersMargin: 5,         members: [primLayout, secLayout],         layoutMargin: 0,         changed: function () {            this.dirty = true;            qoProjectManager.projectEditorDirty();         },         saveFn: function () {            isc.RPCManager.sendRequest({               evalResult: true,               params: {                  "PROJECTID": project.projectID,                  "DATA": (JSON.stringify(primCatGrid.getData())),                  "DATADELETE": (JSON.stringify(projectEditorCategory.deleteCats))               },               callback: function (rpcResponse, dta, rpcRequest) {                  resetProject(project.projectID);                  this.dirty = false;                  this.deleteCats.clear();               },               actionURL: "./saveProjectCategories"            });         },         resetFn: function () {            primCatGrid.setData([]);            secCatGrid.setData([]);            projectEditorPrimCatToolStrip.newBtn.enable();            projectEditorPrimCatToolStrip.delBtn.disable();            projectEditorPrimCatToolStrip.editBtn.disable();            projectEditorSecCatToolStrip.delBtn.disable();            projectEditorSecCatToolStrip.editBtn.disable();            projectEditorSecCatToolStrip.newBtn.disable();            resetProject(project.projectID);            this.dirty = false;         }      });   };   this.getPaneSecurity = function () {      return isc.VLayout.create({         width: "100%",         ID: "projectEditorSecurity",         backgroundColor: qrmCtrlColor,         membersMargin: 5,         layoutMargin: 5,         changed: function () {            this.dirty = true;            qoProjectManager.projectEditorDirty();         },         saveFn: function () {            //         },         resetFn: function () {            resetProject(project.projectID);            this.dirty = false;         }      });   };   this.getPaneMatrix = function () {      return isc.VLayout.create({         width: "100%",         ID: "projectEditorMatrix",         backgroundColor: qrmCtrlColor,         membersMargin: 5,         layoutMargin: 5,         autoDraw: false,         initWidget: function () {            this.Super("initWidget", arguments);            this.addMember(isc.MatrixEditor.create());         },         setDirty: function () {            this.changed();         },         changed: function () {            this.dirty = true;            qoProjectManager.projectEditorDirty();         },         saveFn: function () {            isc.RPCManager.sendRequest({               evalResult: true,               params: {                  "PROJECTID": project.projectID,                  "DATA": (JSON.stringify(matEditor.getData()))               },               callback: function (rpcResponse, dta, rpcRequest) {                  resetProject(project.projectID);                  this.dirty = false;               },               actionURL: "./saveProjectMatrix"            });         },         resetFn: function () {            matEditor.reset();            qoProjectManager.projectEditorClean();            resetProject(project.projectID);            this.dirty = false;         }      });   };   this.getPaneConsequences = function () {      isc.ListGrid.create({         height: "100%",         ID: "EditorQuantTypesGrid",         alternateRecordStyles: true,         modalEditing: true,         canEdit: true,         editorEnter: function () {            switch (this.getSelectedRecord().generation) {            case -1:               this.endEditing();               break;            case 1:               isc.say("Caution. Consequence was defined by a sub project");               break;            }         },         editSelectedRecord: function () {            this.startEditing(this.getRecordIndex(this.getSelectedRecord()));         },         editorExit: function (editCompletionEvent, record, newValue, rowNum, colNum) {            if (record.generation >= 0) {               if (editCompletionEvent != "escape") {                  record.dirty = true;                  record.imageIndicator = 2;                  projectEditorConsequence.changed();               }            }            return true;         },         parseEditorValue: function (value, record, rowNum, colNum, grid) {            try {               if (record.generation < 0) {                  if (colNum == 0) {                     return record.decription;                  } else if (colNum == 1) {                     return record.units;                  } else {                     return record.costCategroy;                  }               }               return value;            } catch (e) {               return value;            }         },         recordClick: function () {            if (this.getSelectedRecord().generation >= 0) {               projectEditorQuantToolStrip.delBtn.enable();               projectEditorQuantToolStrip.editBtn.enable();               projectEditorQuantToolStrip.newBtn.enable();            } else {               projectEditorQuantToolStrip.delBtn.disable();               projectEditorQuantToolStrip.editBtn.disable();               projectEditorQuantToolStrip.newBtn.enable();            }         },         fields: [{            name: "imageIndicator",            title: "Status",            canEdit: false,            type: "image",            align: "center",            width: 70,            imageURLPrefix: "leg",            imageURLSuffix: ".png"         }, {            name: "description",            title: "Quantifiable Consequence"         }, {            name: "units",            title: "Units",            align: "center",            width: 120         }, {            name: "costCategroy",            title: "Cost Category",            align: "center",            type: "boolean",            defaultValue: false,            width: 120         }]      });      isc.ToolStrip.create({         width: "100%",         align: "right",         ID: "projectEditorQuantToolStrip",         border: "0px solid " + qrmCtrlColor,         backgroundColor: qrmCtrlColor,         layoutMargin: 5,         membersMargin: 5,         height: 24,         initWidget: function () {            this.Super("initWidget", arguments);            this.newBtn = isc.IButton.create({               title: "Create New",               click: function () {                  projectEditorConsequence.changed();                  project.impactTypes.add({                     typeID: tempIndex--,                     description: "New Quantifiable Consequence",                     units: "Units",                     costCategroy: false,                     generation: 0,                     imageIndicator: 3,                     dirty: true                  });                  EditorQuantTypesGrid.setData(project.impactTypes);               }            });            this.delBtn = isc.IButton.create({               title: "Delete",               disabled: true,               click: function () {                  if (EditorQuantTypesGrid.getSelectedRecord().generation >= 0) {                     projectEditorConsequence.changed();                     projectEditorConsequence.deleteCons.push(EditorQuantTypesGrid.getSelectedRecord().typeID);                     project.impactTypes.remove(project.impactTypes.find("typeID", EditorQuantTypesGrid.getSelectedRecord().typeID));                     EditorQuantTypesGrid.setData(project.impactTypes);                  }               }            });            this.editBtn = isc.IButton.create({               title: "Edit",               disabled: true,               click: function () {                  if (EditorQuantTypesGrid.getSelectedRecord().generation >= 0) {                     projectEditorConsequence.changed();                     EditorQuantTypesGrid.editSelectedRecord();                  }               }            });            this.addMembers([this.newBtn, this.delBtn, this.editBtn]);         }      });      return isc.VLayout.create({         width: "100%",         ID: "projectEditorConsequence",         backgroundColor: qrmCtrlColor,         membersMargin: 5,         layoutMargin: 5,         deleteCons: new Array(),         members: [EditorQuantTypesGrid, isc.Legend.create(), projectEditorQuantToolStrip],         changed: function () {            this.dirty = true;            qoProjectManager.projectEditorDirty();         },         saveFn: function () {            isc.RPCManager.sendRequest({               evalResult: true,               params: {                  "PROJECTID": project.projectID,                  "DATA": (JSON.stringify(EditorQuantTypesGrid.getData())),                  "DATADELETE": (JSON.stringify(projectEditorConsequence.deleteCons))               },               callback: function (rpcResponse, dta, rpcRequest) {                  resetProject(project.projectID);                  this.dirty = false;                  this.deleteCons.clear();               },               actionURL: "./saveProjectCons"            });         },         resetFn: function () {            resetProject(project.projectID);            this.dirty = false;         }      });   };   this.defineMgrWidgets = function () {      isc.defineClass("MatrixElement", "Label");      isc.MatrixElement.addProperties({         autoDraw: false,         height: 20,         width: 20,         align: "center",         valign: "center",         backgroundColor: "gray",         wrap: false,         state: 0,         prob: 0,         impact: 0,         probimpact: 0,         active: false,         qrmelement: true,         cursor: "hand",         qrmEnable: function (val) {            this.active = val;            if (val) {               this.state = 1;               this.setBackgroundColor("00ff00");            }         },         reset: function () {            this.state = 0;            this.setBackgroundColor("gray");            this.qrmEnable(false);         },         click: function () {            if (!this.active) return;            switch (this.state) {            case 0:               this.setBackgroundColor("#00ffff");               this.state = 1;               break;            case 1:               this.setBackgroundColor("#00ff00");               this.state = 2;               break;            case 2:               this.setBackgroundColor("#ffff00");               this.state = 3;               break;            case 3:               this.setBackgroundColor("#ffa500");               this.state = 4;               break;            case 4:               this.setBackgroundColor("#ff0000");               this.state = 5;               break;            case 5:               this.setBackgroundColor("#00ffff");               this.state = 1;               break;            }            try {               projectEditorMatrix.setDirty();               parentElement.setDirty();            } catch (e) {               //            }         }      });      isc.defineClass("MatrixEditor", "TileLayout");      isc.MatrixEditor.addProperties({         ID: "matEditor",         height: "100%",         width: "100%",         autoDraw: true,         layoutPolicy: "fit",         tilesPerLine: 9,         expandMargins: false,         tileHeight: 25,         tileWidth: 25,         tileMargin: 2,         maxProb: 0,         maxImpact: 0,         lockMatrix: false,         dirty: false,         checkProbChange: function (set, prob) {            if ((set && prob != this.maxProb + 1) || (!set && prob != this.maxProb) || this.lockMatrix) {               return false;            }            this.maxProb = (set) ? prob : prob - 1;            this.setDirty();            return true;         },         setDirty: function () {            if (!this.dirty) {               this.dirty = true;               try {                  this.parentElement.setDirty();               } catch (e) {                  //               }            }         },         setLockMatrix: function (lock) {            this.lockMatrix = lock;            var _qrmItem = this.tiles.findAll("qrmelement", true);            for (var i = 0; i < 64; i++) {               if (!lock) {                  var item = _qrmItem[i];                  if (item.prob <= this.maxProb && item.impact <= this.maxImpact) {                     item.active = true;                  } else {                     item.active = false;                  }               } else {                  _qrmItem[i].active = false;               }               if (_qrmItem[i].state == 0) {                  if (lock) {                     _qrmItem[i].setBackgroundColor("#eee9e9");                  } else {                     _qrmItem[i].setBackgroundColor("gray");                  }               }            }         },         checkImpactChange: function (set, impact) {            if ((set && impact != this.maxImpact + 1) || (!set && impact != this.maxImpact) || this.lockMatrix) {               return false;            }            this.maxImpact = (set) ? impact : impact - 1;            this.setDirty();            return true;         },         enableProb: function (prob, value) {            var t = this.tiles.findAll("prob", prob);            var _qrmItem = this.tiles.findAll("qrmProbCheck", true).find("index", prob);            if (value) {               _qrmItem.getItems()[1].enable();               _qrmItem.getItems()[2].enable();               _qrmItem.getItems()[1].setValue("Probability Description");               _qrmItem.getItems()[2].setValue("Max Prob.");               for (var idx = 0; idx < 8; idx++) {                  if (t[idx].impact <= this.maxImpact) {                     t[idx].qrmEnable(true);                  }               }            } else {               _qrmItem.getItems()[1].disable();               _qrmItem.getItems()[2].disable();               _qrmItem.getItems()[1].setValue("");               _qrmItem.getItems()[2].setValue(0.0);               for (var idx = 0; idx < 8; idx++) {                  t[idx].reset();               }            }         },         enableImpact: function (impact, value) {            var t = this.tiles.findAll("impact", impact);            var _qrmItems = matrixImpactDesc.members.sortByProperty("index", true);            try {               if (value) {                  _qrmItems[impact].getItems()[0].setValue("Impact Description");                  _qrmItems[impact].show();                  for (var idx = 0; idx < 8; idx++) {                     if (t[idx].prob <= this.maxProb) {                        t[idx].qrmEnable(true);                     }                  }               } else {                  _qrmItems[impact].getItems()[0].setValue("Impact Description");                  _qrmItems[impact].hide();                  for (var idx = 0; idx < 8; idx++) {                     t[idx].reset();                  }               }            } catch (e) {               alert(_qrmItems + " " + e.message);            }         },         getTolString: function () {            try {               var list = this.tiles.findAll("qrmelement", true);               var list2 = list.findAll("active", true);               var list3 = list2.sortByProperty("probimpact", true);               var str = list3[0].state.stringify(1);               for (var i = 1; i < list3.length; i++) {                  str = str + list3[i].state.stringify(1);               }               return str;            } catch (e) {               return null;            }         },         setTolString: function (mat) {            this.reset();            this.maxProb = mat.maxProb;            this.maxImpact = mat.maxImpact;            for (var p = 1; p <= mat.maxProb; p++) {               var elements = this.tiles.findAll("qrmelement", true);               for (var i = 1; i <= mat.maxImpact; i++) {                  var x = elements.find("probimpact", p * 100 + i);                  x.active = true;                  x.state = parseInt(mat.tolString.substr((p - 1) * mat.maxImpact + i - 1, 1) - 1, 10);                  x.click();               }               var x = this.tiles.findAll("qrmProbCheck", true).find("index", p);               x.setValues(mat);               var xy = x.getItems();               xy[0].setValue(true);               xy[1].enable();               xy[2].enable();            }            var z = this.tiles.findAll("qrmImpactCheck", true);            for (var i = 1; i <= mat.maxImpact; i++) {               z.find("index", i).getItems()[0].setValue(true);            }            var _qrmItems = matrixImpactDesc.members.sortByProperty("index", true);            for (var i = 1; i <= mat.maxImpact; i++) {               _qrmItems[i].show();               _qrmItems[i].setValues(mat);            }         },         getData: function () {            var result = new Object();            result.tolString = this.getTolString();            result.maxProb = this.maxProb;            result.maxImpact = this.maxImpact;            result.matrixID = project.matrix.matrixID;            result.projectID = project.matrix.projectID;            var probs = this.tiles.findAll("qrmProbCheck", true).sortByProperty("index", true);            result.prob1 = probs[0].getItems()[1].getValue();            result.prob2 = probs[1].getItems()[1].getValue();            result.prob3 = probs[2].getItems()[1].getValue();            result.prob4 = probs[3].getItems()[1].getValue();            result.prob5 = probs[4].getItems()[1].getValue();            result.prob6 = probs[5].getItems()[1].getValue();            result.prob7 = probs[6].getItems()[1].getValue();            result.prob8 = probs[7].getItems()[1].getValue();            result.probVal1 = probs[0].getItems()[2].getValue();            result.probVal2 = probs[1].getItems()[2].getValue();            result.probVal3 = probs[2].getItems()[2].getValue();            result.probVal4 = probs[3].getItems()[2].getValue();            result.probVal5 = probs[4].getItems()[2].getValue();            result.probVal6 = probs[5].getItems()[2].getValue();            result.probVal7 = probs[6].getItems()[2].getValue();            result.probVal8 = probs[7].getItems()[2].getValue();            var impacts = matrixImpactDesc.members.sortByProperty("index", true);            result.impact1 = impacts[1].getItems()[0].getValue();            result.impact2 = impacts[2].getItems()[0].getValue();            result.impact3 = impacts[3].getItems()[0].getValue();            result.impact4 = impacts[4].getItems()[0].getValue();            result.impact5 = impacts[5].getItems()[0].getValue();            result.impact6 = impacts[6].getItems()[0].getValue();            result.impact7 = impacts[7].getItems()[0].getValue();            result.impact8 = impacts[8].getItems()[0].getValue();            result.tolAction5 = tolActionForm.getItem("action5").getValue();            result.tolAction4 = tolActionForm.getItem("action4").getValue();            result.tolAction3 = tolActionForm.getItem("action3").getValue();            result.tolAction2 = tolActionForm.getItem("action2").getValue();            result.tolAction1 = tolActionForm.getItem("action1").getValue();            return result;         },         setClean: function () {            this.dirty = false;            try {               parentElement.setDirty();            } catch (e) {               //            }         },         reset: function () {            this.setClean();            this.maxProb = 0;            this.maxImpact = 0;            var _qrmItem = this.tiles.findAll("qrmelement", true);            for (var i = 0; i < 64; i++) {               _qrmItem[i].reset();            }            _qrmItem = this.tiles.findAll("qrmProbCheck", true);            for (var i = 0; i < 8; i++) {               _qrmItem[i].reset();               _qrmItem[i].getItems()[0].setValue(false);               _qrmItem[i].getItems()[1].disable();               _qrmItem[i].getItems()[2].disable();               _qrmItem[i].getItems()[2].setValue(null);            }            _qrmItem = this.tiles.findAll("qrmImpactCheck", true);            for (var i = 0; i < 8; i++) {               _qrmItem[i].getItems()[0].setValue(false);            }            try {               _qrmItem = matrixImpactDesc.members;               for (var i = 1; i < _qrmItem.length; i++) {                  _qrmItem[i].hide();               }            } catch (e) {               alert(e.message);            }         },         initWidget: function () {            this.Super("initWidget", arguments);            this.addTile(isc.Label.create({               contents: "<b>Probability</b>"            }));            for (var i = 1; i <= 7; i++) {               this.addTile(isc.Label.create({                  contents: ""               }));            }            var probHead = isc.VLayout.create({               members: [isc.DynamicForm.create({                  fields: [{                     defaultValue: "Probability Description",                     type: "header"                  }],                  numCols: 1               })],               layoutLeftMargin: 130            });            this.addTile(probHead);            for (var p = 8; p > 0; p--) {               for (var i = 1; i <= 8; i++) {                  this.addTile(isc.MatrixElement.create({                     prob: p,                     impact: i,                     probimpact: 100 * p + i                  }));               }               var check = isc.DynamicForm.create({                  fields: [{                     showTitle: false,                     type: "CheckboxItem",                     defaultValue: false,                     index: p,                     type: "CheckboxItem",                     change: function (form, item, value, oldValue) {                        if (form.parentElement.checkProbChange(value, this.index)) {                           form.parentElement.enableProb(this.index, value);                           return true;                        }                        return false;                     }                  }, {                     showTitle: true,                     name: "prob" + p,                     title: "Probability&nbsp;" + p,                     width: 200,                     change: function (form, item, value, oldValue) {                        form.parentElement.setDirty();                     }                  }, {                     showTitle: false,                     name: "probVal" + p,                     type: "float",                     validateOnChange: true,                     validators: [{                        type: "floatRange",                        min: 0,                        max: 100                     }],                     width: 70,                     change: function (form, item, value, oldValue) {                        form.parentElement.setDirty();                     }                  }],                  qrmProbCheck: true,                  index: p,                  numCols: 4,                  titleWidth: 50,                  cellBorder: 0               });               this.addTile(check);            }            for (var i = 1; i <= 8; i++) {               var check = isc.DynamicForm.create({                  fields: [{                     defaultValue: false,                     index: i,                     type: "CheckboxItem",                     showTitle: false,                     change: function (form, item, value, oldValue) {                        if (form.parentElement.checkImpactChange(value, this.index)) {                           form.parentElement.enableImpact(this.index, value);                           return true;                        }                        return false;                     }                  }],                  titleWidth: 0,                  cellBorder: 0,                  numCols: 1,                  align: "center",                  titleWidth: 0,                  index: i,                  qrmImpactCheck: true               });               this.addTile(check);            }            for (var i = 1; i <= 7; i++) {               this.addTile(isc.Label.create({                  contents: ""               }));            }            this.addTile(isc.Label.create({               contents: "<b>Impact</b>"            }));            this.addTile(isc.Label.create({               contents: ""            }));            this.addTile(isc.Label.create({               contents: ""            }));            var bottomLay = isc.HLayout.create({               height: "100%",               membersMargin: 25            });            var formLay = isc.VLayout.create({               ID: "matrixImpactDesc",               width: "100%"            });            var impactHead = isc.DynamicForm.create({               fields: [{                  defaultValue: "Impact Description",                  type: "header",                  width: 300               }],               numCols: 1            });            formLay.addMember(impactHead);            for (var p = 1; p <= 8; p++) {               var check = isc.DynamicForm.create({                  fields: [{                     name: "impact" + p,                     title: "Impact&nbsp;" + p,                     showTitle: true,                     width: 200,                     change: function (form, item, value, oldValue) {                        form.parentElement.parentElement.parentElement.setDirty();                     }                  }],                  index: p,                  qrmImpactDesc: true,                  numCols: 2,                  titleWidth: 100,                  cellBorder: 0               });               formLay.addMember(check);            }            isc.DynamicForm.create({               ID: "tolActionForm",               fields: [{                  defaultValue: "Tolerance Management Actions",                  type: "header",                  colSpan: 2               }, {                  title: "<span style='color:white;font-weight:bold;background:red;padding:2px 5px 2px 5px;'>Tolerance&nbsp;4</span>",                  name: "action5",                  width: 300,                  change: function (form, item, value, oldValue) {                     form.parentElement.parentElement.setDirty();                  }               }, {                  title: "<span style='color:black;font-weight:bold;background:orange;padding:2px 5px 2px 5px;'>Tolerance&nbsp;3</span>",                  name: "action4",                  width: 300,                  change: function (form, item, value, oldValue) {                     form.parentElement.parentElement.setDirty();                  }               }, {                  title: "<span style='color:black;font-weight:bold;background:yellow;padding:2px 5px 2px 5px;'>Tolerance&nbsp;2</span>",                  name: "action3",                  width: 300,                  change: function (form, item, value, oldValue) {                     form.parentElement.parentElement.setDirty();                  }               }, {                  title: "<span style='color:black;font-weight:bold;background:#00ff00;padding:2px 5px 2px 5px;'>Tolerance&nbsp;1</span>",                  name: "action2",                  width: 300,                  change: function (form, item, value, oldValue) {                     form.parentElement.parentElement.setDirty();                  }               }, {                  title: "<span style='color:black;font-weight:bold;background:#00ffff;padding:2px 5px 2px 5px;'>Tolerance&nbsp;0</span>",                  name: "action1",                  width: 300,                  change: function (form, item, value, oldValue) {                     form.parentElement.parentElement.setDirty();                  }               }],               numCols: 2,               titleWidth: 100            });            bottomLay.addMembers([formLay, tolActionForm]);            this.addTile(bottomLay);            this.reset();         }      });      isc.defineClass("QRMReportAttachmentForm", "DynamicForm");      isc.QRMReportAttachmentForm.addProperties({         encoding: "multipart",         width: 600,         titleWidth: 160,         numCols: 3,         target: "_qrmFormTarget",         action: "./QRMReportUpload?saveReport=true",         fields: [{            _constructor: "HeaderItem",            defaultValue: "New Reports"         }, {            title: "Report File or Archive",            name: "UploadItem0",            _constructor: "UploadItem",            width: 300         }, {            name: "SubmitItem0",            _constructor: "ButtonItem",            title: "Install Reports",            align: "left",            startRow: false,            click: function () {               if (this.eventParent.validate()) {                  this.eventParent.submitForm();                  this.eventParent.clearValue("UploadItem0");               }            }         }, {            name: "hostID",            type: "hidden"         }, {            name: "jsToReturn",            type: "hidden",            defaultValue: "alert('Report Uploaded');parent.resetCurrentProject()"         }, {            name: "hostType",            type: "hidden"         }]      });      isc.defineClass("Legend", "VLayout");      isc.Legend.addProperties({         width: "100%",         height: 45,         backgroundColor: qrmCtrlColor,         membersMargin: 2,         initWidget: function () {            this.Super("initWidget", arguments);            this.LegendLabel = isc.Label.create({               align: "left",               valign: "center",               width: "100%",               height: 15,               margin: 7,               backgroundColor: qrmCtrlColor,               wrap: false,               contents: "<strong>Status Legend</strong>"            });            this.Label1 = isc.Label.create({               align: "left",               valign: "center",               width: "100%",               height: 15,               backgroundColor: qrmCtrlColor,               icon: "leg4.png",               wrap: false,               contents: "Defined in a Higher Level project. <i><strong>Not Editable from Current Project</strong></i>"            });            this.Label2 = isc.Label.create({               align: "left",               valign: "center",               width: "100%",               height: 15,               backgroundColor: qrmCtrlColor,               icon: "leg1.png",               wrap: false,               contents: "Defined in a Lower Level project. <i><strong>Editable</strong></i>"            });            this.Label3 = isc.Label.create({               align: "left",               valign: "center",               width: "100%",               height: 15,               backgroundColor: qrmCtrlColor,               wrap: false,               icon: "leg3.png",               contents: "Modified or New Record <i><strong>Editable</strong></i>"            });            this.Label4 = isc.Label.create({               align: "left",               valign: "center",               backgroundColor: qrmCtrlColor,               width: "100%",               height: 15,               wrap: false,               icon: "leg5.png",               contents: "Record defined in current selected project <i><strong>Editable</strong></i>"            });            this.addMembers([this.LegendLabel, this.Label1, this.Label2, this.Label4, this.Label3]);         }      });   };}function registerRiskInterest(riskID) {   try {      if (ajaxRequest.readyState == 3 || ajaxRequest.readyState == 2) {         ajaxRequest.abort();      }   } catch (e) {      //   }   ajaxRequest = null;   ajaxRequest = $.ajax({      url: pollURL + "?nocache=" + Math.random() + "&action=registerRisk&userID=" + userID + "&riskID=" + riskID,      type: "POST",      timeout: 60000,      dataType: "json",      success: function (m) {         ajaxRequest = null;      },      error: function (jqXHR, textStatus, errorThrown) {         if (textStatus == "timeout") {            isc.say("Connection to the serever lost. You will need to login to Quay Risk Manager. (MG001)", function () {               window.open("./login.jsp", "_self");            });         }      }   });}function startChatChannel() {   var pollRisk = 0;   try {      pollRisk = qoRiskController.riskID;   } catch (e) {      pollRisk = 0;   }   ajaxChatRequest = $.ajax({      url: pollURL + "?nocache=" + Math.random() + "&action=poll&userID=" + userID + "&riskID=" + pollRisk,      type: "POST",      timeout: 90000,      dataType: "json",      success: function (m) {         ajaxChatRequest = null;         if (m.sessionexpire) {            isc.say("Your session has expired. You will need to login to Quay Risk Manager.", function () {               window.open("./login.jsp", "_self");            });         }         if (m.message) {            alert(m.message);            startChatChannel();            return;         }         if (m.timeout) {            startChatChannel();            return;         }         if (m.logout) {            return;         }         if (m.riskupdate) {            isc.ask("The risk has been updated by another user. Retrieve updated data?", function (value) {               if (value) {                  getRiskAndDisplay(qoRiskController.riskID);                  qoRiskController.allowEditorChanges = true;                  startChatChannel();                  return;               } else {                  riskSaveBtn.setDisabled(true);                  riskSaveBtn.setTitle("<span style='color:#AAAAAA'>Save</span>");                  qoRiskController.allowEditorChanges = false;                  isc.say("Saving of updates disabled until risk has been refreshed with new data.", function () {                     startChatChannel();                     return;                  });               }            });         }         if (m.reportupdate) {            qoQRM.ConcurrentPane.setProject();            startChatChannel();            return;         }      },      error: function (jqXHR, textStatus, errorThrown) {         if (textStatus == "timeout") {            isc.say("Connection to the serever lost. You will need to login to Quay Risk Manager.", function () {               window.open("./login.jsp", "_self");            });         }      }   });}function constructApp() {   try {      isc.SectionStack.create({         ID: "QRMNavigatorPanel",         width: 250,         backgroundColor: "white",         showResizeBar: true,         visibilityMode: "multiple",         animateSections: true,         autoDraw: false,         sections: [{            title: "Project Navigator",            autoShow: true,            canCollapse: false,            items: [createNavigatorLayout()]         }, {            title: "QRM Guide",            autoShow: true,            canCollapse: true,            items: [isc.HTMLPane.create({               ID: "helpCanvas",               contentsURL: "./html/riskTable_helpText.html",               overflow: "auto",               border: "1px solid #808080",               padding: 10,               height: "40%"            })]         }]      });      qoCurrent.Pane = qoQRM.RiskTablePane;      qoCurrent.PaneNum = 0;      try {         TabSet.create({            ID: "RiskTableWindow",            paneContainerProperties: {               backgroundColor: qrmCtrlColor            },            backgroundColor: qrmCtrlColor,            tabBarPosition: "top",            tabs: [{               title: "Risk Explorer",               ID: "ExplorerPaneID",               pane: qoQRM.RiskTablePane            }, {               title: "Issues and Incidents",               ID: "IncidentsPaneID",               pane: qoQRM.IncidentPane            }, {               title: "Project Overview",               ID: "OverviewPaneID",               pane: qoQRM.OverviewPane            }, {               title: "Risk Calendar",               ID: "CalendarPaneID",               pane: qoQRM.CalPane            }, {               title: "Summary and Propogated Risks",               ID: "RelationPaneID",               pane: qoQRM.RelationshipPane,               tabDeselected: function (tabSet, tabNum, tabPane, ID, tab, newTab) {                  return qoQRM.RelationshipPane.navigateAway(false, newTab);               }            }, {               title: "Risk Rank",               ID: "RankPaneID",               pane: qoQRM.RankPane,               tabDeselected: function (tabSet, tabNum, tabPane, ID, tab, newTab) {                  return qoQRM.RankPane.navigateAway(false, newTab);               }            }, {               title: "Relative Matrix",               ID: "MatrixPaneID",               pane: qoQRM.RelMatrixPane,               tabDeselected: function (tabSet, tabNum, tabPane, ID, tab, newTab) {                  return qoQRM.RelMatrixPane.navigateAway(false, newTab);               }            }, {               title: "Analysis",               ID: "AnalysisPaneID",               pane: qoQRM.AnalysisPane            }, {               title: "Reviews",               ID: "ReviewPaneID",               pane: qoQRM.ReviewPane            }, {               title: "Reports",               ID: "ReportPaneID",               pane: qoQRM.ConcurrentPane            }],            tabSelected: function (tabNum, tabPane, ID, tab) {               qoCurrent.Pane = tabPane;               qoCurrent.PaneNum = tabNum;               helpCanvas.setContentsURL(tabPane.helpURL);               projectSaveBtn.hide();               projectResetBtn.hide();               try {                  tabPane.setProject();               } catch (e) {                  alert("QRM Utils line 112" + e.message);               }               if (ID == "MatrixPaneID") {                  try {                     if (qoQRM.singlePhase) {                        qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").hide();                     } else {                        qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").show();                     }                  } catch (e) {                     alert("Line 121 " + e.message);                  }               }               if (ID == "RankPaneID") {                  SubjectiveRank.helpHTML.setContents(SubjectiveRank.helpHTML.contentsOrig);               }               if (ID == "IncidentsPaneID") {                  clearIncidentFilterGroup(true);               }            }         });      } catch (e) {         alert(e.message);      }      isc.QRMSaveButton.create({         ID: "projectSaveBtn",         disabled: true,         click: function () {            if (qoQRM.riskProjectEditMode == "project") {               projectTabSet.getTabPane(projectTabSet.getSelectedTab()).saveFn();            }         }      });      isc.QRMRefreshButton.create({         ID: "projectResetBtn",         disabled: true,         click: function () {            if (qoQRM.riskProjectEditMode == "project") {               projectTabSet.getTabPane(projectTabSet.getSelectedTab()).resetFn();            }         }      });      isc.VLayout.create({         backgroundColor: qrmCtrlColor,         membersMargin: 4,         ID: "RightMainPane",         layoutMargin: 2,         layoutTopMargin: 2,         layoutBottomMargin: 2,         layoutRightMargin: 2,         layoutLeftMargin: 2,         height: "100%",         width: "100%",         members: [RiskTableWindow],         autoDraw: true      });      isc.HLayout.create({         membersMargin: 2,         ID: "mainBottomPanel",         layoutMargin: 2,         layoutTopMargin: 2,         height: "100%",         width: "100%",         members: [QRMNavigatorPanel, RightMainPane],         layoutBottomMargin: 2,         layoutRightMargin: 2,         layoutLeftMargin: 2,         resized: function () {            try {               if (idRiskEditorWindow.isVisible()) {                  idRiskEditorWindow.setHeight(Math.min(MainPane.getHeight() * 0.98, 770));                  idRiskEditorWindow.setWidth(Math.min(MainPane.getWidth() * 0.95, 1100));                  idRiskEditorWindow.centerInPage();               }            } catch (e) {               //            }            try {               if (viewEditReviewModalWindow.isVisible()) {                  viewEditReviewModalWindow.setHeight(MainPane.getHeight() * 0.95);                  viewEditReviewModalWindow.setWidth(Math.min(MainPane.getWidth() * 0.95, 950));                  viewEditReviewModalWindow.centerInPage();               }            } catch (e) {               //            }         }      });      isc.Menu.create({         ID: "usernameMenu",         showShadow: true,         shadowDepth: 10      });      usernameMenu.setData([{         title: "Change Password/Secret Question",         click: function () {            isc.Window.create({               title: "Change Password",               autoSize: true,               autoCenter: true,               isModal: true,               showModalMask: true,               showMinimizeButton: false,               autoDraw: true,               items: [isc.DynamicForm.create({                  width: 400,                  titleWidth: 150,                  padding: 10,                  fields: [{                     type: "header",                     defaultValue: "Change Password"                  }, {                     name: "passwordCurrent",                     type: "password",                     title: "Current Password",                     required: true                  }, {                     name: "passwordNew",                     type: "password",                     title: "New Password",                     required: true                  }, {                     name: "password2",                     title: "Password Again",                     type: "password",                     required: true,                     length: 20,                     validators: [{                        type: "matchesField",                        otherField: "passwordNew",                        errorMessage: "Passwords do not match"                     }, {                        type: "lengthRange",                        min: 6,                        max: 10,                        errorMessage: "Passwords must be at least 6 characters long"                     }]                  }, {                     type: "header",                     defaultValue: "Secret Question/Answer for Forgotten Password"                  }, {                     name: "secretQuestion",                     type: "text",                     title: "Secret Question",                     validators: [{                        type: "lengthRange",                        min: 4,                        max: 20                     }]                  }, {                     name: "secretAnswer",                     type: "text",                     title: "Secret Answer",                     validators: [{                        type: "lengthRange",                        min: 4,                        max: 20                     }]                  }, {                     name: "validateBtn",                     title: "Submit",                     type: "button",                     align: "right",                     colSpan: 2,                     click: function (form, item) {                        if (form.validate()) {                           isc.RPCManager.sendRequest({                              actionURL: "./qrm",                              prompt: "Changing Password",                              evalResult: true,                              params: {                                 "OPERATION": "changePassword",                                 "DATA": JSON.stringify(form.getValues())                              },                              callback: function (rpcResponse, data, rpcRequest) {                                 if (data) {                                    isc.say("Password Changed Successfully");                                 } else {                                    isc.say("Password Could Not Be Changed");                                 }                                 form.parentElement.parentElement.closeClick();                              }                           });                        }                     }                  }]               })]            });         }      }, {         isSeparator:true      }, {         title:"Manage Risks",         enableIf: "qoQRM.riskProjectEditMode == 'project' || qoQRM.riskProjectEditMode == 'rep' ",         click:function(){            toggleMode(0);         }         }, {         title:"Manage Projects",         enableIf: "qoQRM.riskProjectEditMode == 'risk' || qoQRM.riskProjectEditMode == 'rep' ",         click:function(){            toggleMode(1);         }         }, {         title:"Manage Repository",         enableIf: "(qoQRM.riskProjectEditMode == 'risk' || qoQRM.riskProjectEditMode == 'project') && userID == 1 ",         click:function(){            toggleMode(2);         }         }, {         isSeparator:true      }, {         title: "Log Out",         click: function () {            logout();         }      }]);      isc.ToolStripMenuButton.create({         ID: "qrmHeaderUserName",         title: userName,         autoFit: true,         showRollOver: false,         menu: usernameMenu      });      isc.ToolStripButton.create({         ID: "toolStripHelpBtn",         title: "Guide",         icon: "[SKIN]/actions/help.png",         click: function () {            qoQRM.showHelpWindow();         }      });      var topPane = isc.ToolStrip.create({         defaultLayoutAlign: "center",         layoutLeftMargin: 10,         layoutRightMargin: 10,         layoutBottonMargin: 2,         layoutTopMargin: 2,         membersMargin: 4,         height: 25,         width: "100%",         members: [isc.Label.create({            contents: "<span class='qrmMajorTitle'>Quay Risk Manager<span>",            height: 25,            width: 250         }), isc.Label.create({            height: 20,            ID: "projectLabel",            padding: 5,            width: "100%",            align: "left",            valign: "top",            wrap: false,            showEdges: false,            dynamicContents: true,            contents: "<span class='qrmMajorTitle'>${qoQRM.projectTitleStr}</span>"         }), projectSaveBtn, projectResetBtn, toolStripHelpBtn, qrmHeaderUserName ]      });      isc.VLayout.create({         backgroundColor: qrmCtrlColor,         membersMargin: 2,         ID: "MainPane",         layoutMargin: 2,         layoutTopMargin: 2,         layoutBottomMargin: 2,         layoutRightMargin: 2,         layoutLeftMargin: 2,         height: "100%",         width: "100%",         members: [topPane, mainBottomPanel],         autoDraw: true      });   } catch (e) {      alert(e.message);   }}function logout() {   isc.RPCManager.sendRequest({      actionURL: "./QRMServer",      prompt: "Logging Out",      params: {         "OPERATION": "logout"      }   });}function toggleMode(mode) {      // Pre Switching   switch(qoQRM.riskProjectEditMode){      case "risk":         if (!qoCurrent.Pane.navigateAway(true)) {            return;         }         break;      case "project":         if (qoProjectManager.dirtyEditor) {            isc.ask("Save Changes?", function (value) {               if (value) {                  projectTabSet.getTabPane(projectTabSet.getSelectedTab()).saveFn();               } else {                  projectTabSet.getTabPane(projectTabSet.getSelectedTab()).resetFn();               }            });         }         break;      case "rep":         break;   }     switch (mode){      case 0:          qoQRM.riskProjectEditMode = "risk";         projectSaveBtn.hide();         projectResetBtn.hide();         mainBottomPanel.show();         try {            RepMgrTabSet.hide();         } catch (e){            //         }                  RightMainPane.show();         DescendantsForm.show();         try {            ProjectEditorWindow.hide();         } catch (e){            //         }         qoCurrent.PaneNum = qoQRM.defaultViewChoice;         qoQRM.navigatorInit = false;         clearFiltersBtn.disable();         clearFilterGroup1();         clearFilterGroup2();         // 'true' setting causes auto selection of the first item in the tree.         getUserProjects(true);         break;               case 1:         isc.RPCManager.sendRequest({            evalResult: true,            showPrompt: true,            bypassCache: true,            prompt: "Retrieving Managed Projects",            callback: function (rpcResponse, list, rpcRequest) {               try {                  projects = list[0];                   if (projects.length <= 0) {                     isc.say(("You do not have Project Management Rights to any of the projects"), function () {                        return;                     });                  } else {                     qoQRM.riskProjectEditMode = "project";                     if (!qoQRM.mgrAdded) {                        mainBottomPanel.addMember(qoProjectManager.constructMgrApp());                        qoQRM.mgrAdded = true;                     }                      navigatorContextMenu.setData([{                           title: "New Sub Project",                           icon: "icons/16/document_plain_new.png",                           click: function () {                              qoProjectManager.newProject();                           }                        }, {                           title: "Delete Project",                           icon: "icons/16/folder_out.png",                           click: function () {                              qoProjectManager.deleteProject();                           }                        }, {                           title: "Export Project As Template",                           icon: "icons/16/export1.png",                           enableIf: "typeof(project) != 'string'",                           click: function () {                              isc.ask("Export project risks as well as the project?", function (value) {                                 if (value) {                                    open("./exportTemplate?RISKS=true&PROJECTID=" + projectID, "_self");                                 } else {                                    open("./exportTemplate?RISKS=false&PROJECTID=" + projectID, "_self");                                 }                              });                           }                        }, {                           title: "Attach Template",                           click: function () {                              qoProjectManager.attachTemplate();                           }                        }]);                        projectSaveBtn.show();                        projectResetBtn.show();                                                mainBottomPanel.show();                        try {                           RepMgrTabSet.hide();                        } catch (e){                           //                        }                                                RightMainPane.hide();                        DescendantsForm.hide();                        ProjectEditorWindow.show();                        DescendantsForm.hide();                        ProjectEditorWindow.show();                        qoProjectManager.getUserMgrProjects(null, true);                  }               } catch (e) {                  alert(e.message);               }            },            actionURL: "./getUserMgmtProjects"         });                   break;      case 2:         qoQRM.riskProjectEditMode = "rep";         if (!qoQRM.repMgrAdded) {            MainPane.addMember(constructRepMgrApp());            qoQRM.repMgrAdded = true;         }             projectSaveBtn.hide();            projectResetBtn.hide();            mainBottomPanel.hide();                        try{                RepMgrTabSet.show();               repMgrInit();            } catch (e){               alert (e.message);            }                        qoQRM.projectTitleStr = "Repository Manager";            projectLabel.markForRedraw();                  break;   }}function setFileMenuData(repositoryReports, registerReports, riskReports) {   try {      explorerActionMenu.setData([{         title: "New Risk",         enableIf: "(typeof(project.projectID) != 'undefined' && qoCurrent.PaneNum==0)?true:false",         icon: "icons/16/document_plain_new.png",         click: function () {            newRisk(-1);         }      }, {         title: "Delete Risk(s)",         enableIf: "(RiskTable.getSelection().length > 0 && qoCurrent.PaneNum==0 )?true:false",         icon: "icons/16/close.png",         click: function () {            deleteRisks();         }      }, {         isSeparator: true      }, {         title: "Remove Promotion",         enableIf: "(RiskTable.getSelection().length > 0 && qoCurrent.PaneNum==0 )?true:false",         icon: "icons/16/uparrow.png",         click: function () {            unpromoteRisk();         }      }, {         isSeparator: true      }, {         title: "Print Registry Preview",         icon: "icons/16/printer3.png",         enableIf: "(qoCurrent.PaneNum==0)?true:false",         click: function () {            isc.Canvas.showPrintPreview(RiskTable);         }      }, {         isSeparator: true      }, {         title: "Import Risks from File",         icon: "icons/16/import.png",         enableIf: "(typeof(project.projectID) != 'undefined' && qoCurrent.PaneNum==0)?true:false",         click: function () {            if (!qoReportEngine.checkTableSelection()) return;            uploadImportedRisk();         }      }, {         title: "Update Project Contingency",         enableIf: "(typeof(project.projectID) != 'undefined')",         click: function () {            isc.Window.create({               ID: "percentileModalWindow",               title: "Contingency Percentile",               autoSize: true,               autoCenter: true,               isModal: true,               showModalMask: true,               autoDraw: true,               items: [isc.DynamicForm.create({                  autoDraw: false,                  height: 48,                  ID: "percentileForm",                  padding: 4,                  fields: [{                     name: "percentile",                     title: "Percentile",                     type: "spinner",                     min: 0,                     max: 100,                     step: 5,                     defaultValue: 80                  }, {                     type: "button",                     title: "Update Contingency",                     colSpan: 2,                     align: "right",                     click: function () {                        percentileModalWindow.hide();                        isc.RPCManager.sendRequest({                           prompt: "Updating Project Contingency Calculations",                           evalResult: false,                           params: {                              "PROJECTID": project.projectID,                              "DESCENDANTS": checkDescendants.getValue(),                              "PERCENTILE": percentileForm.getItem("percentile").getValue()                           },                           callback: function (rpcResponse, data, rpcRequest) {                              updateSelectedProject();                           },                           actionURL: "./updateProjectContingency"                        });                     }                  }]               })]            });         }      }, {         isSeparator: true      },      registerReports, repositoryReports,      {         isSeparator: true      }, {         title: "Monte Carlo Analysis",         icon: "icons/16/dice.png",         enableIf: "(RiskTable.getSelection().length > 0 && qoCurrent.PaneNum==0 )?true:false",         click: function () {            if (!qoQRM.checkTableSelection()) return;            initMonteCarlo();            var sDate = new Date();            var eDate = new Date();            sDate.setFullYear(project.projectStartDate.substr(0, 4), project.projectStartDate.substr(5, 2), project.projectStartDate.substr(8, 2));            eDate.setFullYear(project.projectEndDate.substr(0, 4), project.projectEndDate.substr(5, 2), project.projectEndDate.substr(8, 2));            monteCarloConfigForm.setValues({               start: sDate,               end: eDate            });         }      }, {         title: "Schedule Review",         icon: "icons/16/person.png",         enableIf: "(RiskTable.getSelection().length > 0 && qoCurrent.PaneNum==0 )?true:false",         click: function () {            if (!qoQRM.checkTableSelection()) return;            scheduleReview();         }      }, {         title: "Associate with an Incident",         icon: "icons/16/icon_add_files.png",         enableIf: "(RiskTable.getSelection().length > 0 && qoCurrent.PaneNum==0 )?true:false",         click: function () {            if (!qoQRM.checkTableSelection()) return;            addRisksToIncident();         }      }, {         title: "Export As",         icon: "icons/16/export1.png",         enableIf: "(RiskTable.getSelection().length > 0 && qoCurrent.PaneNum==0 )?true:false",         submenu: [{            title: "MS Excel",            enableIf: "(RiskTable.getSelection().length > 0 && qoCurrent.PaneNum==0 )?true:false",            icon: "icons/16/disk_blue.png",            click: function () {               if (!qoQRM.checkTableSelection()) return;               var form = getExportSubmitForm();               form.setValues({                  OPERATION: "EXCEL",                  DATA: JSON.stringify(RiskTable.getSelection().getProperty("riskID"))               });               form.submitForm();            }         }, {            title: "XML",            enableIf: "(RiskTable.getSelection().length > 0 && qoCurrent.PaneNum==0 )?true:false",            icon: "icons/16/disk_blue.png",            click: function () {               if (!qoQRM.checkTableSelection()) return;               var form = getExportSubmitForm();               form.setValues({                  OPERATION: "XML",                  DATA: JSON.stringify(RiskTable.getSelection().getProperty("riskID"))               });               form.submitForm();            }         }, {            title: "MS Project (MPX)",            enableIf: "(RiskTable.getSelection().length > 0 && qoCurrent.PaneNum==0 )?true:false",            icon: "icons/16/disk_blue.png",            click: function () {               if (!qoQRM.checkTableSelection()) return;               var form = getExportSubmitForm();               form.setValues({                  OPERATION: "PROJECTMPX",                  DATA: JSON.stringify(RiskTable.getSelection().getProperty("riskID"))               });               form.submitForm();            }         }, {            title: "MS Project (XML)",            enableIf: "(RiskTable.getSelection().length > 0 && qoCurrent.PaneNum==0 )?true:false",            icon: "icons/16/disk_blue.png",            click: function () {               if (!qoQRM.checkTableSelection()) return;               var form = getExportSubmitForm();               form.setValues({                  OPERATION: "PROJECTXML",                  DATA: JSON.stringify(RiskTable.getSelection().getProperty("riskID"))               });               form.submitForm();            }         }]      },      riskReports]);   } catch (e) {      alert(e.message);   }}function getUserProjects(autoSelect) {   qrmHeaderUserName.setTitle(userName);   qrmProjectMap.clear();   try {      projects = "";      project = "";      isc.RPCManager.sendRequest({         showPrompt: true,         prompt: "Retrieving User Projects",         evalResult: true,         actionURL: "./getUserProjects",         bypassCache: true,         callback: function (rpcResponse, list, rpcRequest) {            try {               qoAll.clear();               projects = list[0];               projects.setProperty("isFolder", "true");               for (var i = 0; i < list[1].length; i++) {                  qoAll.Users[list[1][i].stakeholderID] = list[1][i].name;               }               for (var i2 = 0; i2 < list[2].length; i2++) {                  qoAll.Matrices[list[2][i2].matrixID] = list[2][i2];               }               for (var i3 = 0; i3 < list[3].length; i3++) {                  qoAll.Categories[list[3][i3].internalID] = list[3][i3];               }               qoValueMap.project = projects.getValueMap("projectID", "projectTitle");               qoAll.Objectives = list[4];               qoAll.Objectives.remove(qoAll.Objectives.find("objectiveID", 1));               qoAll.Objectives.add({                  objectiveID: 1,                  parentID: -1,                  objective: "Objectives Impacted"               });               try {                  QRMNavigator.setData(isc.Tree.create({                     ID: "projectTreeData",                     modelType: "parent",                     showRoot: false,                     idField: "projectID",                     parentIdField: "parentID",                     data: projects                  }));                  // Item 5 in the list is a menu structure of the                  // reports menu. The dynamic javascript is                  // constructed on the host                  // Item 5 is a compound array containing all the                  // different report types that are available.                  // Menu Items are defined as object literals under                  // SmartClient and so can't be referred directly                  // by an object ID                  // Add the project reports and the repository                  // reports to create the ValueMap for the reports                  // type filed of the report scheduler                  var vMapArr = list[5][1].submenu;                  vMapArr.addList(list[5][5].submenu);                  qoValueMap.projectReport = vMapArr.getValueMap("internalID", "title");                  try {                     setFileMenuData(list[5][5], list[5][0], list[5][2]);                  } catch (e) {                     alert("QRM Utils Line 565" + e);                  }                  try {                     var temp = list[6];                     temp.remove(temp.find("typeID", -1));                     for (var i6 = 0; i6 < temp.length; i6++) {                        qoValueMap.quantTypes[temp[i6].typeID] = temp[i6].description + " (" + temp[i6].units + ")";                     }                  } catch (e) {                     alert("QRM Utils Line 734" + e.message);                  }                  qoQRM.loggedOnUser = list[7];                  userID = qoQRM.loggedOnUser.stakeholderID;                  QRMNavigator.getData().openAll();                  if (autoSelect) {                     QRMNavigator.selectRecord(0);                     QRMNavigator.recordClick();                  }               } catch (e) {                  alert("Line 757 " + e.message);               }               var logonMessage = list[8];               try {                  if (logonMessage.length > 0) {                     var hlay = isc.HLayout.create({                        height: 30,                        width: "100%",                        align: "right",                        layoutMargin: 5,                        members: [isc.IButton.create({                           title: "Close",                           autoFit: true,                           align: "right",                           click: function () {                              logonMessageModalWindow.closeClick();                           }                        })]                     });                     isc.Window.create({                        ID: "logonMessageModalWindow",                        title: "Quay Risk Manager",                        width: 600,                        height: 400,                        showMinimizeButton: false,                        showCloseButton: true,                        autoCenter: true,                        isModal: true,                        showModalMask: true,                        autoDraw: true,                        items: [isc.HTMLPane.create({                           width: "100%",                           height: "100%",                           showEdges: false,                           contents: logonMessage                        }), hlay]                     });                  }               } catch (e) {                  //               }               // Delay the start of polling to avoid problem with               // Chrome and Safari               setTimeout(function () {                  startChatChannel();               }, 5000);            } catch (e) {               alert(e.message);            }         }      });   } catch (e) {      alert("QRM Utils Line 807" + e.message);   }}function updateSelectedProject(ignoreRiskTableRefresh) {   qoQRM.projectTitleStr = project.projectTitle;   if (checkDescendants.getValue()) {      qoQRM.projectTitleStr = qoQRM.projectTitleStr + " (including sub projects)";   }   projectLabel.markForRedraw();   qoStakeHolders.RiskManagers.clear();   qoStakeHolders.RiskOwners.clear();   primCats.clear();   secCats.clear();   projectID = project.projectID;   qoStakeHolders.RiskOwnersIDs = project.riskownersIDs;   qoStakeHolders.RiskManagersIDs = project.riskmanagerIDs;   projCats = project.riskCategorys;   for (var i = 0; i < projCats.length; i++) {      primCats.push({         primCatID: projCats[i].internalID,         name: qoAll.Categories[projCats[i].internalID].description      });      try {         var secArr = new Array();         for (var j = 0; j < projCats[i].sec.length; j++) {            secArr.push({               secCatID: projCats[i].sec[j].internalID,               name: qoAll.Categories[projCats[i].sec[j].internalID].description            });         }         secCats[projCats[i].internalID] = secArr;      } catch (e) {         continue;      }   }   for (var i2 = 0; i2 < qoStakeHolders.RiskOwnersIDs.length; i2++) {      qoStakeHolders.RiskOwners.push({         stakeholderID: qoStakeHolders.RiskOwnersIDs[i2],         name: qoAll.Users[qoStakeHolders.RiskOwnersIDs[i2]]      });   }   for (var i3 = 0; i3 < qoStakeHolders.RiskManagersIDs.length; i3++) {      qoStakeHolders.RiskManagers.push({         stakeholderID: qoStakeHolders.RiskManagersIDs[i3],         name: qoAll.Users[qoStakeHolders.RiskManagersIDs[i3]]      });   }   qoValueMap.manager = qoStakeHolders.RiskManagers.getValueMap("stakeholderID", "name");   qoValueMap.owner = qoStakeHolders.RiskOwners.getValueMap("stakeholderID", "name");   qoValueMap.categories = primCats.getValueMap("primCatID", "name");   qoCurrent.Matrix = project.matrix;   try {      if (!ignoreRiskTableRefresh) {         setActiveScreen();      }   } catch (e) {      setActiveScreen();   }}function createNavigatorLayout() {   isc.TreeGrid.create({      backgroundColor: qrmCtrlColor,      showConnectors: true,      height: "100%",      ID: "QRMNavigator",      autoDraw: false,      autoFetchData: false,      loadDataOnDemand: false,      canAcceptDroppedRecords: true,      canSort: false,      folderIcon: "[SKIN]folder.png",      nodeIcon: "[SKIN]folder.png",      nameProperty: "projectTitle",      contextMenu: isc.Menu.create({         ID: "navigatorContextMenu"      }),      leafContextClick: function (viewer, node, recordNum) {         if (qoQRM.riskProjectEditMode == "project") {            if (!project || (project.projectID != this.getSelectedRecord().projectID)) {               this.recordClick();            }         }         navigatorContextMenu.showContextMenu();         return false;      },      folderContextClick: function (viewer, node, recordNum) {         return this.leafContextClick(viewer, node, recordNum);      },      fields: [{         title: "Risk Projects",         name: "projectTitle",         formatCellValue: function (value, record, rowNum, colNum) {            if (record.projectID > 0) {               return value + " (" + record.projectCode + ")";            } else {               return value;            }         }      }],      drop: function () {         try {            var dragData = EventHandler.getDragTarget().cloneDragData();            var dropFolder = this.getRecord(this.getEventRow());            var projectTitle = dropFolder.projectTitle;            if (dragData.getProperty("incidentID") != null && dragData.getProperty("incidentID") != "" && dragData.length <= 1) {               isc.Dialog.create({                  isModal: true,                  autoDraw: true,                  ID: "moveOrPromoteDialog",                  message: "Do you sure you wish to MOVE or PROMOTE the selected incident to project '" + projectTitle + "'?",                  icon: "[SKIN]ask.png",                  buttons: [isc.Button.create({                     title: "Move"                  }), isc.Button.create({                     title: "Promote"                  }), isc.Button.create({                     title: "Cancel"                  })],                  buttonClick: function (button, idx) {                     this.hide();                     if (idx == 1 || idx == 0) {                        isc.RPCManager.showPrompt = true;                        isc.RPCManager.sendRequest({                           prompt: (idx == 0) ? "Reassigning Incident to '" + projectTitle + "'" : "Promoting Incident to '" + projectTitle + "'",                           evalResult: false,                           params: {                              "NEWPROJECTID": dropFolder.projectID,                              "MOVEORPROMOTE": idx,                              "XFERINCIDENTS": JSON.stringify(dragData.getProperty("incidentID"))                           },                           callback: function (rpcResponse, data, rpcRequest) {                              isc.say(data);                              Issue.setProject();                           },                           actionURL: "./reassignIncidents"                        });                     }                  }               });            } else {               isc.Dialog.create({                  isModal: true,                  autoDraw: true,                  ID: "moveOrPromoteDialog",                  message: "Do you sure you wish to MOVE or PROMOTE the selected risks to project '" + projectTitle + "'?",                  icon: "[SKIN]ask.png",                  buttons: [isc.Button.create({                     title: "Move"                  }), isc.Button.create({                     title: "Promote"                  }), isc.Button.create({                     title: "Cancel"                  })],                  buttonClick: function (button, idx) {                     this.hide();                     if (idx == 1 || idx == 0) {                        isc.RPCManager.showPrompt = true;                        isc.RPCManager.sendRequest({                           prompt: (idx == 0) ? "Reassigning Risks to '" + projectTitle + "'" : "Promoting Risks to '" + projectTitle + "'",                           evalResult: false,                           params: {                              "NEWPROJECTID": dropFolder.projectID,                              "MOVEORPROMOTE": idx,                              "XFERRISKS": JSON.stringify(dragData.getProperty("riskID"))                           },                           callback: function (rpcResponse, data, rpcRequest) {                              isc.say(data);                              updateSelectedProject();                           },                           actionURL: "./reassignRisks"                        });                     }                  }               });            }            moveOrPromoteDialog.show();         } catch (e) {            alert("QRM Utils Line 947" + e.message);         }         return false;      },      dataArrived: function () {         this.getData().openAll();      },      getCellCSSText: function (record, rowNum, colNum) {         if (qoQRM.riskProjectEditMode == "project") {            return "color:red;";         }      },      recordClick: function () {         qoQRM.navigatorInit = true;         if (qoQRM.riskProjectEditMode == "project") {            if (qoProjectManager.dirtyEditor) {               isc.ask("Save Changes?", function (value) {                  if (value) {                     projectTabSet.getTabPane(projectTabSet.getSelectedTab()).saveFn();                  } else {                     projectTabSet.getTabPane(projectTabSet.getSelectedTab()).resetFn();                  }                  resetProject(QRMNavigator.getSelectedRecord().projectID);                  return;               });            } else {               resetProject(this.getSelectedRecord().projectID);            }         } else {            if (qrmProjectMap.get(QRMNavigator.getSelectedRecord().projectID) != null && qoQRM.descendantsCurrent) {               project = qrmProjectMap.get(QRMNavigator.getSelectedRecord().projectID);               qoQRM.singlePhase = project.singlePhase;               updateSelectedProject();            } else {               qoQRM.projectTitleStr = "";               projectLabel.markForRedraw();               isc.RPCManager.sendRequest({                  showPrompt: true,                  prompt: "Retrieving Risk Project",                  evalResult: false,                  params: {                     "PROJECTID": this.getSelectedRecord().projectID,                     "DESCENDANTS": checkDescendants.getValue()                  },                  callback: function (rpcResponse, data, rpcRequest) {                     try {                        if (data.status) {                           isc.say("Your session has expired or there has been a server connection error. You will need to login to Quay Risk Manager.", function () {                              window.open("./login.jsp", "_self");                           });                        } else {                           project = JSON.parse(data, dateParser);                           if (!project) {                              isc.say("The risk repository has been updated.\n The risk project you selected is no longer available.");                              getUserProjects();                              RiskTable.ungroup();                           } else {                              qoQRM.descendantsCurrent = true;                              qoQRM.singlePhase = project.singlePhase;                              updateSelectedProject();                              RiskTable.ungroup();                              qrmProjectMap.put(QRMNavigator.getSelectedRecord().projectID, project);                           }                        }                     } catch (e) {                        getUserProjects(true);                     }                  },                  actionURL: "./getRiskProject"               });            }         }      }   });   isc.DynamicForm.create({      fields: [{         ID: "checkDescendants",         defaultValue: false,         align: "left",         name: "CheckboxItem0",         title: "Include Descedant Projects",         type: "CheckboxItem",         startRow: true,         changed: function (form, item, value) {            qoQRM.descendantsCurrent = false;            updateSelectedProject();         }      }],      ID: "DescendantsForm",      backgroundColor: qrmCtrlColor,      align: "right",      titleWidth: 0,      width: "100%",      numCols: 2   });   // Create the Navigator for Project Managr   return isc.VLayout.create({      backgroundColor: qrmCtrlColor,      members: [QRMNavigator, DescendantsForm]   });}function setActiveScreen() {   try {      if (!qoQRM.navigatorInit) {         return;      }      qoCurrent.Pane.setProject();   } catch (e) {      alert("Line 1123 " + e.message);   }}function initMonteCarlo() {   if (typeof (initMonteCarloModalWindow) == "undefined") {      isc.Window.create({         ID: "initMonteCarloModalWindow",         title: "Monte Carlo Simulation Configuration",         width: 550,         height: 500,         showMinimizeButton: false,         autoCenter: true,         isModal: true,         showModalMask: true,         autoDraw: true,         headerIconProperties: {            src: "icons/16/dice.png"         },         items: [getMonteCarloLayout()]      });   } else {      initMonteCarloModalWindow.show();   }   MonteRiskTable.setData(RiskTable.getSelection());}function getMonteCarloLayout() {   isc.ListGrid.create({      width: "100%",      height: "100%",      alternateRecordStyles: true,      selectionType: "none",      ID: "MonteRiskTable",      emptyMessage: "No Risks Were Selected",      hoverWidth: 200,      hoverHeight: 20,      getBaseStyle: function (record, rowNum, colNum) {         if (colNum == 0) {            return "rankItem" + record.currentTolerance;         } else {            return this.Super("getBaseStyle", arguments);         }      },      fields: [{         name: "riskProjectCode",         title: "Risk Code",         canEdit: false,         width: 80,         align: "left"      }, {         name: "title",         title: "Title",         align: "left",         width: "100%"      }]   });   var form = isc.DynamicForm.create({      ID: "monteCarloConfigForm",      numCols: 2,      titleWidth: 200,      hiliteRequiredFields: true,      width: "100%",      fields: [{         name: "start",         width: "300",         title: "Start of Simulation Period",         type: "date",         startRow: true      }, {         name: "end",         width: "300",         title: "End of Simulation Period",         type: "date",         startRow: true      }, {         width: 80,         type: "text",         name: "iterations",         title: "Number of Iterations",         keyPressFilter: "[0-9.]",         validators: [{            type: "integerRange",            min: 1000,            max: 5000         }],         defaultValue: 2000      }, {         name: "simType",         type: "hidden",         defaultValue: 0      }, {         name: "forceRiskActive",         title: "Force Risks to be Active",         type: "checkbox",         defaultValue: false      }, {         name: "forceConsequencesActive",         title: "Force Consequences to be Active",         type: "checkbox",         defaultValue: false      }, {         name: "reportFormatType",         visible: false,         valueMap: ["PDF", "HTML", "MS Word", "MS PowerPoint"],         title: "Report Format",         _constructor: "RadioGroupItem",         defaultValue: "PDF",         width: 150,         startRow: true      }]   });   var toolStrip = isc.ToolStrip.create({      width: "100%",      layoutMargin: 5,      membersMargin: 5,      height: 24,      saveFn: function () {         if (monteCarloConfigForm.validate()) {            var values = monteCarloConfigForm.getValues();            values.riskIDs = RiskTable.getSelection().getProperty("riskID");            isc.RPCManager.sendRequest({               prompt: "Submitting Request",               showPrompt: true,               evalResult: true,               params: {                  "DATA": JSON.stringify(values),                  "PROJECTID": project.projectID               },               callback: function (rpcResponse, jobID, rpcRequest) {                  // Will return the jobID;                  if (jobID < 0) {                     isc.say("Could not submit Monte Carlo Analysis Request");                     initMonteCarloModalWindow.hide();                  } else {                     isc.say("Monte Carlo Analysis Submitted for Processing (ID: " + jobID + ")<br/><br/>Use the 'Reports' tab to review results");                     initMonteCarloModalWindow.hide();                     qoQRM.ConcurrentPane.setProject(true);                  }               },               actionURL: "./submiteMonteRequest"            });         }      },      initWidget: function () {         this.Super("initWidget", arguments);         var sBtn = isc.IButton.create({            title: "Submit",            width: 100,            click: this.saveFn         });         var cBtn = isc.IButton.create({            title: "Cancel",            width: 100,            click: function () {               initMonteCarloModalWindow.hide();            }         });         var filler = isc.Label.create({            contents: "",            width: "100%"         });         this.addMembers([filler, sBtn, cBtn]);      }   });   return isc.VLayout.create({      membersMargin: 5,      layoutMargin: 5,      members: [form, MonteRiskTable, toolStrip],      autoDraw: false   });}function scheduleReview() {   isc.Window.create({      ID: "scheduleReviewModalWindow",      title: "Schedule Review for Selected Risks",      width: 600,      height: 450,      showMinimizeButton: false,      autoCenter: true,      isModal: true,      showModalMask: true,      autoDraw: true,      items: [getScheduleReviewLayout()]   });   ScheduleRiskTable.setData(RiskTable.getSelection());   reviewSelectGridDS.fetchData();}function addRisksToIncident() {   if (!checkTableSelection()) return;   isc.Window.create({      ID: "addRisksToIncidentModalWindow",      title: "Associate Risks To An Incident",      width: 600,      height: 450,      showMinimizeButton: false,      autoCenter: true,      headerIconProperties: {         src: "icons/16/icon_add_files.png"      },      isModal: true,      showModalMask: true,      autoDraw: true,      closeClick: function () {         updateSelectedProject();      },      items: [getRiskToIncidentLayout()]   });   try {      addRisksToIncidentModalWindow.show();      RiskToIncidentTable.setData(RiskTable.getSelection());      incidentSelectGridDS.fetchData();   } catch (e) {      alert("QRM Utils Line 1346" + e.message);   }}function getRiskToIncidentLayout() {   isc.ListGrid.create({      width: "100%",      height: "100%",      top: 10,      alternateRecordStyles: true,      selectionType: "none",      ID: "RiskToIncidentTable",      emptyMessage: "No Risks Were Selected",      hoverWidth: 200,      hoverHeight: 20,      getBaseStyle: function (record, rowNum, colNum) {         if (colNum == 0) {            return "rankItem" + record.currentTolerance;         } else {            return this.Super("getBaseStyle", arguments);         }      },      fields: [{         name: "riskProjectCode",         title: "Risk Code",         canEdit: false,         width: 80,         align: "left"      }, {         name: "title",         title: "Title",         align: "left",         width: "100%"      }]   });   isc.DynamicForm.create({      ID: "riskToIncidentConfigForm",      numCols: 2,      autoDraw: false,      titleWidth: 150,      hiliteRequiredFields: true,      width: "100%",      fields: [{         title: "Incident",         required: true,         name: "NewOrOld",         _constructor: "RadioGroupItem",         vertical: false,         width: 250,         valueMap: {            0: "New Incident",            1: "Existing Incident"         },         defaultValue: 0,         changed: function (form, item, value, oldValue) {            if (value == 0) {               form.getItem('dateIncident').enable();               form.getItem('title').enable();               form.getItem('existing').disable();            } else {               form.getItem('dateIncident').disable();               form.getItem('title').disable();               form.getItem('existing').enable();            }            return true;         }      }, {         _constructor: "RowSpacerItem"      }, {         name: "dateIncident",         width: 300,         title: "New Incident Date",         type: "date"      }, {         width: 400,         type: "text",         name: "title",         title: "New Incident Title"      }, {         _constructor: "RowSpacerItem"      }, {         width: 400,         editorType: "comboBox",         name: "existing",         disabled: true,         title: "Existing Incident",         optionDataSource: "incidentSelectGridDS",         valueField: "incidentID"      }]   });   var toolStrip = isc.ToolStrip.create({      autoDraw: false,      width: "100%",      layoutMargin: 5,      showReset: true,      membersMargin: 5,      height: 24,      initWidget: function () {         this.Super("initWidget", arguments);         this.sBtn = isc.QRMSaveButton.create({            title: "Submit",            click: function () {               if (riskToIncidentConfigForm.validate()) {                  var values = riskToIncidentConfigForm.getValues();                  if (values.NewOrOld == 0) values.dateIncident = simplifyDate(values.dateIncident);                  values.riskIDs = RiskTable.getSelection().getProperty("riskID");                  isc.RPCManager.showPrompt = false;                  isc.RPCManager.sendRequest({                     prompt: "Adding risk to incident",                     evalResult: true,                     params: {                        "DATA": JSON.stringify(values)                     },                     callback: function (rpcResponse, data, rpcRequest) {                        isc.RPCManager.showPrompt = true;                        try {                           addRisksToIncidentModalWindow.hide();                        } catch (e) {                           alert("QRM Utils Line 1475" + e.message);                        }                        if (data) {                           isc.say("Risks were added to Incident");                           updateSelectedProject();                        } else {                           isc.say("Risk were *not* added to Incident");                        }                        // Refresh the Review                        // pane if visible                        if (Issue.isVisible()) Issue.setProjectLocal();                     },                     actionURL: "./updateIncidentRisks"                  });               }            }         });         this.cBtn = isc.QRMCancelButton.create({            title: "Cancel",            width: 100,            click: function () {               addRisksToIncidentModalWindow.hide();            }         });         this.filler = isc.Label.create({            contents: "",            width: "100%"         });         this.addMembers([this.filler, this.sBtn, this.cBtn]);         if (this.showReset) this.addMembers(this.rBtn);      }   });   return isc.VLayout.create({      membersMargin: 5,      layoutMargin: 5,      members: [riskToIncidentConfigForm, RiskToIncidentTable, toolStrip]   });}function getScheduleReviewLayout() {   isc.ListGrid.create({      width: "100%",      height: "100%",      alternateRecordStyles: true,      selectionType: "none",      ID: "ScheduleRiskTable",      emptyMessage: "No Risks Were Selected",      hoverWidth: 200,      hoverHeight: 20,      getBaseStyle: function (record, rowNum, colNum) {         if (colNum == 0) {            return "rankItem" + record.currentTolerance;         } else {            return this.Super("getBaseStyle", arguments);         }      },      fields: [{         name: "riskProjectCode",         title: "Risk Code",         canEdit: false,         width: 80,         align: "left"      }, {         name: "title",         title: "Title",         align: "left",         width: "100%"      }]   });   isc.DynamicForm.create({      ID: "scheduleReviewConfigForm",      numCols: 2,      autoDraw: false,      titleWidth: 150,      hiliteRequiredFields: true,      width: "100%",      fields: [{         title: "Review",         required: true,         name: "NewOrOld",         _constructor: "RadioGroupItem",         vertical: false,         width: 250,         redrawOnChange: true,         valueMap: {            0: "New Review",            1: "Existing Review"         },         defaultValue: 0,         changed: function (form, item, value, oldValue) {            if (value == 0) {               form.getItem('scheduled').enable();               form.getItem('description').enable();               form.getItem('existing').disable();            } else {               form.getItem('scheduled').disable();               form.getItem('description').disable();               form.getItem('existing').enable();            }            return true;         }      }, {         _constructor: "RowSpacerItem"      }, {         name: "scheduled",         width: 300,         title: "New Review Date",         type: "date"      }, {         width: 400,         type: "text",         name: "description",         title: "New Review Description"      }, {         _constructor: "RowSpacerItem"      }, {         width: 400,         type: "select",         name: "existing",         disabled: true,         title: "Existing Review",         optionDataSource: "reviewSelectGridDS",         pickListWidth: 450,         pickListFields: [{            name: "title"         }, {            name: "scheduledDate"         }],         valueField: "reviewID",         displayField: "title",         autoFetchData: false      }]   });   var toolStrip = isc.ToolStrip.create({      autoDraw: false,      width: "100%",      layoutMargin: 5,      showReset: true,      membersMargin: 5,      backgroundColor: "white",      height: 24,      saveFn: function () {         if (scheduleReviewConfigForm.validate()) {            var values = scheduleReviewConfigForm.getValues();            if (values.NewOrOld == 0) values.scheduled = simplifyDate(values.scheduled);            values.riskIDs = RiskTable.getSelection().getProperty("riskID");            isc.RPCManager.showPrompt = true;            isc.RPCManager.sendRequest({               prompt: "Scheduling Review",               evalResult: true,               params: {                  "DATA": JSON.stringify(values),                  "PROJECTID": project.projectID               },               callback: function (rpcResponse, data, rpcRequest) {                  try {                     scheduleReviewModalWindow.hide();                  } catch (e) {                     alert("QRM Utils Line 1621" + e.message);                  }                  if (data) {                     isc.say("Risk Review Scheduled");                  } else {                     isc.say("Risk Review Was Not Able To Be Scheuled");                  }                  try {                     if (riskReviewLayout.isVisible()) getRiskReviewLayoutData();                  } catch (e) {                     //                  }                  try {                     if (Review.isVisible()) Review.setProjectLocal();                  } catch (e) {                     //                  }               },               actionURL: "./scheduleReview"            });         }      },      initWidget: function () {         this.Super("initWidget", arguments);         var sBtn = isc.QRMSaveButton.create({            title: "Submit",            click: this.saveFn         });         var cBtn = isc.QRMCancelButton.create({            title: "Cancel",            click: function () {               scheduleReviewModalWindow.hide();            }         });         var filler = isc.Label.create({            contents: "",            width: "100%"         });         this.addMembers([filler, sBtn, cBtn]);      }   });   return isc.VLayout.create({      membersMargin: 5,      layoutMargin: 5,      members: [scheduleReviewConfigForm, ScheduleRiskTable, toolStrip],      autoDraw: false   });}function getScheduleReviewSimpleLayout() {   var form = isc.DynamicForm.create({      numCols: 2,      autoDraw: false,      titleWidth: 180,      width: 530,      hiliteRequiredFields: true,      width: "100%",      fields: [{         name: "scheduled",         width: 300,         required: true,         title: "Scheduled Review Date",         type: "date"      }, {         width: 350,         type: "text",         name: "description",         title: "Review Description"      }]   });   var toolStrip = isc.HLayout.create({      autoDraw: false,      width: "100%",      layoutMargin: 5,      showReset: true,      membersMargin: 5,      height: 24,      initWidget: function () {         this.Super("initWidget", arguments);         var sBtn = isc.QRMSaveButton.create({            title: "Submit",            click: function () {               if (form.validate()) {                  var values = form.getValues();                  values.scheduled = simplifyDate(values.scheduled);                  isc.RPCManager.sendRequest({                     prompt: "Scheduling Review",                     showPrompt: true,                     evalResult: true,                     params: {                        "DATA": JSON.stringify(values),                        "PROJECTID": project.projectID                     },                     callback: function (rpcResponse, data, rpcRequest) {                        try {                           scheduleReviewSimpleModalWindow.hide();                        } catch (e) {                           alert("QRM Utils Line 1715" + e.message);                        }                        if (data) {                           isc.say("Review Scheduled", function () {                              if (Review.isVisible()) {                                 Review.setProjectLocal();                              }                           });                        } else {                           isc.say("Review Was Not Able To Be Scheuled");                        }                     },                     actionURL: "./scheduleReview"                  });               }            }         });         var cBtn = isc.QRMCancelButton.create({            click: function () {               scheduleReviewSimpleModalWindow.hide();            }         });         var filler = isc.Label.create({            contents: "",            width: "100%"         });         try {            this.addMembers([filler, sBtn, cBtn]);         } catch (e) {            alert("QRM Utils Line 1746" + e);         }      }   });   return isc.VLayout.create({      membersMargin: 5,      layoutMargin: 5,      width: 535,      members: [form, toolStrip]   });}function addAttachment(riskID) {   if (typeof (attachmentModalWindow) == "undefined") {      isc.Window.create({         ID: "attachmentModalWindow",         headerIconProperties: {            src: "icons/16/icon_add_files.png"         },         title: "Add Attachment",         width: 520,         height: 250,         showMinimizeButton: false,         autoCenter: true,         isModal: true,         showModalMask: true,         showFooter: true,         autoDraw: true,         items: [getRiskAttachmentLayout()]      });   } else {      attachmentModalWindow.show();   }   RiskAttachmentForm.setValues({      hostID: riskID,      hostType: "RISK"   });}function getRiskAttachmentLayout() {   return isc.VLayout.create({      height: "100%",      width: "100%",      membersMargin: 5,      layoutMargin: 5,      members: [isc.DynamicForm.create({         encoding: "multipart",         width: "450",         titleWidth: "150",         target: "_qrmFormTarget",         ID: "RiskAttachmentForm",         action: "./QRMAttachment?saveAttachment=true",         fields: [{            _constructor: "HeaderItem",            defaultValue: "Attachment Details"         }, {            title: "Description",            required: true,            name: "description",            _constructor: "TextItem",            width: 300         }, {            title: "Type of Attachment",            required: true,            name: "UrlOrFile",            _constructor: "RadioGroupItem",            vertical: false,            width: 300,            redrawOnChange: true,            valueMap: {               0: "Link to Web Page (URL)",               1: "File Attachment"            }         }, {            title: "URL",            name: "url",            _constructor: "TextItem",            width: 300,            showIf: "form.getValue('UrlOrFile') == '0'",            validators: [{               type: "regexp",               expression: "^(http|https|ftp|file|HTTP|HTTPS|FTP|FILE):\/\/*"            }]         }, {            title: "File Attachment",            name: "UploadItem0",            _constructor: "UploadItem",            width: 300,            showIf: "form.getValue('UrlOrFile') == '1'"         }, {            _constructor: "RowSpacerItem"         }, {            _constructor: "ToolbarItem",            width: 180,            align: "right",            buttons: [{               _constructor: "ButtonItem",               title: "Submit",               click: function (form, item) {                  if (form.validate()) {                     form.submitForm();                  }               }            }, {               _constructor: "ButtonItem",               title: "Cancel",               click: function (form, item) {                  form.parentElement.parentElement.hide();               }            }]         }, {            name: "hostID",            type: "hidden"         }, {            name: "hostType",            type: "hidden"         }]      })]   });}function deleteRisks() {   isc.ask("Are you sure you want to delete the selected risks?", function (value) {      if (value) {         var riskIDs = RiskTable.getSelection().getProperty("riskID");         isc.RPCManager.sendRequest({            prompt: "Deleting Risks",            showPrompt: true,            evalResult: true,            params: {               "DATA": JSON.stringify(riskIDs),               "PROJECTID": project.projectID            },            callback: function (rpcResponse, data, rpcRequest) {               if (data) {                  isc.say("Security Restriction: You were not authorised to delete one or more of the selected risks");               }               updateSelectedProject();            },            actionURL: "./deleteRisks"         });      }   });}function unpromoteRisk() {   var riskID = RiskTable.getSelection().getProperty("riskID");   isc.RPCManager.sendRequest({      prompt: "Removing Promotion from Risk",      showPrompt: true,      evalResult: false,      params: {         "DATA": JSON.stringify(riskID),         "PROJECTID": project.projectID      },      callback: function (rpcResponse, data, rpcRequest) {         isc.say(data);         updateSelectedProject();      },      actionURL: "./unpromoteRisks"   });}function deleteRisk(riskID) {   try {      isc.ask("Are you sure you want to delete the selected risk?", function (value) {         if (value) {            var riskIDs = new Array();            riskIDs.add(riskID);            isc.RPCManager.sendRequest({               prompt: "Deleting Risks",               showPrompt: true,               evalResult: true,               params: {                  "DATA": JSON.stringify(riskIDs),                  "PROJECTID": project.projectID               },               callback: function (rpcResponse, data, rpcRequest) {                  if (data) {                     isc.say("Security Restriction: You were not authorised to delete one or more of the selected risks");                  }                  updateSelectedProject();               },               actionURL: "./deleteRisks"            });         }      });   } catch (e) {      alert("Line 1948 " + e.message);   }}function qrmFindRisk(id) {   isc.RPCManager.showPrompt = true;   isc.RPCManager.sendRequest({      prompt: "Finding Risk",      evalResult: false,      actionURL: "./findRisk",      params: {         "RISKID": id,         "NOCACHE": Math.random()      },      callback: function (rpcResponse, data, rpcRequest) {         try {            var foundRisk = eval(data);            if (!foundRisk.projectID) {               isc.say("Risk Could Not Be Found");               DynamicFormTolerance.getItem("riskID").setValue(null);               return;            } else {               findRiskCB(foundRisk);            }         } catch (e) {            isc.say("Risk Could Not Be Found");            DynamicFormTolerance.getItem("riskID").setValue(null);            return;         }      }   });}function findRiskCB(foundRisk) {   try {      isc.RPCManager.sendRequest({         prompt: "Getting Risk Project",         showPrompt: true,         evalResult: false,         params: {            "PROJECTID": foundRisk.projectID,            "DESCENDANTS": checkDescendants.getValue()         },         callback: function (rpcResponse, data, rpcRequest) {            project = JSON.parse(data, dateParser);            // RiskTableWindow.setTitle(project.projectTitle);            updateSelectedProject(true);            clearFiltersBtn.enable();            setTolMatixCB(project);            var index = -1;            try {               for (var i = 0; QRMNavigator.getRecord(i).projectID != project.projectID && i < 1000; i++) {                  index++;               }            } catch (e) {               // can happen if            }            QRMNavigator.selectSingleRecord(index + 1);            qoQRM.RiskTablePane.RiskTable.fetchData({               "DESCENDANTS": checkDescendants.getValue(),               "PROJECTID": foundRisk.projectID,               "OPERATION": "getRiskLiteFetch",               "RISKID": foundRisk.riskID,               "PROCESSFILTER": true,               "TOLEX": true,               "TOLHIGH": true,               "TOLSIG": true,               "TOLMOD": true,               "TOLLOW": true,               "STATACTIVE": true,               "STATPENDING": true,               "STATINACTIVE": true,               "STATTREATED": true,               "STATUNTREATED": true,               "CATID": -1,               "OWNERID": -1,               "MANAGERID": -1,               "NOCACHE": Math.random()            });         },         actionURL: "./getRiskProject"      });   } catch (e) {      isc.say("Risk Could Not Be Found");      DynamicFormTolerance.getItem("riskID").setValue(null);      return;   }}function getExportSubmitForm() {   if (typeof (ExportSubmitForm) == "undefined") {      isc.DynamicForm.create({         autoDraw: true,         ID: "ExportSubmitForm",         visibility: "hidden",         action: "./QRMMSFormat",         canSubmit: true,         fields: [{            name: "OPERATION",            type: "hidden"         }, {            name: "DATA",            type: "hidden"         }]      });   }   return ExportSubmitForm;}function uploadImportedRisk() {   isc.Window.create({      ID: "riskUploadFormWindow",      title: "Select Risk File to Import",      width: 500,      height: 260,      canDragReposition: false,      canDragResize: false,      autoCenter: true,      isModal: true,      showModalMask: true,      showMinimizeButton: false,      layoutMargin: 5,      headerIconProperties: {         src: "icons/16/import.png"      },      autoDraw: true,      items: [      isc.Label.create({         wrap: true,         width: "100%",         contents: "<b>Importing Risks</b><br/><br/>Select the file containing the risks. After the file has been uploaded you will be able to select the specific risks you wish to import.<br/><br />Selected file must be in either QRM XML format or CSV (Comma Separated Variable) format"      }), isc.QRMImportAttachmentForm.create({         ID: "importUploadFileWidget"      })      ]   });   importUploadFileWidget.showForm(function (retCode) {      riskUploadFormWindow.hide();      if (retCode == "FORMAT_ERROR") {         isc.say("The uploaded file was not in a recognised format. <br/><br/>Please upload a QRM XML file or a CSV file");      } else {         try {            var controlObject = JSON.parse(retCode);            if (controlObject.type == "CSV") {               csvDefineAndChoose(controlObject.colCount, controlObject.myArr, controlObject.key);            } else if (controlObject.type == "XML") {               selectUploadedRisks(controlObject.myArr, controlObject.key);            }         } catch (e) {            isc.say(e.message);            isc.say(rtnCode);         }      }   });}function selectUploadedRisks(myArr, id) {   try {      waitingOnRiskUploadWindow.hide();   } catch (e) {      //   }   var dataArray = new Array();   for (var i = 0; i < myArr.length; i++) {      dataArray.add(myArr[i]);   }   try {      isc.Window.create({         title: "Select Risks to Import",         ID: "selectRisksToImportGridWinXML",         height: Math.min(MainPane.getHeight() * 0.98, 600),         width: Math.min(MainPane.getWidth() * 0.98, 900),         showMinimizeButton: false,         canDragReposition: false,         canDragResize: false,         autoCenter: true,         isModal: true,         showModalMask: true,         headerIconProperties: {            src: "icons/16/import.png"         },         autoDraw: true,         memberMargin: 5,         layoutMargin: 5,         items: [isc.ListGrid.create({            ID: "importRiskList",            width: "100%",            height: "100%",            alternateRecordStyles: true,            selectionAppearance: "checkbox",            canExpandRecords: true,            expansionMode: "details",            data: dataArray,            fields: [{               name: "title",               title: "Title",               width: "50%"            }, {               name: "description",               title: "Description",               width: "50%"            }]         }), isc.ToolStrip.create({            width: "100%",            layoutMargin: 5,            membersMargin: 5,            height: 24,            align: "right",            initWidget: function () {               this.Super("initWidget", arguments);               this.addMembers([isc.IButton.create({                  title: "Import Selected",                  width: 150,                  click: function () {                     if (importRiskList.getSelection().length > 50) {                        isc.say("Maximum of 50 risks at a time may be imported");                     } else {                        var idAndChoices = importRiskList.getSelection().getProperty("riskID");                        idAndChoices.addAt(id, 0);                        isc.RPCManager.sendRequest({                           showPrompt: true,                           prompt: "Importing Selected Risks",                           evalResult: false,                           params: {                              "DATA": JSON.stringify(idAndChoices),                              "PROJECTID": project.projectID                           },                           callback: function (rpcResponse, data, rpcRequest) {                              isc.say(data, function () {                                 try {                                    selectRisksToImportGridWinXML.closeClick();                                    updateSelectedProject();                                 } catch (e) {                                    alert("Line 2430 " + e);                                 }                              });                           },                           actionURL: "./importRisks"                        });                     }                  }               }), isc.IButton.create({                  title: "Cancel",                  width: 100,                  click: function () {                     try {                        selectRisksToImportGridWin.closeClick();                     } catch (e) {                        alert("Line 2441 " + e);                     }                  }               })]);            }         })]      });   } catch (e) {      alert("Line 2461 " + e);   }}function csvDefineAndChoose(colCount, myArr, id) {   waitingOnRiskUploadWindow.hide();   fieldValueMap = {      "noImport": "Ignore",      "riskID": "QRM ID",      "riskProjectCode": "QRM Risk Code",      "externalID": "External ID",      "title": "Title",      "description": "Description",      "cause": "Cause",      "consequences": "Consequences",      "mitPlanSummary": "Mitigation Plan Summary",      "mitPlanSummaryUpdate": "Mitigation Plan Update",      "impact": "Impacts",      "estimatedContingency": "Estimated Contingency Cost",      "mitigationPlan": "Mitigation",      "estimatedMitigation": "Estimated Mitigation Cost",      "comment": "Comment or Update",      "primCat": "Primary Category",      "secCat": "Secondary Category",      "ownerID": "Risk Owner",      "managerID": "Risk Manager",      "inherentProb": "Inherent Probability",      "inherentImpact": "Inherent Impact",      "treatedProb": "Treated Probability",      "treatedImpact": "Treated Impact",      "isImpCost": "Impacts Cost",      "isImpEnvironment": "Impacts Environment",      "isImpReputation": "Impacts Reputation",      "isImpSafety": "Impacts Safety",      "isImpSpec": "Impacts Quality or Specification",      "isImpTime": "Impacts Schedule"   };   var fieldArray = new Array();   var formArray = new Array();   var formArray1 = new Array();   formArray.add({      colSpan: 3,      type: "HeaderItem",      defaultValue: "2. Match to existing risks"   });   formArray.add({      change: "form.getField('key').setDisabled(!value)",      redrawOnChange: true,      title: "Match to existing risks if possible",      name: "matchRisk",      colSpan: 3,      type: "checkbox",      value: true   });   formArray.add({      type: "StaticTextItem",      colSpan: 2,      defaultValue: "Select which field should be the key for identifying existing risks"   });   formArray.add({      name: "key",      title: "Key",      colSpan: 2,      showTitle: true,      type: "radioGroup",      value: "externalID",      vertical: false,      valueMap: {         "internalID": "QRM Internal ID",         "qrmRiskCode": "QRM Risk Code",         "externalID": "ExternalID"      }   });   formArray.add({      colSpan: 3,      type: "HeaderItem",      defaultValue: "3. Map the imported columns to risk fields"   });   for (var i = 0; i < colCount; i++) {      fieldArray.add({         name: "column" + i,         width: 80,         title: "Field " + i      });      formArray.add({         name: "column" + i,         width: 160,         title: "Field " + i,         type: "select",         redrawOnChange: true,         index: i,         value: "noImport",         valueMap: fieldValueMap,         changed: function (form, item, value) {            importRiskList.setFieldProperties(this.index + 2, {               title: fieldValueMap[value]            });         }      });      formArray.add({         index: i,         showIf: function (item, value, form, values) {            var x = "column" + this.index;            var dep = values[x];            if (dep == "riskID" || dep == "riskProjectCode" || dep == "primCat" || dep == "secCat" || dep == "managerID" || dep == "ownerID" || dep == "inherentProb" || dep == "treatedProb" || dep == "inherentImpact" || dep == "treatedImpact" || dep == "externalID" || dep == "noImport" || form.getValue("matchRisk") != true) {               return false;            } else {               return true;            }         },         name: "action" + i,         showTitle: false,         type: "radioGroup",         value: "replace",         vertical: false,         valueMap: {            "replace": "Replace",            "append": "Append"         }      });   }   formArray1.add({      colSpan: 3,      type: "HeaderItem",      defaultValue: "4. Optionally, provide a name to save as a template"   });   formArray1.add({      title: "Template",      name: "newTemplateName",      colSpan: 2,      type: "TextItem"   });   formArray1.add({      colSpan: 3,      type: "HeaderItem",      defaultValue: "5. Select the risks to import"   });   isc.DynamicForm.create({      width: "100%",      height: "100%",      ID: "csvConfig0",      colWidths: [80, 160, 50, "*"],      numCols: 4,      fields: [{         colSpan: 4,         type: "HeaderItem",         defaultValue: "1. Optionally, select a template"      }, {         defaultToFirstOption: false,         autoFetchData: false,         cachePickListResults: false,         changed: "try {csvConfig.setValues(JSON.parse(value));csvConfig0.getField('deleteTemplateButton').enable();} catch(e){alert (e.message);}",         title: "Template",         name: "templateName",         displayField: "templateName",         valueField: "template",         type: "select",         optionDataSource: userTemplateDS      }, {         type: "SpacerItem"      }, {         click: function (form, item) {            isc.RPCManager.sendRequest({               showPrompt: true,               prompt: "Deleting Template",               evalResult: false,               params: {                  "DATA": csvConfig0.getField('templateName').getDisplayValue()               },               callback: function (rpcResponse, data, rpcRequest) {                  csvConfig0.getField('templateName').fetchData();                  csvConfig0.reset();               },               actionURL: "./deleteImportTemplate"            });         },         title: "Delete Template",         type: "button",         name: "deleteTemplateButton",         showTitle: false,         startRow: false,         disabled: true      }]   });   isc.DynamicForm.create({      width: "100%",      height: "100%",      ID: "csvConfig",      colWidths: [80, 160, "*"],      numCols: 3,      fields: formArray   });   isc.DynamicForm.create({      width: "100%",      height: "100%",      ID: "csvConfig1",      colWidths: [80, 160, "*"],      numCols: 3,      fields: formArray1   });   var dataArray = new Array();   for (; i < myArr.length; i++) {      dataArray.add(myArr[i]);   }   var formLayout = isc.VLayout.create({      width: 450,      height: "100%",      overflow: "scroll",      members: [csvConfig0, csvConfig, csvConfig1]   });   isc.ListGrid.create({      ID: "importRiskList",      width: "100%",      height: "100%",      alternateRecordStyles: true,      selectionAppearance: "checkbox",      canExpandRecords: true,      expansionMode: "details",      data: dataArray,      fields: fieldArray   });   var winLayoutH = isc.HLayout.create({      width: "100%",      height: "100%",      members: [formLayout, importRiskList]   });   var winLayoutV = isc.VLayout.create({      width: "100%",      height: "100%",      members: [winLayoutH, isc.ToolStrip.create({         width: "100%",         layoutMargin: 5,         membersMargin: 5,         height: 24,         align: "right",         initWidget: function () {            this.Super("initWidget", arguments);            this.addMembers([isc.IButton.create({               title: "Import Selected",               width: 150,               click: function () {                  try {                     var x = new Object();                     x.ids = importRiskList.getSelection().getProperty("id");                     x.tempFileID = id;                     x.config = csvConfig.getValues();                     x.templateConfig = csvConfig1.getValues();                     x.projectID = projectID;                     isc.RPCManager.sendRequest({                        showPrompt: true,                        prompt: "Importing Selected Risks",                        evalResult: false,                        params: {                           "DATA": JSON.stringify(x),                           "PROJECTID": projectID                        },                        callback: function (rpcResponse, data, rpcRequest) {                           selectRisksToImportGridWin.closeClick();                           try {                              eval(data);                           } catch (e) {                              alert(e.message);                           }                           updateSelectedProject();                        },                        actionURL: "./importRisksCSV"                     });                  } catch (e) {                     alert(e.message);                  }               }            }), isc.IButton.create({               title: "Cancel",               width: 100,               click: function () {                  selectRisksToImportGridWin.closeClick();                  isc.RPCManager.sendRequest({                     showPrompt: false,                     params: {                        "DATA": id                     },                     actionURL: "./cancelImport"                  });               }            })]);         }      })]   });   isc.Window.create({      title: "Select Risks to Import",      ID: "selectRisksToImportGridWin",      height: MainPane.getHeight() * 0.90,      width: MainPane.getWidth() * 0.90,      showMinimizeButton: false,      canDragReposition: false,      canDragResize: true,      autoCenter: true,      isModal: true,      showModalMask: true,      headerIconProperties: {         src: "icons/16/import.png"      },      autoDraw: true,      memberMargin: 5,      layoutMargin: 5,      items: winLayoutV   });}function promptForProbAndImpactMap(probMap, impactMap, key) {   var probRankTable = isc.ListGrid.create({      ID: "probRankTable",      canReorderRecords: true,      dragDataAction: "MOVE",      dragTrackerMode: "record",      dragTrackrtStyle: "gridDragTrackerQRM",      showAllRecords: true,      alternateRecordStyles: true,      canSort: false,      data: probMap,      fields: [{         name: "probDesc",         width: "100%",         title: "Probability Description"      }]   });   var impactRankTable = isc.ListGrid.create({      ID: "impactRankTable",      canReorderRecords: true,      dragDataAction: "MOVE",      dragTrackerMode: "record",      dragTrackerStyle: "gridDragTrackerQRM",      showAllRecords: true,      alternateRecordStyles: true,      canSort: false,      data: impactMap,      fields: [{         name: "impactDesc",         width: "100%",         title: "Impact Description"      }]   });   var gridLayout = isc.HLayout.create({      width: "100%",      height: "100%",      membersMargin: 5,      layoutMargin: 5,      members: [probRankTable, impactRankTable]   });   var toolStrip = isc.ToolStrip.create({      width: "100%",      layoutMargin: 5,      membersMargin: 5,      height: 26,      align: "right",      initWidget: function () {         this.addMembers([isc.QRMSaveButton.create({            title: "Save and Import",            width: 150,            click: function () {               try {                  var probRank = "";                  var impactRank = "";                  if (probRankTable.data[0]) {                     probRank = probRankTable.data[0].probDesc;                     var mems = probRankTable.data;                     for (var idx = 1; idx < mems.length; idx++) {                        probRank = probRank + "##" + mems[idx].probDesc;                     }                  }                  if (impactRankTable.data[0]) {                     impactRank = impactRankTable.data[0].impactDesc;                     var mems2 = impactRankTable.data;                     for (var idx = 1; idx < mems2.length; idx++) {                        impactRank = impactRank + "##" + mems2[idx].impactDesc;                     }                  }                  var x = new Object();                  x.probRank = probRank;                  x.impactRank = impactRank;                  x.tempFileID = key;                  probImportConfigWin.closeClick();                  isc.RPCManager.sendRequest({                     showPrompt: true,                     prompt: "Save and Import",                     evalResult: false,                     params: {                        "DATA": JSON.stringify(x),                        "PROJECTID": projectID                     },                     callback: function (rpcResponse, data, rpcRequest) {                        updateSelectedProject();                     },                     actionURL: "./importRisksCSVWithRanks"                  });               } catch (e) {                  alert(e.message);               }            }         }), isc.IButton.create({            title: "Cancel",            width: 100,            click: function () {               try {                  probImportConfigWin.closeClick();               } catch (e) {                  alert("Line 2441 " + e);               }               isc.RPCManager.sendRequest({                  showPrompt: false,                  params: {                     "DATA": key                  },                  actionURL: "./cancelImport"               });            }         })]);      }   });   var formLayout = isc.VLayout.create({      width: "100%",      height: "100%",      membersMargin: 2,      layoutMargin: 5,      members: [isc.Label.create({         height: 20,         contents: "Drag the probability and impact description into rank order from highest to lowest."      }), gridLayout, toolStrip]   });   isc.Window.create({      title: "Define Probability and Impact Rank",      ID: "probImportConfigWin",      height: 400,      width: 600,      showMinimizeButton: false,      canDragReposition: false,      canDragResize: true,      autoCenter: true,      isModal: true,      showModalMask: true,      headerIconProperties: {         src: "icons/16/import.png"      },      autoDraw: true,      memberMargin: 5,      layoutMargin: 5,      items: formLayout   });}function calcProb(tempRisk, preMit) {   var days = (tempRisk.endExposure.getTime() - tempRisk.startExposure.getTime()) / (1000 * 60 * 60 * 24);   var alpha = 0;   var T = 0;   var type = 0;   if (preMit) {      type = tempRisk.liketype;   } else {      type = tempRisk.likepostType;   }   try {      if (type == 4) {         if (preMit) {            return tempRisk.likeprob * 100;         } else {            return tempRisk.likepostProb * 100;         }      } else {         if (preMit) {            alpha = tempRisk.likealpha;            T = tempRisk.liket;         } else {            alpha = tempRisk.likepostAlpha;            T = tempRisk.likepostT;         }         var alphat = alpha * (days / T);         var prob = 1 - (Math.exp(-alphat) * ((Math.pow(alphat, 0) / fact(0))));         return prob * 100;      }   } catch (e) {      alert("QRM Utils Line 2522" + e.message);      return -1.0;   }}function fact(n) {   if (n == 0) {      return 1;   }   return n * fact(n - 1);}function probFromMatrix(qprob, mat) {   // The the risk likelihood parameters to match the matrix settings.   var lowerLimit = 0.0;   var upperLimit = 0.0;   switch (parseInt(Math.floor(qprob), 10)) {   case 1:      lowerLimit = 0.0;      upperLimit = mat.probVal1;      break;   case 2:      lowerLimit = mat.probVal1;      upperLimit = mat.probVal2;      break;   case 3:      lowerLimit = mat.probVal2;      upperLimit = mat.probVal3;      break;   case 4:      lowerLimit = mat.probVal3;      upperLimit = mat.probVal4;      break;   case 5:      lowerLimit = mat.probVal4;      upperLimit = mat.probVal5;      break;   case 6:      lowerLimit = mat.probVal5;      upperLimit = mat.probVal6;      break;   case 7:      lowerLimit = mat.probVal6;      upperLimit = mat.probVal7;      break;   case 8:      lowerLimit = mat.probVal7;      upperLimit = mat.probVal8;      break;   }   var prob = lowerLimit + (upperLimit - lowerLimit) * (qprob - Math.floor(qprob));   return prob;}function probToMatrix(prob, mat) {   var qprob = 0.5;   if (mat.probVal1 != null && 0 <= prob && prob <= mat.probVal1 && mat.maxProb >= 1) {      qprob = 1.0 + (prob / mat.probVal1);   }   if (mat.probVal1 != null && mat.probVal2 != null && mat.probVal1 < prob && prob <= mat.probVal2 && mat.maxProb >= 2) {      qprob = 2.0 + ((prob - mat.probVal1) / (mat.probVal2 - mat.probVal1));   }   if (mat.probVal2 != null && mat.probVal3 != null && mat.probVal2 < prob && prob <= mat.probVal3 && mat.maxProb >= 3) {      qprob = 3.0 + ((prob - mat.probVal2) / (mat.probVal3 - mat.probVal2));   }   if (mat.probVal3 != null && mat.probVal4 != null && mat.probVal3 < prob && prob <= mat.probVal4 && mat.maxProb >= 4) {      qprob = 4.0 + ((prob - mat.probVal3) / (mat.probVal4 - mat.probVal3));   }   if (mat.probVal4 != null && mat.probVal5 != null && mat.probVal4 < prob && prob <= mat.probVal5 && mat.maxProb >= 5) {      qprob = 5.0 + ((prob - mat.probVal4) / (mat.probVal5 - mat.probVal4));   }   if (mat.probVal5 != null && mat.probVal6 != null && mat.probVal5 < prob && prob <= mat.probVal6 && mat.maxProb >= 6) {      qprob = 6.0 + ((prob - mat.probVal5) / (mat.probVal6 - mat.probVal5));   }   if (mat.probVal6 != null && mat.probVal7 != null && mat.probVal6 < prob && prob <= mat.probVal7 && mat.maxProb >= 7) {      qprob = 7.0 + ((prob - mat.probVal6) / (mat.probVal7 - mat.probVal6));   }   if (mat.probVal7 != null && mat.probVal8 != null && mat.probVal7 < prob && prob <= mat.probVal8 && mat.maxProb == 8) {      qprob = 8.0 + ((prob - mat.probVal7) / (mat.probVal8 - mat.probVal7));   }   return qprob;}function getRiskAndDisplay(id) {   try {      getRiskAndDisplayInt(id);   } catch (e) {      alert(e.message);   }}function getRiskCodeAndDisplay(id) {   try {      getRiskCodeAndDisplayInt(id);   } catch (e) {      alert(e.message);   }}function defineRiskTableWidget() {   isc.defineClass("RiskTableWidget", "VLayout");   isc.RiskTableWidget.addProperties({      helpURL: "./html/riskTable_helpText.html",      backgroundColor: qrmCtrlColor,      visibiliy: "inherit",      initWidget: function () {         this.Super("initWidget", arguments);         this.RiskTable = isc.ListGrid.create({            ID: "RiskTable",            dataSource: riskLiteDS,            alternateRecordStyles: true,            canDragSelect: false,            emptyMessage: "Select the Risk Project from the Navigator",            canDragRecordsOut: true,            hoverWidth: 200,            hoverHeight: 20,            showGridSummary: true,            canExpandRecords: true,            expansionMode: "details",            recordDoubleClick: function () {               qoRiskController.riskID = this.getSelectedRecord().riskID;               getRiskAndDisplayInt(qoRiskController.riskID, true);            },            getBaseStyle: function (record, rowNum, colNum) {               if (colNum == 0 || colNum == 1) {                  return "rankItem" + record.currentTolerance;               } else {                  return this.Super("getBaseStyle", arguments);               }            },            groupStartOpen: "all",            sortField: "currentTolerance",            sortDirection: "descending",            fields: [{               name: "riskProjectCode",               title: "Risk Code",               width: 105,               canGroupBy: false,               align: "left",               summaryFunction: "count",               canReorder: false,               formatGridSummary: "return value+\" Risks\"",               formatCellValue: function (value, record) {                  if (record.summaryRisk && record.promotionCode != "-") {                     return value + "* (" + record.toProjCode + ")";                  } else if (record.promotionCode != "-") {                     return value + " (" + record.toProjCode + ")";                  } else if (record.summaryRisk) {                     return value + "*";                  } else {                     return value;                  }               }            }, {               name: "currentTolerance",               includeInRecordSummary: false,               showGridSummary: false,               showGroupSummary: false,               title: "Tolerance",               type: "image",               align: "center",               width: 70,               canReorder: false,               canGroupBy: true,               imageURLPrefix: "tol",               imageURLSuffix: ".png",               getGroupValue: function (value, record, field, fieldName, grid) {                  return value;               },               getGroupTitle: function (groupValue, groupNode, field, fieldName, grid) {                  switch (groupValue) {                  case 5:                     return "Extreme";                     break;                  case 4:                     return "High";                     break;                  case 3:                     return "Significant";                     break;                  case 2:                     return "Moderate";                     break;                  case 1:                     return "Low";                     break;                  }               }            }, {               name: "title",               title: "Title",               align: "left",               showGridSummary: false,               showGroupSummary: false,               canGroupBy: true,               width: 500            }, {               name: "startExposure",               title: "Start of Exposure",               type: "date",               align: "center",               width: 120,               canGroupBy: true,               showIf: "false",               formatCellValue: function (value) {                  if (value) {                     return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                  }               }            }, {               name: "endExposure",               title: "End of Exposure",               type: "date",               align: "center",               width: 120,               canGroupBy: true,               showIf: "false",               formatCellValue: function (value) {                  if (value) {                     return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                  }               }            }, {               name: "ownerName",               title: "Owner",               align: "center",               includeInRecordSummary: false,               showGridSummary: false,               showGroupSummary: false,               canGroupBy: true,               width: 120            }, {               name: "manager1Name",               title: "Manager",               align: "center",               includeInRecordSummary: false,               showGridSummary: false,               showGroupSummary: false,               width: 120,               canGroupBy: true,               showIf: "false"            }, {               name: "estimatedContingencey",               title: "Est. Contingency",               type: "float",               align: "center",               canGroupBy: false,               groupPrecision: 1,               width: 120,               showIf: "false",               summaryFunction: "sum",               showGridSummary: true,               showGroupSummary: true,               align: "right",               formatCellValue: function (value) {                  if (isc.isA.Number(value)) {                     if (value == 0) {                        return "-";                     } else {                        return value.toCurrencyString("$");                     }                  } else {                     var val = parseFloat(value);                     if (isc.isA.Number(val)) {                        if (val == 0) {                           return "-";                        } else {                           return val.toCurrencyString("$");                        }                     }                  }                  return "-";               }            }, {               name: "mitigationCost",               title: "Mitigation Cost",               type: "float",               align: "center",               canGroupBy: false,               groupPrecision: 1,               width: 120,               showIf: "false",               summaryFunction: "sum",               showGridSummary: true,               showGroupSummary: true,               align: "right",               formatCellValue: function (value) {                  if (isc.isA.Number(value)) {                     if (value == 0) {                        return "-";                     } else {                        return value.toCurrencyString("$");                     }                  } else {                     var val = parseFloat(value);                     if (isc.isA.Number(val)) {                        if (val == 0) {                           return "-";                        } else {                           return val.toCurrencyString("$");                        }                     }                  }                  return "-";               }            }, {               name: "preMitContingency",               title: "Contingency",               type: "float",               align: "center",               canGroupBy: false,               groupPrecision: 1,               width: 100,               showIf: "false",               formatCellValue: function (value, record, rowNum, colNum) {                  if (record.treated) {                     return record.postMitContingency;                  } else {                     return record.preMitContingency;                  }               },               summaryFunction: "sum",               showGridSummary: true,               showGroupSummary: true,               align: "right",               formatCellValue: function (value) {                  if (isc.isA.Number(value)) {                     if (value == 0) {                        return "-";                     } else {                        return value.toCurrencyString("$");                     }                  } else {                     var val = parseFloat(value);                     if (isc.isA.Number(val)) {                        if (val == 0) {                           return "-";                        } else {                           return val.toCurrencyString("$");                        }                     }                  }                  return "-";               }            }, {               name: "contingencyPercentile",               title: "Cont. Percentile",               type: "float",               align: "center",               includeInRecordSummary: false,               showGridSummary: false,               showGroupSummary: false,               canGroupBy: false,               groupPrecision: 1,               width: 120,               showIf: "false"            }, {               name: "treatedImpact",               title: "Treated Impact",               type: "float",               align: "center",               includeInRecordSummary: false,               showGridSummary: false,               showGroupSummary: false,               canGroupBy: true,               groupPrecision: 1,               width: 40,               formatCellValue: function (value) {                  if (isc.isA.Number(value)) {                     return Math.floor(value);                  }                  return value;               },               showIf: "false"            }, {               name: "treatedProb",               title: "Treated Prob",               type: "float",               align: "center",               includeInRecordSummary: false,               showGridSummary: false,               showGroupSummary: false,               canGroupBy: true,               groupPrecision: 1,               width: 40,               formatCellValue: function (value) {                  if (isc.isA.Number(value)) {                     return Math.floor(value);                  }                  return value;               },               showIf: "false"            }, {               name: "inherentImpact",               title: "Inherent Impact",               type: "float",               align: "center",               includeInRecordSummary: false,               showGridSummary: false,               showGroupSummary: false,               canGroupBy: true,               groupPrecision: 1,               width: 40,               formatCellValue: function (value) {                  if (isc.isA.Number(value)) {                     return Math.floor(value);                  }                  return value;               },               showIf: "false"            }, {               name: "inherentProb",               title: "Inherent Prob",               type: "float",               includeInRecordSummary: false,               showGridSummary: false,               showGroupSummary: false,               canGroupBy: true,               groupPrecision: 1,               align: "center",               width: 40,               formatCellValue: function (value) {                  if (isc.isA.Number(value)) {                     return Math.floor(value);                  }                  return value;               },               showIf: "false"            }, {               name: "riskID",               title: "Risk ID",               type: "integer",               includeInRecordSummary: false,               showGridSummary: false,               showGroupSummary: false,               align: "center",               width: 0,               canGroupBy: false,               showIf: "false"            }, {               name: "active",               align: "center",               includeInRecordSummary: false,               showGridSummary: false,               showGroupSummary: false,               title: "Active",               type: "boolean",               canGroupBy: true,               width: 55,               getGroupTitle: function (groupValue, groupNode, field, fieldName, grid) {                  if (groupValue) {                     return "Active Risks";                  } else {                     return "Dormant Risks";                  }               }            }, {               name: "treated",               align: "center",               includeInRecordSummary: false,               showGridSummary: false,               showGroupSummary: false,               title: "Treated",               type: "boolean",               canGroupBy: true,               width: 55            }],            // Properties of the details viewer for row            // expansion            expansionDetailsProperties: {               height: 200,               width: "100%",               overflow: "scroll",               fields: [{                  name: "riskProjectCode",                  title: "Risk Code",                  canEdit: false,                  width: 60,                  align: "left"               }, {                  name: "title",                  title: "Title",                  align: "left",                  width: "100%"               }, {                  name: "description",                  title: "Description",                  align: "left",                  width: "100%"               }, {                  name: "startExposure",                  title: "Start of Exposure",                  type: "date",                  align: "center",                  width: 120,                  formatCellValue: function (value) {                     if (value) {                        return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                     }                  }               }, {                  name: "endExposure",                  title: "End of Exposure",                  type: "date",                  align: "center",                  width: 120,                  formatCellValue: function (value) {                     if (value) {                        return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                     }                  }               }, {                  name: "ownerName",                  title: "Owner",                  align: "center",                  width: 120               }, {                  name: "manager1Name",                  title: "Manager",                  align: "center",                  width: 120               }, {                  name: "treatedImpact",                  title: "Treated Impact",                  type: "double",                  align: "center",                  formatCellValue: function (value) {                     if (isc.isA.Number(value)) {                        return Math.floor(value);                     }                     return value;                  }               }, {                  name: "treatedProb",                  title: "Treated Prob",                  type: "double",                  align: "center",                  formatCellValue: function (value) {                     if (isc.isA.Number(value)) {                        return Math.floor(value);                     }                     return value;                  }               }, {                  name: "inherentImpact",                  title: "Inherent Impact",                  type: "double",                  align: "center",                  formatCellValue: function (value) {                     if (isc.isA.Number(value)) {                        return Math.floor(value);                     }                     return value;                  }               }, {                  name: "inherentProb",                  title: "Inherent Prob",                  type: "double",                  align: "center",                  formatCellValue: function (value) {                     if (isc.isA.Number(value)) {                        return Math.floor(value);                     }                     return value;                  }               }, {                  name: "treated",                  title: "Treated",                  type: "boolean",                  width: 55,                  formatCellValue: function (value) {                     if (value) {                        return "Yes";                     }                     return "No";                  }               }]            }         });         this.RiskTable2 = isc.ListGrid.create({            ID: "RiskTable2",            visibility: "hidden",            headerHeight: 40,            dataSource: riskLiteDS,            alternateRecordStyles: true,            canDragSelect: false,            emptyMessage: "Select the Risk Project from the Navigator",            canDragRecordsOut: true,            sortField: "currentTolerance",            sortDirection: "descending",            hoverWidth: 200,            hoverHeight: 20,            groupStartOpen: "all",            cellContextClick: function () {               riskTableContextMenu.showContextMenu();               return false;            },            recordDoubleClick: function () {               qoRiskController.riskID = this.getSelectedRecord().riskID;               getRiskAndDisplayInt(qoRiskController.riskID, true);            },            getBaseStyle: function (record, rowNum, colNum) {               switch (colNum) {               case 0:                  return "rankItem" + record.currentTolerance;                  break;               case 2:                  if (record.dateIDRev == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               case 3:                  if (record.dateIDApp == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               case 4:                  if (record.dateEvalRev == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               case 5:                  if (record.dateEvalApp == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               case 6:                  if (record.dateMitRev == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               case 7:                  if (record.dateMitApp == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               default:                  return this.Super("getBaseStyle", arguments);               }            },            fields: [{               name: "riskProjectCode",               title: "Risk Code",               width: 95,               canGroupBy: false,               align: "left",               formatCellValue: function (value, record) {                  var val = value;                  if (record.summaryRisk) {                     val = value + "*";                  }                  if (record.promotionCode != "-") {                     return val + ' (' + record.toProjCode + ')';                  } else {                     return val;                  }               }            }, {               name: "title",               title: "Title",               align: "left",               canGroupBy: true,               width: "100%"            }, {               name: "dateIDRev",               title: "Reviewed",               align: "center",               width: 70            }, {               name: "dateIDApp",               title: "Approved",               align: "center",               width: 70            }, {               name: "dateEvalRev",               title: "Reviewed",               align: "center",               width: 70            }, {               name: "dateEvalApp",               title: "Approved",               align: "center",               width: 70            }, {               name: "dateMitRev",               title: "Reviewed",               align: "center",               width: 70            }, {               name: "dateMitApp",               title: "Approved",               align: "center",               width: 70            }, {               name: "treated",               title: "Treated",               type: "boolean",               canGroupBy: true,               width: 55            }],            headerSpans: [{               fields: ["dateEntered", "dateIDRev", "dateIDApp"],               title: "Identification"            }, {               fields: ["dateEvalRev", "dateEvalApp"],               title: "Evaluation"            }, {               fields: ["dateMitRev", "dateMitApp"],               title: "Mitigation"            }]         });         this.RiskTable3 = isc.ListGrid.create({            ID: "RiskTable3",            visibility: "hidden",            headerHeight: 40,            dataSource: riskLiteParentDS,            alternateRecordStyles: true,            sortField: "currentTolerance",            sortDirection: "descending",            canDragSelect: false,            emptyMessage: "Select the Risk Project from the Navigator",            canDragRecordsOut: true,            hoverWidth: 200,            hoverHeight: 20,            groupStartOpen: "all",            cellContextClick: function () {               riskTableContextMenu.showContextMenu();               return false;            },            recordDoubleClick: function () {               qoRiskController.riskID = this.getSelectedRecord().riskID;               getRiskAndDisplayInt(qoRiskController.riskID, true);            },            getBaseStyle: function (record, rowNum, colNum) {               switch (colNum) {               case 0:                  return "rankItem" + record.currentTolerance;                  break;               case 2:                  if (record.dateIDRev == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               case 3:                  if (record.dateIDApp == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               case 4:                  if (record.dateEvalRev == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               case 5:                  if (record.dateEvalApp == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               case 6:                  if (record.dateMitRev == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               case 7:                  if (record.dateMitApp == null) {                     return "alertAudit";                  } else {                     return this.Super("getBaseStyle", arguments);                  }                  break;               default:                  return this.Super("getBaseStyle", arguments);               }            },            fields: [{               name: "riskProjectCode",               title: "Risk Code",               width: 80,               canGroupBy: false,               align: "left",               formatCellValue: function (value, record) {                  var val = value;                  if (record.summaryRisk) {                     val = value + "*";                  }                  if (record.promotionCode != "-") {                     return val + ' (' + record.toProjCode + ')';                  } else {                     return val;                  }               }            }, {               name: "title",               title: "Title",               align: "left",               canGroupBy: true,               width: "100%"            }, {               name: "dateIDRev",               title: "Reviewed",               align: "center",               width: 70            }, {               name: "dateIDApp",               title: "Approved",               align: "center",               width: 70            }, {               name: "dateEvalRev",               title: "Reviewed",               align: "center",               width: 70            }, {               name: "dateEvalApp",               title: "Approved",               align: "center",               width: 70            }, {               name: "dateMitRev",               title: "Reviewed",               align: "center",               width: 70            }, {               name: "dateMitApp",               title: "Approved",               align: "center",               width: 70            }, {               name: "treated",               title: "Treated",               type: "boolean",               canGroupBy: true,               width: 55            }],            headerSpans: [{               fields: ["dateEntered", "dateIDRev", "dateIDApp"],               title: "Identification"            }, {               fields: ["dateEvalRev", "dateEvalApp"],               title: "Evaluation"            }, {               fields: ["dateMitRev", "dateMitApp"],               title: "Mitigation"            }]         });         this.RiskTableFilterPane = createRiskTableFilterPane();         try {            isc.Menu.create({               ID: "explorerActionMenu",               showShadow: true,               shadowDepth: 10            });            // isc.Menu.create({            // ID : "selectedRiskActionMenu",            // showShadow : true,            // shadowDepth : 10            // });            isc.DynamicForm.create({               ID: "viewSelector",               width: 150,               minWidth: 150,               numCols: 1,               fields: [{                  name: "selectView",                  showTitle: false,                  width: "*",                  change: function (form, item, value, oldValue) {                     if (value == "audit") {                        RiskTable2.show();                        clearFilterGroup1();                        RiskTable.hide();                        RiskTable3.hide();                        viewState = 'Audit';                        filterGroup2Changed();                        setTolMatrix(project);                     } else if (value == "detail") {                        RiskTable.show();                        RiskTable2.hide();                        RiskTable3.hide();                        clearFilterGroup1();                        viewState = 'Regular';                        filterGroup2Changed();                        setTolMatrix(project);                     } else {                        RiskTable3.show();                        clearFilterGroup1();                        RiskTable.hide();                        RiskTable2.hide();                        viewState = 'Rolled';                        filterGroup2Changed();                        setTolMatrix(project);                     }                  },                  valueMap: {                     "detail": "Detail View",                     "audit": "Audit View",                     "rollup": "Summary Risks"                  },                  defaultValue: "detail"               }]            });            isc.ToolStrip.create({               ID: "buttonLayout",               width: "100%",               height: 24,               border: "1px solid " + qrmCtrlColor,               backgroundColor: qrmCtrlColor,               members: [               isc.Label.create({                  contents: "* Designates a Summary or Propogated Risk. (XX) Identifies the risk project the risk has been promoted to",                  height: 20,                  width: "100%"               }), isc.ToolStripMenuButton.create({                  title: "Action",                  showRollOver: false,                  menu: explorerActionMenu               }), isc.ToolStripButton.create({                  ID: "underlined",                  icon: "[SKIN]/actions/filter.png",                  actionType: "checkbox",                  action: function () {                     if (qoQRM.RiskTablePane.RiskTableFilterPane.isVisible()) {                        qoQRM.RiskTablePane.RiskTableFilterPane.hide();                     } else {                        qoQRM.RiskTablePane.RiskTableFilterPane.show();                     }                  }               }), viewSelector]            });         } catch (e) {            alert(e.message);         }         this.addMembers([this.RiskTableFilterPane, buttonLayout, this.RiskTable, this.RiskTable2, this.RiskTable3]);      },      setProject: function () {         if (qoQRM.explorerSetProject) {            try {               clearFiltersBtn.disable();               DynamicFormOwner.getItem("ownerID").setValueMap(qoValueMap.owner);               DynamicFormOwner.getItem("manager1ID").setValueMap(qoValueMap.manager);               DynamicFormOwner.getItem("primCatID").setValueMap(qoValueMap.categories);               clearFilterGroup2();               clearFilterGroup1();               if (typeof (project) != "undefined") {                  filterGroup2Changed();                  clearFilterGroup1();                  setTolMatrix(project);               }            } catch (e) {               clearFilterGroup2();               clearFilterGroup1();               qoQRM.RiskTablePane.RiskTable.fetchData({                  "PROJECTID": -100,                  "DESCENDANTS": false               });            }         }         qoQRM.explorerSetProject = true;      },      navigateAway: function () {         return true;      }   });}function createRiskTableFilterPane() {   isc.HTMLFlow.create({      ID: "ImgTreatedMat",      dynamicContents: true,      width: 165,      contents: "${qoQRM.tMat}"   });   isc.HTMLFlow.create({      ID: "ImgUnTreatedMat",      dynamicContents: true,      width: 165,      contents: "${qoQRM.uMat}"   });   isc.DynamicForm.create({      fields: [{         type: "header",         defaultValue: "Exposure Status",         startRow: true      }, {         showTitle: false,         name: "Active",         defaultValue: true,         changed: "filterGroup2Changed()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "Pending",         defaultValue: true,         changed: "filterGroup2Changed()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "In Active",         defaultValue: true,         changed: "filterGroup2Changed()",         _constructor: "CheckboxItem"      }, {         type: "header",         defaultValue: "Treatment Status",         startRow: true      }, {         showTitle: false,         name: "Treated",         defaultValue: true,         changed: "filterGroup2Changed()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "Untreated",         defaultValue: true,         changed: "filterGroup2Changed()",         _constructor: "CheckboxItem"      }],      numCols: 1,      ID: "DynamicFormStatus",      autoDraw: false   });   isc.DynamicForm.create({      fields: [{         type: "header",         defaultValue: "Risk Owner",         startRow: true      }, {         showTitle: false,         name: "ownerID",         changed: "filterGroup2Changed()",         allowEmptyValue: true,         _constructor: "SelectItem"      }, {         type: "header",         defaultValue: "Risk Manager",         startRow: true      }, {         showTitle: false,         name: "manager1ID",         changed: "filterGroup2Changed()",         allowEmptyValue: true,         _constructor: "SelectItem"      }, {         type: "header",         defaultValue: "Risk Category",         startRow: true      }, {         showTitle: false,         name: "primCatID",         allowEmptyValue: true,         changed: "filterGroup2Changed()",         _constructor: "SelectItem"      }],      numCols: 1,      ID: "DynamicFormOwner",      autoDraw: false   });   isc.HStack.create({      membersMargin: 15,      margin: 2,      backgroundColor: qrmCtrlColor,      layoutMargin: 5,      height: "180",      ID: "FilterGroup1",      members: [isc.VLayout.create({         membersMargin: 5,         members: [isc.DynamicForm.create({            fields: [{               type: "header",               defaultValue: "Treated Risks",               startRow: true            }],            numCols: 1,            autoDraw: false         }), ImgTreatedMat],         autoDraw: false      }), isc.VLayout.create({         membersMargin: 5,         members: [isc.DynamicForm.create({            fields: [{               type: "header",               defaultValue: "Un Treated Risks",               startRow: true            }],            numCols: 1,            autoDraw: false         }), ImgUnTreatedMat],         autoDraw: false      })],      autoDraw: false   });   isc.DynamicForm.create({      numCols: 2,      ID: "DynamicFormTolerance",      autoDraw: false,      titleWidth: 40,      fields: [{         type: "header",         defaultValue: "Tolerance",         changed: "filterGroup2Changed()",         startRow: true      }, {         showTitle: false,         name: "Extreme",         defaultValue: true,         changed: "filterGroup2Changed()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "High",         defaultValue: true,         changed: "filterGroup2Changed()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "Significant",         defaultValue: true,         changed: "filterGroup2Changed()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "Moderate",         defaultValue: true,         changed: "filterGroup2Changed()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "Low",         defaultValue: true,         changed: "filterGroup2Changed()",         _constructor: "CheckboxItem"      }, {         type: "header",         defaultValue: "Risk Code:",         startRow: true      }, {         name: "riskID",         type: "text",         showTitle: false,         characterCasing: "upper",         width: 100,         colSpan: 2,         keyPress: function (item, form, keyName, characterValue) {            if (keyName == "Enter" || keyName == "Tab") {               try {                  qrmFindRisk(item.getValue());               } catch (e) {                  alert("Risk Table Line 1065" + e.message);               }            }         }      }, {         _constructor: "RowSpacerItem"      }, {         _constructor: "Button",         align: "right",         colSpan: 2,         endRow: true,         disabled: true,         title: "Clear Filters",         ID: "clearFiltersBtn",         click: function () {            try {               qoQRM.explorerSetProject = true;               clearFilterGroup2();               clearFilterGroup1();               qoQRM.RiskTablePane.setProject();               this.disable();            } catch (e) {               alert(e.message);            }         }      }]   });   isc.HStack.create({      membersMargin: 15,      backgroundColor: qrmCtrlColor,      margin: 2,      layoutMargin: 5,      height: "180",      ID: "FilterGroup2",      members: [DynamicFormOwner, DynamicFormStatus, DynamicFormTolerance],      autoDraw: false   });   return isc.HStack.create({      backgroundColor: qrmCtrlColor,      membersMargin: 15,      height: "180",      members: [FilterGroup1, FilterGroup2],      autoDraw: false   });}function setTolMatrix(proj) {   isc.RPCManager.sendRequest({      prompt: "Retrieving Risk Project",      evalResult: false,      showPrompt: true,      params: {         "PROJECTID": proj.projectID,         "DESCENDANTS": checkDescendants.getValue(),         "ROLLED": (viewState == "Rolled") ? true : false      },      callback: function (rpcResponse, data, rpcRequest) {         try {            setTolMatixCB(JSON.parse(data, dateParser));         } catch (e) {            alert(e.message);         }      },      actionURL: "./getRiskProject"   });}function setTolMatixCB(proj) {   qoQRM.selectedCellClassName = null;   var valt = proj.extraStuff.split(";")[0].split(":");   var valu = proj.extraStuff.split(";")[1].split(":");   var tolString = proj.matrix.tolString;   var maxImpact = proj.matrix.maxImpact;   var maxProb = proj.matrix.maxProb;   qoQRM.uMat = "<table border='1' cellspacing='0' cellpadding='0' style='cursor:pointer;cursor:hand'>";   qoQRM.tMat = "<table border='1' cellspacing='0' cellpadding='0' style='cursor:pointer;cursor:hand'>";   qoQRM.uMatRef = "<table border='1' cellspacing='0' cellpadding='0' style='cursor:pointer;cursor:hand'>";   qoQRM.tMatRef = "<table border='1' cellspacing='0' cellpadding='0' style='cursor:pointer;cursor:hand'>";   for (var prob = maxProb; prob > 0; prob--) {      qoQRM.uMat = qoQRM.uMat + "<tr>";      qoQRM.tMat = qoQRM.tMat + "<tr>";      qoQRM.uMatRef = qoQRM.uMatRef + "<tr>";      qoQRM.tMatRef = qoQRM.tMatRef + "<tr>";      for (var impact = 1; impact <= maxImpact; impact++) {         var index = (prob - 1) * maxImpact + impact - 1;         var tol = tolString.substring(index, index + 1);         var tolClass = "cellExtreme";         if (tol == "1") {            tolClass = "cellLow";         }         if (tol == "2") {            tolClass = "cellModerate";         }         if (tol == "3") {            tolClass = "cellSignificant";         }         if (tol == "4") {            tolClass = "cellHigh";         }         if (tol == "5") {            tolClass = "cellExtreme";         }         if (BrowserDetect.browser == "Explorer") {            qoQRM.uMat = qoQRM.uMat + "<td id=\"uCell" + impact + "p" + prob + "\" width=\"28\" height=\"28\" class=\"" + tolClass + "\" onmouseout=\"if (this.className != 'qrmCellSelected'){this.className='" + tolClass + "'}\" onmouseover=\"if (this.className != 'qrmCellSelected'){this.className='matCellHighLight'}\" onClick=\"matrixFilter(" + impact + ", " + prob + ", false, this.id, '" + tolClass + "')\"><span class=\"matText\">" + valu[(prob - 1) * maxImpact + impact - 1] + "</span></td>";            qoQRM.tMat = qoQRM.tMat + "<td id=\"tCell" + impact + "p" + prob + "\" width=\"28\" height=\"28\" class=\"" + tolClass + "\" onmouseout=\"if (this.className != 'qrmCellSelected'){this.className='" + tolClass + "'}\" onmouseover=\"if (this.className != 'qrmCellSelected'){this.className='matCellHighLight'}\" onClick=\"matrixFilter(" + impact + ", " + prob + ", true, this.id, '" + tolClass + "')\"><span class=\"matText\">" + valt[(prob - 1) * maxImpact + impact - 1] + "</span></td>";            qoQRM.uMatRef = qoQRM.uMatRef + "<td id=\"uCell" + impact + "p" + prob + "\" width=\"28\" height=\"28\" class=\"" + tolClass + "\" onmouseout=\"if (this.className != 'qrmCellSelected'){this.className='" + tolClass + "'}\" onmouseover=\"if (this.className != 'qrmCellSelected'){this.className='matCellHighLight'}\" onClick=\"RiskTableWindow.selectTab('ExplorerPaneID');matrixFilter(" + impact + ", " + prob + ", false, this.id, '" + tolClass + "')\"><span class=\"matText\">" + valu[(prob - 1) * maxImpact + impact - 1] + "</span></td>";            qoQRM.tMatRef = qoQRM.tMatRef + "<td id=\"tCell" + impact + "p" + prob + "\" width=\"28\" height=\"28\" class=\"" + tolClass + "\" onmouseout=\"if (this.className != 'qrmCellSelected'){this.className='" + tolClass + "'}\" onmouseover=\"if (this.className != 'qrmCellSelected'){this.className='matCellHighLight'}\" onClick=\"RiskTableWindow.selectTab('ExplorerPaneID');matrixFilter(" + impact + ", " + prob + ", true, this.id, '" + tolClass + "')\"><span class=\"matText\">" + valt[(prob - 1) * maxImpact + impact - 1] + "</span></td>";         } else {            qoQRM.uMat = qoQRM.uMat + "<td id=\"uCell" + impact + "p" + prob + "\" width=\"28\" height=\"28\" class=\"" + tolClass + "\" onClick=\"matrixFilter(" + impact + ", " + prob + ", false, this.id)\"><span class=\"matText\">" + valu[(prob - 1) * maxImpact + impact - 1] + "</span></td>";            qoQRM.tMat = qoQRM.tMat + "<td id=\"tCell" + impact + "p" + prob + "\" width=\"28\" height=\"28\" class=\"" + tolClass + "\" onClick=\"matrixFilter(" + impact + ", " + prob + ", true, this.id)\"><span class=\"matText\">" + valt[(prob - 1) * maxImpact + impact - 1] + "</span></td>";            qoQRM.uMatRef = qoQRM.uMatRef + "<td id=\"uCell" + impact + "p" + prob + "\" width=\"28\" height=\"28\" class=\"" + tolClass + "\" onClick=\"RiskTableWindow.selectTab('ExplorerPaneID');matrixFilter(" + impact + ", " + prob + ", false, this.id)\"><span class=\"matText\">" + valu[(prob - 1) * maxImpact + impact - 1] + "</span></td>";            qoQRM.tMatRef = qoQRM.tMatRef + "<td id=\"tCell" + impact + "p" + prob + "\" width=\"28\" height=\"28\" class=\"" + tolClass + "\" onClick=\"RiskTableWindow.selectTab('ExplorerPaneID');matrixFilter(" + impact + ", " + prob + ", true, this.id)\"><span class=\"matText\">" + valt[(prob - 1) * maxImpact + impact - 1] + "</span></td>";         }      }      qoQRM.uMat = qoQRM.uMat + "</tr>";      qoQRM.tMat = qoQRM.tMat + "</tr>";      qoQRM.uMatRef = qoQRM.uMatRef + "</tr>";      qoQRM.tMatRef = qoQRM.tMatRef + "</tr>";   }   qoQRM.uMatRef = qoQRM.uMatRef + "</table>";   qoQRM.tMatRef = qoQRM.tMatRef + "</table>";   ImgTreatedMat.markForRedraw();   ImgUnTreatedMat.markForRedraw();   try {      ImgTreatedMatRef.markForRedraw();      ImgUnTreatedMatRef.markForRedraw();   } catch (e) {      // Do nothing   }}function matrixFilter(impact, prob, treated, id, tolClass) {   if (qoQRM.selectedCellID != null && qoQRM.selectedCellClassName != null) {      document.getElementById(qoQRM.selectedCellID).className = qoQRM.selectedCellClassName;   }   qoQRM.selectedCellID = id;   if (tolClass != null) {      qoQRM.selectedCellClassName = tolClass;   } else {      qoQRM.selectedCellClassName = document.getElementById(id).className;   }   document.getElementById(id).className = "qrmCellSelected";   clearFilterGroup2();   clearFiltersBtn.enable();   if (viewState == "Regular") {      qoQRM.RiskTablePane.RiskTable.fetchData({         "DESCENDANTS": checkDescendants.getValue(),         "PROJECTID": project.projectID,         "OPERATION": "getRiskLiteFetch",         "TREATEDPROB": treated ? prob : -1,         "TREATEDIMPACT": treated ? impact : -1,         "UNTREATEDPROB": treated ? -1 : prob,         "UNTREATEDIMPACT": treated ? -1 : impact,         "TREATED": treated      });   } else if (viewState == "Audit") {      qoQRM.RiskTablePane.RiskTable2.fetchData({         "DESCENDANTS": checkDescendants.getValue(),         "PROJECTID": project.projectID,         "OPERATION": "getRiskLiteFetch",         "TREATEDPROB": treated ? prob : -1,         "TREATEDIMPACT": treated ? impact : -1,         "UNTREATEDPROB": treated ? -1 : prob,         "UNTREATEDIMPACT": treated ? -1 : impact,         "TREATED": treated      });   } else if (viewState == "Rolled") {      qoQRM.RiskTablePane.RiskTable3.fetchData({         "ROLLED": true,         "DESCENDANTS": checkDescendants.getValue(),         "PROJECTID": project.projectID,         "OPERATION": "getRiskLiteFetch",         "TREATEDPROB": treated ? prob : -1,         "TREATEDIMPACT": treated ? impact : -1,         "UNTREATEDPROB": treated ? -1 : prob,         "UNTREATEDIMPACT": treated ? -1 : impact,         "TREATED": treated      });   }}function ownerFind(id, tol) {   muliFind(id, null, null, null, null, null, tol);}function managerFind(id, tol) {   muliFind(null, id, null, null, null, null, tol);}function statusFind(id, tol) {   muliFind(null, null, null, id, null, null, tol);}function categoryFind(id, tol) {   muliFind(null, null, id, null, null, null, tol);}function toleranceFind(tol) {   muliFind(null, null, null, null, null, null, tol);}function projectToleranceFind(tol, projID) {   // Ensure that the risk explorer is not automatically updated until the   // tolerance conditions are set   qoQRM.explorerSetProject = false;   if (qrmProjectMap.get(projID) != null) {      project = qrmProjectMap.get(projID);      qoQRM.singlePhase = project.singlePhase;      updateSelectedProject();      muliFind(null, null, null, null, null, null, tol);   } else {      isc.RPCManager.sendRequest({         prompt: "Retrieving Risk Project",         showPrompt: true,         evalResult: false,         params: {            "PROJECTID": projID         },         callback: function (rpcResponse, data, rpcRequest) {            try {               project = JSON.parse(data, dateParser);               if (!project) {                  alert("The risk repository has been updated.\n The risk project you selected is no longer available.");                  getUserProjects();               } else {                  qoQRM.singlePhase = project.singlePhase;                  updateSelectedProject();                  qrmProjectMap.put(projID, project);               }               muliFind(null, null, null, null, null, null, tol);               setTolMatrix(project);            } catch (e) {               alert("Risk Table Line 1318" + e.message);               getUserProjects();            }         },         actionURL: "./getRiskProject"      });   }}function muliFind(owner, manager, category, status, treat, untreat, tolerance) {   // Switch to the Risk Explorer   RiskTableWindow.selectTab(0);   // screenSelector.getItem("screenChoice").setValue(0);   // Prevent the explorer from resetting current project   qoQRM.explorerSetProject = false;   qoCurrent.PaneNum = 0;   qoCurrent.Pane.navigateAway();   // Clear Out everything first   DynamicFormTolerance.getItem("Extreme").setValue(false);   DynamicFormTolerance.getItem("High").setValue(false);   DynamicFormTolerance.getItem("Significant").setValue(false);   DynamicFormTolerance.getItem("Moderate").setValue(false);   DynamicFormTolerance.getItem("Low").setValue(false);   DynamicFormStatus.getItem("Active").setValue(false);   DynamicFormStatus.getItem("Pending").setValue(false);   DynamicFormStatus.getItem("In Active").setValue(false);   DynamicFormStatus.getItem("Treated").setValue(true);   DynamicFormStatus.getItem("Untreated").setValue(true);   DynamicFormOwner.getItem("primCatID").setValue(null);   DynamicFormOwner.getItem("ownerID").setValue(null);   DynamicFormOwner.getItem("manager1ID").setValue(null);   DynamicFormTolerance.getItem("riskID").setValue(null);   if (treat != null && !treat) {      DynamicFormStatus.getItem("Treated").setValue(false);   }   if (untreat != null && !untreat) {      DynamicFormStatus.getItem("Untreated").setValue(false);   }   if (tolerance == null || tolerance == "Extreme") {      DynamicFormTolerance.getItem("Extreme").setValue(true);   }   if (tolerance == null || tolerance == "High") {      DynamicFormTolerance.getItem("High").setValue(true);   }   if (tolerance == null || tolerance == "Significant") {      DynamicFormTolerance.getItem("Significant").setValue(true);   }   if (tolerance == null || tolerance == "Moderate") {      DynamicFormTolerance.getItem("Moderate").setValue(true);   }   if (tolerance == null || tolerance == "Low") {      DynamicFormTolerance.getItem("Low").setValue(true);   }   if (status == null || status == "Active") {      DynamicFormStatus.getItem("Active").setValue(true);   }   if (status == null || status == "Pending") {      DynamicFormStatus.getItem("Pending").setValue(true);   }   if (status == null || status == "In+Active") {      DynamicFormStatus.getItem("In Active").setValue(true);   }   if (owner != null) {      DynamicFormOwner.getItem("ownerID").setValue(owner);   }   if (manager != null) {      DynamicFormOwner.getItem("manager1ID").setValue(manager);   }   if (category != null) {      DynamicFormOwner.getItem("primCatID").setValue(category);   }   filterGroup2Changed();}function filterGroup2Changed() {   clearFiltersBtn.enable();   clearFilterGroup1();   if (qoQRM.navigatorInit) {      if (viewState == "Regular") {         qoQRM.RiskTablePane.RiskTable.fetchData({            "DESCENDANTS": checkDescendants.getValue(),            "PROJECTID": projectID,            "OPERATION": "getRiskLiteFetch",            "PROCESSFILTER": true,            "TOLEX": DynamicFormTolerance.getItem("Extreme").getValue(),            "TOLHIGH": DynamicFormTolerance.getItem("High").getValue(),            "TOLSIG": DynamicFormTolerance.getItem("Significant").getValue(),            "TOLMOD": DynamicFormTolerance.getItem("Moderate").getValue(),            "TOLLOW": DynamicFormTolerance.getItem("Low").getValue(),            "STATACTIVE": DynamicFormStatus.getItem("Active").getValue(),            "STATPENDING": DynamicFormStatus.getItem("Pending").getValue(),            "STATINACTIVE": DynamicFormStatus.getItem("In Active").getValue(),            "STATTREATED": DynamicFormStatus.getItem("Treated").getValue(),            "STATUNTREATED": DynamicFormStatus.getItem("Untreated").getValue(),            "CATID": (typeof (DynamicFormOwner.getItem("primCatID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("primCatID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("primCatID").getValue(),            "OWNERID": (typeof (DynamicFormOwner.getItem("ownerID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("ownerID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("ownerID").getValue(),            "MANAGERID": (typeof (DynamicFormOwner.getItem("manager1ID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("manager1ID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("manager1ID").getValue(),            "NOCACHE": Math.random()         });      } else if (viewState == "Audit") {         qoQRM.RiskTablePane.RiskTable2.fetchData({            "DESCENDANTS": checkDescendants.getValue(),            "PROJECTID": projectID,            "OPERATION": "getRiskLiteFetch",            "PROCESSFILTER": true,            "TOLEX": DynamicFormTolerance.getItem("Extreme").getValue(),            "TOLHIGH": DynamicFormTolerance.getItem("High").getValue(),            "TOLSIG": DynamicFormTolerance.getItem("Significant").getValue(),            "TOLMOD": DynamicFormTolerance.getItem("Moderate").getValue(),            "TOLLOW": DynamicFormTolerance.getItem("Low").getValue(),            "STATACTIVE": DynamicFormStatus.getItem("Active").getValue(),            "STATPENDING": DynamicFormStatus.getItem("Pending").getValue(),            "STATINACTIVE": DynamicFormStatus.getItem("In Active").getValue(),            "STATTREATED": DynamicFormStatus.getItem("Treated").getValue(),            "STATUNTREATED": DynamicFormStatus.getItem("Untreated").getValue(),            "CATID": (typeof (DynamicFormOwner.getItem("primCatID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("primCatID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("primCatID").getValue(),            "OWNERID": (typeof (DynamicFormOwner.getItem("ownerID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("ownerID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("ownerID").getValue(),            "MANAGERID": (typeof (DynamicFormOwner.getItem("manager1ID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("manager1ID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("manager1ID").getValue(),            "NOCACHE": Math.random()         });      } else if (viewState == "Rolled") {         qoQRM.RiskTablePane.RiskTable3.fetchData({            "DESCENDANTS": checkDescendants.getValue(),            "PROJECTID": projectID,            "OPERATION": "getRiskLiteFetch",            "PROCESSFILTER": true,            "ROLLED": true,            "TOLEX": DynamicFormTolerance.getItem("Extreme").getValue(),            "TOLHIGH": DynamicFormTolerance.getItem("High").getValue(),            "TOLSIG": DynamicFormTolerance.getItem("Significant").getValue(),            "TOLMOD": DynamicFormTolerance.getItem("Moderate").getValue(),            "TOLLOW": DynamicFormTolerance.getItem("Low").getValue(),            "STATACTIVE": DynamicFormStatus.getItem("Active").getValue(),            "STATPENDING": DynamicFormStatus.getItem("Pending").getValue(),            "STATINACTIVE": DynamicFormStatus.getItem("In Active").getValue(),            "STATTREATED": DynamicFormStatus.getItem("Treated").getValue(),            "STATUNTREATED": DynamicFormStatus.getItem("Untreated").getValue(),            "CATID": (typeof (DynamicFormOwner.getItem("primCatID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("primCatID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("primCatID").getValue(),            "OWNERID": (typeof (DynamicFormOwner.getItem("ownerID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("ownerID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("ownerID").getValue(),            "MANAGERID": (typeof (DynamicFormOwner.getItem("manager1ID").getValue()) == "object" || typeof (DynamicFormOwner.getItem("manager1ID").getValue()) == "undefined") ? -1 : DynamicFormOwner.getItem("manager1ID").getValue(),            "NOCACHE": Math.random()         });      }   }}function clearFilterGroup2() {   DynamicFormTolerance.getItem("Extreme").setValue(true);   DynamicFormTolerance.getItem("High").setValue(true);   DynamicFormTolerance.getItem("Significant").setValue(true);   DynamicFormTolerance.getItem("Moderate").setValue(true);   DynamicFormTolerance.getItem("Low").setValue(true);   DynamicFormStatus.getItem("Active").setValue(true);   DynamicFormStatus.getItem("Pending").setValue(true);   DynamicFormStatus.getItem("In Active").setValue(true);   DynamicFormStatus.getItem("Treated").setValue(true);   DynamicFormStatus.getItem("Untreated").setValue(true);   DynamicFormOwner.getItem("primCatID").setValue(null);   DynamicFormOwner.getItem("ownerID").setValue(null);   DynamicFormOwner.getItem("manager1ID").setValue(null);   DynamicFormTolerance.getItem("riskID").setValue(null);}function clearFilterGroup1() {      if (qoQRM.selectedCellID != null && qoQRM.selectedCellClassName != null) {      if (BrowserDetect.browser == "Explorer") {         if (qoQRM.selectedCellClassName == "hltEx") document.getElementById(qoQRM.selectedCellID).className = "myCellEx";         if (qoQRM.selectedCellClassName == "hltHigh") document.getElementById(qoQRM.selectedCellID).className = "myCellHigh";         if (qoQRM.selectedCellClassName == "hltSig") document.getElementById(qoQRM.selectedCellID).className = "myCellSig";         if (qoQRM.selectedCellClassName == "hltMod") document.getElementById(qoQRM.selectedCellID).className = "myCellMod";         if (qoQRM.selectedCellClassName == "hltLow") document.getElementById(qoQRM.selectedCellID).className = "myCellLow";      } else {         document.getElementById(qoQRM.selectedCellID).className = qoQRM.selectedCellClassName;      }   }}function defineRelMatrixWidget() {   isc.QRMSaveButton.create({      ID: "projectSaveBtnMat",      disabled: true,      click: function () {         qoQRM.RelMatrixPane.saveChanges();      }   });   isc.QRMRefreshButton.create({      ID: "projectResetBtnMat",      disabled: true,      click: function () {         qoQRM.RelMatrixPane.cancelChanges();      }   });   isc.QRMExportButton.create({      ID: "projectExportBtnMat",      title: "Export Chart",      action: "qoReportEngine.flowController({baseValues:true, reportID:-100, relMatrix:true,submit:true});"   });   var btnholder = isc.HLayout.create({      width: "100%",      align: "right",      members: [projectSaveBtnMat, projectResetBtnMat, projectExportBtnMat],      layoutTopMargin: 5,      layoutMargin: 5,      membersMargin: 4   });   isc.defineClass("RelMatrixWidget", "VLayout");   isc.RelMatrixWidget.addProperties({      helpURL: "./html/relMatrix_helpText.html",      qrmDirty: false,      layoutLeftMargin: 0,      visibility: "hidden",      initWidget: function () {         this.Super("initWidget", arguments);         this.controllerForm1 = isc.DynamicForm.create({            fields: [{               title: "Locate Risk",               ID: "relMatrixRiskLocatorSelectItem",               name: "risk",               optionDataSource: "riskSelectGridDS",               pickListWidth: 450,               pickListFields: [{                  name: "riskProjectCode",                  width: 80               }, {                  name: "title"               }],               valueField: "riskProjectCode",               alternateRecordStyles: true,               autoFetchData: false,               type: "select",               changed: function (form, item, value) {                  RelMatrixImg.findRisk();               }            }, {               title: "Risk Owner",               ID: "riskOwnerSelectItem",               name: "risk_ownerName",               type: "Select",               allowEmptyValue: true,               changed: function (form, item, value) {                  RelMatrixImg.filterItems();               }            }, {               title: "Risk Manager",               ID: "riskManagerSelectItem",               name: "manager1_name",               type: "Select",               allowEmptyValue: true,               changed: function (form, item, value) {                  RelMatrixImg.filterItems();               }            }, {               title: "Show Tolerance",               valueMap: ["Current Tolerance", "Un Treated Tolerance", "Treated Tolerance"],               name: "relMatrixTolType",               _constructor: "RadioGroupItem",               autoFetchData: false,               defaultValue: "Current Tolerance",               changed: function (form, item, value) {                  RelMatrixImg.update();               }            }],            titleOrientation: "top",            numCols: 1,            autoDraw: false         });         this.relMatrixDescription = isc.HTMLPane.create({            width: 180,            height: "100%",            styleName: "exampleTextBlock",            overflow: "hidden"         });         this.controller = isc.VLayout.create({            width: 180,            backgroundColor: qrmCtrlColor,            autoDraw: false         });         this.controller.addMembers([this.controllerForm1, this.relMatrixDescription]);         this.relMatrixImg = isc.Img.create({            src: "[SKIN]grid.gif",            title: "Img5",            height: "100%",            width: "100%",            ID: "RelMatrixImg",            imageType: "normal",            items: new Array(),            fields: new Array(),            mouseOver: function () {               this.Super("mouseOver", arguments);               for (var s = 0; s < this.items.length; s++) {                  this.items[s].resetClass();               }               this.parentObj.controllerForm1.getItem("risk").setValue(null);            },            cancelChanges: function () {               qoQRM.RelMatrixPane.cancelChanges();            },            saveChanges: function () {               qoQRM.RelMatrixPane.saveChanges(false, false);            },            update: function () {               try {                  for (var s = 0; s < this.items.length; s++) {                     this.items[s].reposition();                  }               } catch (err) {                  alert(err.description);               }            },            resizeBy: function () {               this.Super("resizeBy", arguments);               for (var s = 0; s < this.items.length; s++) {                  this.items[s].resetClass();               }               try {                  this.setSrc(Page.getAppDir() + "getRelMatrix?WIDTH=" + this.getWidth() + "&HEIGHT=" + this.getHeight() + "&REQUIRERISKS=NO&PROJECTID=" + project.projectID + "&DESCENDANTS=" + checkDescendants.getValue());               } catch (err) {                  this.setSrc("[SKIN]grid.gif");               }               try {                  for (var s2 = 0; s2 < this.items.length; s2++) {                     this.items[s2].reposition();                  }               } catch (err2) {                  alert(err.description);               }               return true;            },            setMatrix: function (matrix) {               var url = Page.getAppDir() + "getRelMatrix?WIDTH=" + this.getWidth() + "&HEIGHT=" + this.getHeight() + "&REQUIRERISKS=NO&PROJECTID=" + qoQRM.RelMatrixPane.currentProjectID + "&DESCENDANTS=" + checkDescendants.getValue() + "&NOCACHE=" + Math.random();               this.setSrc(url);               try {                  for (var s = 0; s < this.items.length; s++) {                     this.removeChild(this.items[s]);                     this.items[s].destroy();                  }               } catch (err) {                  alert(err.message);               }               this.setRelMatrixRisks();               riskOwnerSelectItem.setValueMap(qoValueMap.owner);               riskManagerSelectItem.setValueMap(qoValueMap.manager);               relMatrixRiskLocatorSelectItem.setValue(null);               riskOwnerSelectItem.setValue(null);               riskManagerSelectItem.setValue(null);            },            findRisk: function () {               try {                  for (var s = 0; s < this.items.length; s++) {                     this.items[s].resetClass();                  }                  found = false;                  for (var s3 = 0; s3 < this.items.length; s3++) {                     if (this.items[s3].findRisk()) {                        found = true;                        break;                     }                  }                  if (!found) {                     isc.say("The risk was not found in the current selection.\n Try clearinng the owner and manager filters and check again.");                  }               } catch (err) {                  alert(err.description);               }            },            filterItems: function () {               try {                  for (var s = 0; s < this.items.length; s++) {                     this.items[s].filter();                  }               } catch (err) {                  alert(err.description);               }            },            setRelMatrixRisks: function () {               this.items = new Array();               this.fields = new Array();               this.items.clear();               this.fields.clear();               isc.RPCManager.sendRequest({                  actionURL: "./getRiskLiteRPC",                  prompt: "Retrieving Relative Matrix Risk Information",                  showPrompt: true,                  evalResult: true,                  params: {                     "ULTRALITE": true,                     "DESCENDANTS": checkDescendants.getValue(),                     "PROJECTID": qoQRM.RelMatrixPane.currentProjectID,                     "NOCACHE": Math.random()                  },                  callback: function (rpcResponse, data, rpcRequest) {                     qoQRM.relMatrixRisks = data;                     for (var i = 0; i < qoQRM.relMatrixRisks.length; i++) {                        risk = qoQRM.relMatrixRisks[i];                        var qrmitem = isc.RelMatrixItem.create({                           treatedImpact: risk.treatedImpact,                           treatedProb: risk.treatedProb,                           untreatedImpact: risk.inherentImpact,                           untreatedProb: risk.inherentProb,                           riskTitle: risk.title,                           riskOwner: risk.ownerID,                           riskManager: risk.manager1ID,                           riskID: risk.riskID,                           riskTreated: risk.treated,                           contents: risk.riskProjectCode,                           riskCode: risk.riskProjectCode,                           description: risk.description,                           baseStyle: (risk.treated) ? "matrixWidgetTreated" : "matrixWidgetUnTreated"                        });                        RelMatrixImg.items.push(qrmitem);                        RelMatrixImg.addChild(qrmitem);                        qrmitem.setposition();                     }                     relMatrixRiskLocatorSelectItem.fetchData();                  }               });            }         });         this.relMatrixImg.parentObj = this;         this.addMember([btnholder, isc.HLayout.create({            height: "100%",            members: [this.controller, RelMatrixImg],            membersMargin: 4         })]);      },      setProject: function () {         if (this.qrmDirty) {            isc.ask("Save Changes to Relative Matrix?", function (value) {               if (value) {                  qoQRM.RelMatrixPane.saveChanges(true);               } else {                  qoQRM.RelMatrixPane.setProjectLocal();               }            });         } else {            this.setProjectLocal();         }      },      setProjectLocal: function () {         try {            if (qoQRM.singlePhase) {               qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").hide();            } else {               qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").show();            }         } catch (e) {            alert(e.message);         }         this.currentProjectID = projectID;         this.relMatrixImg.setMatrix(qoCurrent.Matrix);         this.setClean();      },      cancelChanges: function () {         try {            for (var s = 0; s < this.relMatrixImg.items.length; s++) {               this.relMatrixImg.items[s].cancelChanges();            }            qoQRM.RelMatrixPane.setClean();         } catch (err) {            alert(err.description);         }      },      saveChanges: function (setLocalProject, navigateAway, switchTab) {         var relMatChanges = new Array();         relMatChanges.clear();         try {            for (var s = 0; s < this.relMatrixImg.items.length; s++) {               if (!this.relMatrixImg.items[s].clean) {                  var item = this.relMatrixImg.items[s];                  relMatChanges.push({                     riskID: item.riskID,                     newTreatedImpact: (item.treatedClean) ? item.treatedImpact : item.newTreatedImpact,                     newTreatedProb: (item.treatedClean) ? item.treatedProb : item.newTreatedProb,                     newUntreatedImpact: (item.untreatedClean) ? item.untreatedImpact : item.newUntreatedImpact,                     newUntreatedProb: (item.untreatedClean) ? item.untreatedProb : item.newUntreatedProb                  });               }            }            isc.RPCManager.sendRequest({               prompt: "Saving Changes",               showPrompt: true,               evalResult: true,               params: {                  "DATA": JSON.stringify(relMatChanges),                  "PROJECTID": projectID               },               callback: function (rpcResponse, data, rpcRequest) {                  try {                     for (var s = 0; s < RelMatrixImg.items.length; s++) {                        var item = RelMatrixImg.items[s];                        if (!item.clean) {                           item.treatedImpact = (item.treatedClean) ? item.treatedImpact : item.newTreatedImpact;                           item.treatedProb = (item.treatedClean) ? item.treatedProb : item.newTreatedProb;                           item.untreatedImpact = (item.untreatedClean) ? item.untreatedImpact : item.newUntreatedImpact, item.untreatedProb = (item.untreatedClean) ? item.untreatedProb : item.newUntreatedProb;                           item.clean = true;                        }                        item.treatedClean = true;                        item.untreatedClean = true;                     }                     qoQRM.RelMatrixPane.setClean();                     if (isA.Boolean(setLocalProject)) {                        if (setLocalProject) {                           qoQRM.RelMatrixPane.setProjectLocal();                        }                     }                     if (isA.Boolean(navigateAway)) {                        if (navigateAway) {                           RiskTableWindow.selectTab(switchTab);                        }                     }                  } catch (e) {                     alert(e.message);                  }               },               actionURL: "./updateRelMatrix"            });         } catch (err) {            alert(err.description);         }      },      isDirty: function () {         return this.isDirty;      },      setDirty: function () {         projectResetBtnMat.enable();         projectSaveBtnMat.enable();         this.qrmDirty = true;      },      setClean: function () {         projectResetBtnMat.disable();         projectSaveBtnMat.disable();         this.qrmDirty = false;      },      navigateAway: function (modeSwitch, switchTab) {         if (modeSwitch && this.qrmDirty) {            isc.say("Please save changes before switching modes");            return false;         } else if (modeSwitch && !this.qrmDirty) {            return true;         }         if (this.qrmDirty) {            isc.ask("Save Changes to Relative Risk Matrix?", function (value) {               if (value) {                  qoQRM.RelMatrixPane.saveChanges(false, true, switchTab);               } else {                  qoQRM.RelMatrixPane.setClean();                  RiskTableWindow.selectTab(switchTab);               }            });            return false;         } else {            qoQRM.RelMatrixPane.setClean();            return true;         }         return true;      }   });}function defineRelMatrixItem() {   isc.defineClass("RelMatrixItem", "Label");   isc.RelMatrixItem.addProperties({      autoDraw: false,      initImpact: 1,      initProb: 1,      treatedImpact: 1,      treatedProb: 1,      untreatedImpact: 1,      untreatedProb: 1,      newTreatedImpact: 1,      newTreatedProb: 1,      newUntreatedImpact: 1,      newUntreatedProb: 1,      clean: true,      treatedClean: true,      untreatedClean: true,      canDragReposition: true,      keepInParentRect: true,      dragAppearance: "target",      dragOpacity: 60,      autoDraw: false,      height: 30,      width: 60,      align: "center",      valign: "center",      wrap: false,      showRollOver: true,      showFocused: true,      highlighted: false,      cancelChanges: function () {         if (!this.clean) {            this.clean = true;            this.untreatedClean = true;            this.treatedClean = true;            this.newTreatedImpact = 1;            this.newTreatedProb = 1;            this.newUntreatedImpact = 1;            this.newUntreatedProb = 1;            this.reposition();         }      },      reposition: function () {         if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Current Tolerance") {            if (this.riskTreated) {               this.repositionTreated();            } else {               this.repositionUntreated();            }         }         if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Un Treated Tolerance") {            this.repositionUntreated();         }         if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Treated Tolerance") {            this.repositionTreated();         }         for (var i = 0; i < RelMatrixImg.children.length; i++) {            var child = RelMatrixImg.children[i];            if (child.ID != this.ID) {               if (child.top == this.top && child.left == this.left) {                  this.moveBy(3, 3);                  this.markForRedraw();               }            }         }      },      repositionTreated: function () {         if (this.treatedClean) {            this.moveTo(Math.round(this.getXDisplacement(this.treatedImpact)), Math.round(this.getYDisplacement(this.treatedProb)));         } else {            this.moveTo(Math.round(this.getXDisplacement(this.newTreatedImpact)), Math.round(this.getYDisplacement(this.newTreatedProb)));         }      },      repositionUntreated: function () {         if (this.untreatedClean) {            this.moveTo(Math.round(this.getXDisplacement(this.untreatedImpact)), Math.round(this.getYDisplacement(this.untreatedProb)));         } else {            this.moveTo(Math.round(this.getXDisplacement(this.newUntreatedImpact)), Math.round(this.getYDisplacement(this.newUntreatedProb)));         }      },      setposition: function () {         if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Current Tolerance") {            if (this.riskTreated) {               this.setpositionTreated();            } else {               this.setpositionUntreated();            }         }         if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Un Treated Tolerance") {            this.setpositionUntreated();         }         if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Treated Tolerance") {            this.setpositionTreated();         }         for (var i = 0; i < RelMatrixImg.children.length; i++) {            var child = RelMatrixImg.children[i];            if (child.ID != this.ID) {               if (child.top == this.top && child.left == this.left) {                  this.moveBy(3, 3);                  this.markForRedraw();               }            }         }      },      setpositionTreated: function () {         if (this.treatedClean) {            this.setTop(Math.round(this.getYDisplacement(this.treatedProb)));            this.setLeft(Math.round(this.getXDisplacement(this.treatedImpact)));         } else {            this.setTop(Math.round(this.getYDisplacement(this.newTreatedProb)));            this.setLeft(Math.round(this.getXDisplacement(this.newTreatedImpact)));         }      },      setpositionUntreated: function () {         if (this.untreatedClean) {            this.setTop(Math.round(this.getYDisplacement(this.untreatedProb)));            this.setLeft(Math.round(this.getXDisplacement(this.untreatedImpact)));         } else {            this.setTop(Math.round(this.getYDisplacement(this.newUntreatedProb)));            this.setLeft(Math.round(this.getXDisplacement(this.newUntreatedImpact)));         }      },      dragRepositionStop: function () {         this.clean = false;         qoQRM.RelMatrixPane.setDirty();         if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Current Tolerance") {            if (this.riskTreated) {               this.updateTreated();            } else {               this.updateUntreated();            }         }         if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Un Treated Tolerance") {            this.updateUntreated();         }         if (qoQRM.RelMatrixPane.controllerForm1.getItem("relMatrixTolType").getValue() == "Treated Tolerance") {            this.updateTreated();         }         return true;      },      updateTreated: function () {         this.treatedClean = false;         this.newTreatedImpact = this.calcImpact();         this.newTreatedProb = this.calcProb();      },      updateUntreated: function () {         this.untreatedClean = false;         this.newUntreatedImpact = this.calcImpact();         this.newUntreatedProb = this.calcProb();      },      calcProb: function () {         var y = this.getTop();         var yUnits = (RelMatrixImg.getHeight() - 30) / (qoCurrent.Matrix.maxProb);         return (qoCurrent.Matrix.maxProb + 1) - (y / yUnits);      },      calcImpact: function () {         var x = this.getLeft();         var xUnits = (RelMatrixImg.getWidth() - 60) / (qoCurrent.Matrix.maxImpact);         return (x / xUnits) + 1;      },      doubleClick: function () {         qoRiskController.riskID = this.riskID;         getRiskAndDisplay(qoRiskController.riskID);      },      initWidget: function () {         this.Super("initWidget", arguments);         RelMatrixImg.addChild(this);      },      mouseOver: function () {         this.Super("mouseOver", arguments);         this.bringToFront();         qoQRM.RelMatrixPane.relMatrixDescription.setContents("<div style='valign:top'><br><hr><strong>" + this.contents + " - " + this.riskTitle + "<br><br>Description:<br><br></strong>" + this.description.substring(0, 500) + "<hr></div>");      },      mouseOut: function () {         this.Super("mouseOut", arguments);         qoQRM.RelMatrixPane.relMatrixDescription.setContents("");      },      getXDisplacement: function (impact) {         return (impact - 1) * ((RelMatrixImg.width - 60) / qoCurrent.Matrix.maxImpact);      },      getYDisplacement: function (prob) {         return ((qoCurrent.Matrix.maxProb + 1 - prob) * ((RelMatrixImg.getHeight() - 30) / (qoCurrent.Matrix.maxProb)));      },      filter: function () {         var owner = riskOwnerSelectItem.getValue();         var manager = riskManagerSelectItem.getValue();         if ((owner == null || owner == this.riskOwner) && (manager == null || manager == this.riskManager)) {            this.show();         } else {            this.hide();         }      },      findRisk: function () {         if (relMatrixRiskLocatorSelectItem.getValue() == this.riskCode && this.isVisible()) {            this.setBackgroundColor("gray");            this.bringToFront();            this.resizeBy(10, 10);            this.moveBy(-5, -5);            this.highlighted = true;            return true;         }         return false;      },      resetClass: function () {         if (this.highlighted) {            this.resizeBy(-10, -10);            this.moveBy(5, 5);            this.setBackgroundColor("white");            this.highlighted = false;         }      }   });}function defineRiskMatrixItem() {   isc.defineClass("RiskMatrixItem", "Label");   isc.RiskMatrixItem.addProperties({      preMit: true,      autoDraw: false,      initImpact: 1,      initProb: 1,      treatedImpact: 1,      treatedProb: 1,      untreatedImpact: 1,      untreatedProb: 1,      newTreatedImpact: 1,      newTreatedProb: 1,      newUntreatedImpact: 1,      newUntreatedProb: 1,      clean: true,      treatedClean: true,      untreatedClean: true,      canDragReposition: true,      keepInParentRect: true,      dragAppearance: "target",      dragOpacity: 60,      height: 30,      width: 60,      align: "center",      valign: "center",      wrap: false,      reset: function (r) {         if (!this.clean) {            this.clean = true;            this.untreatedClean = true;            this.treatedClean = true;            this.treatedImpact = r.treatedImpact;            this.treatedProb = r.treatedProb;            this.untreatedImpact = r.inherentImpact;            this.untreatedProb = r.inherentProb;            this.setposition();         }      },      setposition: function () {         if (this.preMit) {            this.setpositionUntreated();         } else {            this.setpositionTreated();         }      },      setpositionTreated: function () {         if (this.treatedClean) {            this.setTop(Math.round(this.getYDisplacement(this.treatedProb)));            this.setLeft(Math.round(this.getXDisplacement(this.treatedImpact)));         } else {            this.setTop(Math.round(this.getYDisplacement(this.newTreatedProb)));            this.setLeft(Math.round(this.getXDisplacement(this.newTreatedImpact)));         }      },      setpositionUntreated: function () {         if (this.untreatedClean) {            this.setTop(Math.round(this.getYDisplacement(this.untreatedProb)));            this.setLeft(Math.round(this.getXDisplacement(this.untreatedImpact)));         } else {            this.setTop(Math.round(this.getYDisplacement(this.newUntreatedProb)));            this.setLeft(Math.round(this.getXDisplacement(this.newUntreatedImpact)));         }      },      dragRepositionStop: function () {         this.clean = false;         if (this.preMit) {            this.updateUntreated();         } else {            this.updateTreated();         }         this.hostImg.setDirty();         return true;      },      getImpact: function () {         if (this.preMit) {            if (this.clean) {               return this.untreatedImpact;            } else {               return this.newUntreatedImpact;            }         } else {            if (this.clean) {               return this.treatedImpact;            } else {               return this.newTreatedImpact;            }         }      },      getProb: function () {         if (this.preMit) {            if (this.clean) {               return this.untreatedProb;            } else {               return this.newUntreatedProb;            }         } else {            if (this.clean) {               return this.treatedProb;            } else {               return this.newTreatedProb;            }         }      },      updateTreated: function () {         this.treatedClean = false;         this.newTreatedImpact = this.calcImpact();         this.newTreatedProb = this.calcProb();      },      updateUntreated: function () {         this.untreatedClean = false;         this.newUntreatedImpact = this.calcImpact();         this.newUntreatedProb = this.calcProb();      },      calcProb: function () {         var y = this.getTop();         var yUnits = (this.hostImg.getHeight() - 30) / (qoCurrent.Matrix.maxProb);         return (qoCurrent.Matrix.maxProb + 1) - (y / yUnits);      },      calcImpact: function () {         var x = this.getLeft();         var xUnits = (this.hostImg.getWidth() - 60) / (qoCurrent.Matrix.maxImpact);         return (x / xUnits) + 1;      },      getXDisplacement: function (impact) {         return (impact - 1) * ((this.hostImg.width - 60) / qoCurrent.Matrix.maxImpact);      },      getYDisplacement: function (prob) {         return ((qoCurrent.Matrix.maxProb + 1 - prob) * ((this.hostImg.getHeight() - 30) / (qoCurrent.Matrix.maxProb)));      }   });}function defineRiskCalendar() {   isc.defineClass("CalendarWidget", "VLayout");   isc.CalendarWidget.addProperties({      helpURL: "./html/cal_helpText.html",      autoDraw: false,      visibility: "hidden",      calImgInit: false,      height: "100%",      width: "100%",      layoutLeftMargin: 0,      autoDraw: false,      initWidget: function () {         this.calImage = isc.HTMLFlow.create({            autoDraw: false,            imageType: "center",            height: "95%",            width: "95%",            contents: "<div id='loadingWrapper' style='margin-top:200px'><div id='loading'><div class='loadingIndicator'><img alt='' src='./wait30trans.gif' style='float: left' /> Quay Risk Manager<br /><span id='loadingMsg'>Retrieving Risk Calaendar</span></div></div></div>"         });         this.addMembers([this.calImage]);      },      updateCalDetails: function () {         var targetImg = this.calImage;         try {            var key = Math.random();            isc.RPCManager.sendRequest({               prompt: "Retreiving Risk Calendar",               actionURL: "./getCalChart",               evalResult: true,               params: {                  "x": this.width,                  "y": this.height,                  "bDescend": checkDescendants.getValue(),                  "contextID": projectID,                  "map": true,                  "nocache": key               },               callback: function (rpcResponse, data, rpcRequest) {                  targetImg.setContents("<img style=\"border-width:0px;border-style:none;\" usemap=\"#imageMap_" + key + "\" src=\"" + Page.getAppDir() + "getCalChart?map=false&nocache=" + key + 1 + "\">" + data);               }            });         } catch (e) {            alert(e.message);         }      },      setProject: function () {         this.updateCalDetails();      },      navigateAway: function () {         return true;      }   });}function defineAnalysisWidget() {   isc.ToolStrip.create({      ID: "AnalysisWidgetControllerControl",      width: "100%",      height: 26,      defaultLayoutAlign: "center",      members: [      isc.LayoutSpacer.create({         width: "*"      }), isc.QRMExportButton.create({         title: "Export Chart",         action: "qoReportEngine.flowController({baseValues:true, reportID:-400, submit:true, noSelectWindow:true});"      }), isc.LayoutSpacer.create({         width: 5      })]   });   isc.defineClass("AnalysisWidget", "HLayout");   isc.AnalysisWidget.addProperties({      helpURL: "./html/analysis_helpText.html",      autoDraw: false,      analImgInit: false,      layoutLeftMargin: 0,      visibility: "hidden",      ID: "AnalysisWidgetID",      prepareExport: function () {         try {            var param1 = "";            var clazz = "";            var recs = AnalysisWidgetID.analysisGrid.getSelection();            for (var i = 0; i < recs.length; i++) {               clazz = clazz + recs[i].clazz + ":";               param1 = param1 + recs[i].param1 + ":";            }            qoReportEngine.reportParamMap.put("x", 730);            qoReportEngine.reportParamMap.put("y", 600);            qoReportEngine.reportParamMap.put("class", clazz);            qoReportEngine.reportParamMap.put("param1", param1);            qoReportEngine.reportParamMap.put("num", AnalysisWidgetID.form2.getItem("numRecords").getValue());            qoReportEngine.reportParamMap.put("b3D", AnalysisWidgetID.form3.getItem("3D").getValue());            qoReportEngine.reportParamMap.put("bReverse", AnalysisWidgetID.form3.getItem("Reverse").getValue());            qoReportEngine.reportParamMap.put("bEx", AnalysisWidgetID.form1.getItem("Extreme").getValue());            qoReportEngine.reportParamMap.put("bHigh", AnalysisWidgetID.form1.getItem("High").getValue());            qoReportEngine.reportParamMap.put("bSig", AnalysisWidgetID.form1.getItem("Significant").getValue());            qoReportEngine.reportParamMap.put("bMod", AnalysisWidgetID.form1.getItem("Moderate").getValue());            qoReportEngine.reportParamMap.put("bLow", AnalysisWidgetID.form1.getItem("Low").getValue());            qoReportEngine.reportParamMap.put("bDescend", checkDescendants.getValue());            qoReportEngine.reportParamMap.put("contextID", projectID);            qoReportEngine.reportParamMap.put("map", false);            qoReportEngine.qrmSubmitBackGroundReport(-400);         } catch (e) {            alert(e + "  " + e.message);         }      },      initWidget: function () {         this.Super("initWidget", arguments);         this.analysisGrid = isc.ListGrid.create({            alternateRecordStyles: true,            height: "100%",            width: "100%",            autoDraw: false,            dataArrived: function (startRow, endRow) {               try {                  var initRecord = Math.floor(Math.random() * endRow);                  var rec = this.getRecord(initRecord);                  this.parent.updateAnalOptions(rec);                  this.selectRecord(rec);                  this.parent.updateAnalDetails(rec);               } catch (e) {                  alert(e);               }            },            gridComponents: ["header", "body", AnalysisWidgetControllerControl],            fields: [{               name: "title",               title: "Analysis Tool",               type: "string"            }, {               name: "clazz",               showIf: "false"            }, {               name: "param1",               type: "string",               showIf: "false"            }, {               name: "b3D",               type: "boolean",               showIf: "false"            }, {               name: "bTol",               type: "boolean",               showIf: "false"            }, {               name: "bNumElem",               type: "boolean",               showIf: "false"            }, {               name: "bReverse",               type: "boolean",               showIf: "false"            }],            dataSource: analToolDS,            recordClick: "this.parent.updateAnalOptions(this.getSelectedRecord());this.parent.updateAnalDetails()"         });         this.analysisGrid.parent = this;         this.form1 = isc.DynamicForm.create({            fields: [{               defaultValue: "Tolerances",               _constructor: "StaticTextItem",               colSpan: 4            }, {               name: "Extreme",               _constructor: "CheckboxItem",               defaultValue: true,               changed: function (form, item, value) {                  form.parent.updateAnalDetails();               }            }, {               name: "High",               _constructor: "CheckboxItem",               defaultValue: true,               changed: function (form, item, value) {                  form.parent.updateAnalDetails();               }            }, {               name: "Significant",               _constructor: "CheckboxItem",               defaultValue: true,               changed: function (form, item, value) {                  form.parent.updateAnalDetails();               }            }, {               name: "Moderate",               _constructor: "CheckboxItem",               defaultValue: true,               changed: function (form, item, value) {                  form.parent.updateAnalDetails();               }            }, {               name: "Low",               _constructor: "CheckboxItem",               defaultValue: true,               changed: function (form, item, value) {                  form.parent.updateAnalDetails();               }            }],            numCols: 4,            autoDraw: false,            titleWidth: 0         });         this.form1.parent = this;         this.form2 = isc.DynamicForm.create({            fields: [{               _constructor: "RowSpacer"            }, {               name: "numRecords",               title: "# of Records",               editorType: "spinner",               defaultValue: 30,               min: 1,               max: 100,               step: 1,               width: 70,               changed: function (form, item, value) {                  form.parent.updateAnalDetails();               }            }],            numCols: 2,            autoDraw: false         });         this.form2.parent = this;         this.form3 = isc.DynamicForm.create({            fields: [{               _constructor: "RowSpacer"            }, {               name: "3D",               title: "3D Appearance",               defaultValue: true,               _constructor: "CheckboxItem",               changed: function (form, item, value) {                  form.parent.updateAnalDetails();               }            }, {               name: "Reverse",               title: "Reverse Sort Direction",               defaultValue: false,               _constructor: "CheckboxItem",               changed: function (form, item, value) {                  form.parent.updateAnalDetails();               }            }],            numCols: 2,            titleWidth: 0,            autoDraw: false         });         this.form3.parent = this;         this.controller = isc.VLayout.create({            height: "100%",            width: 200,            backgroundColor: qrmCtrlColor,            autoDraw: false         });         this.controller.addMembers([this.analysisGrid, isc.LayoutSpacer.create({            height: 5,            autoDraw: false         }), this.form1, this.form2, this.form3]);         this.analImage = isc.HTMLPane.create({            ID: "analysisImage",            width: "100%",            height: "100%",            showEdges: false,            contents: "<div id='loadingWrapper' style='margin-top:200px'><div id='loading'><div class='loadingIndicator'><img alt='' src='./images/icons/16/message.png' style='float: left' /> &nbsp;Select Analysis Tool from List<br /></div></div></div>"         });         this.addMembers([this.controller, this.analImage]);      },      updateAnalDetails: function (recParam) {         this.analImgInit = true;         var rec = recParam;         if (rec == null) {            rec = this.analysisGrid.getSelectedRecord();         }         if (rec) {            try {               var key = Math.random();               // The RPC request returns the imageMap for the               // Chart               // and the subsequent call gets the images which was               // parked in the session               isc.RPCManager.sendRequest({                  prompt: "Retreiving Analysis Chart",                  actionURL: "./getAnalChart",                  evalResult: true,                  params: {                     "class": rec.clazz,                     "param1": rec.param1,                     "num": this.form2.getItem("numRecords").getValue(),                     "b3D": this.form3.getItem("3D").getValue(),                     "bReverse": this.form3.getItem("Reverse").getValue(),                     "bEx": this.form1.getItem("Extreme").getValue(),                     "bHigh": this.form1.getItem("High").getValue(),                     "bSig": this.form1.getItem("Significant").getValue(),                     "bMod": this.form1.getItem("Moderate").getValue(),                     "bLow": this.form1.getItem("Low").getValue(),                     "x": this.analImage.width,                     "y": this.analImage.height,                     "bDescend": checkDescendants.getValue(),                     "contextID": projectID,                     "map": true,                     "nocache": key                  },                  callback: function (rpcResponse, data, rpcRequest) {                     var html = "<img style=\"border-width:0px;border-style:none;\" usemap=\"#imageMap_" + key + "\" src=\"" + Page.getAppDir() + "getAnalChart?image=true&nocache=" + key + 1 + "\">";                     html = html + data;                     analysisImage.contents = html;                     analysisImage.markForRedraw();                  }               });            } catch (err) {               alert("Update Analysis Detail " + err.message);            }         }      },      updateAnalOptions: function (rec) {         this.form3.getItem("3D").setDisabled(!rec.b3D);         this.form2.getItem("numRecords").setDisabled(!rec.bNumElem);         this.form3.getItem("Reverse").setDisabled(!rec.bReverse);         this.form1.getItem("Extreme").setDisabled(!rec.bTol);         this.form1.getItem("High").setDisabled(!rec.bTol);         this.form1.getItem("Significant").setDisabled(!rec.bTol);         this.form1.getItem("Moderate").setDisabled(!rec.bTol);         this.form1.getItem("Low").setDisabled(!rec.bTol);      },      setProject: function () {         this.analysisGrid.fetchData();         this.updateAnalDetails();      },      navigateAway: function () {         return true;      }   });}function defineSubjectiveRankWidget() {   isc.QRMSaveButton.create({      ID: "projectSaveBtnRank",      disabled: true,      click: function () {         if (qoQRM.riskProjectEditMode == "project") {            projectTabSet.getTabPane(projectTabSet.getSelectedTab()).saveFn();         }         SubjectiveRank.saveChanges();      }   });   isc.QRMRefreshButton.create({      title: "Reset",      ID: "projectResetBtnRank",      disabled: true,      click: function () {         if (qoQRM.riskProjectEditMode == "project") {            projectTabSet.getTabPane(projectTabSet.getSelectedTab()).resetFn();         }         SubjectiveRank.cancelChanges();      }   });   isc.QRMExportButton.create({      ID: "projectExportBtnRank",      title: "Export Chart",      action: "qoReportEngine.flowController({baseValues:true, reportID:-200, submit:true, noSelectWindow:true});"   });   var btnholder = isc.HLayout.create({      width: "100%",      align: "right",      members: [projectSaveBtnRank, projectResetBtnRank, projectExportBtnRank],      layoutTopMargin: 5,      layoutMargin: 5,      membersMargin: 4   });   isc.defineClass("SubjectiveRankWidget", "VLayout");   isc.SubjectiveRankWidget.addProperties({      helpURL: "./html/subjRank_helpText.html",      qrmDirty: false,      autoDraw: false,      ID: "SubjectiveRank",      visibility: "hidden",      layoutLeftMargin: 0,      initWidget: function () {         this.Super("initWidget", arguments);         this.helpHTML = isc.HTMLPane.create({            width: 180,            height: "100%",            styleName: "exampleTextBlock",            overflow: "hidden",            contentsOrig: "<div style='valign:top'><hr>	<ol><li>Select and drag the risk to it's new ranking <br>&nbsp;	</li>" + "<li>By default, risks are ranked according to their tolerance, probability and impact. <br>&nbsp;</li>" + "<li>Color of each item corresponds to the <i>Current Tolerance</i> of the risk . <br>&nbsp;</li>" + "<li>Use the <i>Project Navigator</i> to select a different project. <br>&nbsp;</li>" + "<li>Details of the risk are displayed when the mouse passes over each item. <br>&nbsp;</li>" + " <li>Double Click on any item to open the Risk Editor for the item. <br>&nbsp;</li>" + "<li>Select <strong><i>Save</i></strong> to save any ranking changes. <br>&nbsp;	</li>" + "<li>Select <strong><i>Reset</i></strong> to undo any changes since the last save. <br>&nbsp;	</li>" + "</ol><hr></div>"         });         this.controller = isc.VLayout.create({            backgroundColor: qrmCtrlColor,            width: 180,            mouseOver: function () {               this.parent.helpHTML.setContents("");            }         });         this.controller.parent = this;         this.controller.addMember(this.helpHTML);         this.rankTable = isc.ListGrid.create({            height: "100%",            ID: "RankTable",            gridComponents: ["header", "body"],            canReorderRecords: true,            dragDataAction: "MOVE",            dragTrackerMode: "record",            dragTrackrtStyle: "gridDragTrackerQRM",            showAllRecords: true,            alternateRecordStyles: true,            canSort: false,            fields: [{               name: "riskProjectCode",               title: "Risk Code",               width: 80            }, {               name: "currentTolerance",               title: "Tolerance",               type: "image",               align: "center",               width: 70,               imageURLPrefix: "tol",               imageURLSuffix: ".png"            }, {               name: "title",               width: "100%",               title: "Risk Title"            }],            recordDoubleClick: function () {               qoRiskController.riskID = RankTable.getSelectedRecord().riskID;               getRiskAndDisplay(qoRiskController.riskID);            },            cellOver: function (record, rowNum, colNum) {               this.parent.helpHTML.setContents("<div style='valign:top'><hr><strong>" + record.riskProjectCode + " - " + record.title + "<br><br>Description:<br><br></strong>" + record.description.substring(0, 500) + "<hr></div>");               return true;            },            drop: function () {               this.Super('drop', arguments);               SubjectiveRank.setDirty();               return true;            },            getBaseStyle: function (record, rowNum, colNum) {               if (colNum == 0) {                  return "rankItem" + record.currentTolerance;               } else {                  return this.Super("getBaseStyle", arguments);               }            }         });         this.rankTable.parent = this;         this.bottomPane = isc.HLayout.create({            width: "100%",            height: "100%",            membersMargin: 4         });         this.bottomPane.addMember(this.controller);         this.bottomPane.addMember(this.rankTable);         this.addMember(btnholder);         this.addMember(this.bottomPane);      },      setClean: function () {         projectSaveBtnRank.disable();         projectResetBtnRank.disable();         SubjectiveRank.qrmDirty = false;      },      setDirty: function () {         projectSaveBtnRank.enable();         projectResetBtnRank.enable();         this.qrmDirty = true;      },      saveChanges: function (setLocalProject, navigateAway, switchTab) {         var ranks = this.rankTable.data[0].riskID;         var mems = this.rankTable.data;         for (var idx = 1; idx < mems.length; idx++) {            ranks = ranks + "##" + mems[idx].riskID;         }         isc.RPCManager.sendRequest({            prompt: "Saving Changes",            showPrompt: true,            params: {               "PROJECTID": SubjectiveRank.currentProjectID,               "RANKS": ranks            },            callback: function (rpcResponse, data, rpcRequest) {               SubjectiveRank.setClean();               if (isA.Boolean(setLocalProject)) {                  if (setLocalProject) {                     SubjectiveRank.setProjectLocal();                  }               }               if (isA.Boolean(navigateAway)) {                  if (navigateAway) {                     SubjectiveRank.setClean();                     RiskTableWindow.selectTab(switchTab);                  }               }            },            actionURL: "./updateRanksRPC"         });      },      cancelChanges: function () {         this.setProjectLocal();      },      isDirty: function () {         return this.qrmDirty;      },      setProject: function () {         if (SubjectiveRank.isDirty()) {            isc.ask("Save Changes to Risk Rank Order?", function (value) {               if (value) {                  SubjectiveRank.saveChanges(true);               } else {                  SubjectiveRank.setClean();                  SubjectiveRank.setProjectLocal();               }            });         } else {            SubjectiveRank.setClean();            SubjectiveRank.setProjectLocal();         }      },      setProjectLocal: function () {         SubjectiveRank.setClean();         this.currentProjectID = projectID;         isc.RPCManager.sendRequest({            prompt: "Retrieving Risks in Rank Order",            showPrompt: true,            evalResult: true,            params: {               "DESCENDANTS": checkDescendants.getValue(),               "PROJECTID": SubjectiveRank.currentProjectID            },            callback: function (rpcResponse, risks, rpcRequest) {               RankTable.setData(risks);               SubjectiveRank.setClean();            },            actionURL: "./getRiskLiteFetchSorted"         });      },      navigateAway: function (modeSwitch, switchTab) {         if (modeSwitch && SubjectiveRank.isDirty()) {            isc.say("Please save changes before switching modes");            return false;         } else if (modeSwitch && !SubjectiveRank.isDirty()) {            return true;         }         if (SubjectiveRank.isDirty()) {            isc.ask("Save Changes to Risk Rank Order?", function (value) {               if (value) {                  SubjectiveRank.saveChanges(false, true, switchTab);               } else {                  SubjectiveRank.setClean();                  RiskTableWindow.selectTab(switchTab);               }            });            return false;         } else {            SubjectiveRank.setClean();            return true;         }      }   });}function defineRelationshipWidget() {   isc.defineClass("RelationshipWidget", "VLayout");   isc.RelationshipWidget.addProperties({      helpURL: "./html/summaryRisk_helpText.html",      membersMargin: 5,      qrmDirty: false,      ID: "Relationship",      visibility: "hidden",      dirtyRecords: new Array(),      initWidget: function () {         this.Super("initWidget", arguments);         try {            this.controllerButtonsForm = isc.HLayout.create({               height: 30,               membersMargin: 5,               layoutMargin: 5,               backgroundColor: qrmCtrlColor,               members: [isc.Label.create({                  width: "100%"               }), isc.QRMSaveButton.create({                  ID: "projectSaveBtnRel",                  click: function (form, item, value) {                     Relationship.saveChanges();                  }               }), isc.QRMRefreshButton.create({                  title: "Reset",                  autoDraw: false,                  ID: "projectResetBtnRel",                  click: function (form, item, value) {                     Relationship.cancelChanges();                  }               }), isc.QRMAddButton.create({                  title: "New Risk",                  ID: "relationNewBtn",                  click: function (form, item, value) {                     this.parent.newSummaryRisk();                  }               }), isc.QRMExportButton.create({                  disabled: false,                  click: function (form, item, value) {                     qoReportEngine.flowController({                        baseValues: true,                        reportID: -300,                        submit: true,                         noSelectWindow:true                     });                  }               })]            });            relationNewBtn.parent = this;            this.controllerButtonsForm.parent = this;            this.unAllocatedGrid = isc.ListGrid.create({               ID: "UnAllocatedTable",               autoDraw: false,               dataSource: riskLiteDS,               alternateRecordStyles: true,               canReorderRecords: false,               canDragRecordsOut: true,               canAcceptDroppedRecords: true,               saveLocally: true,               dragDataAction: "copy",               sortFieldNum: 0,               sortDirection: "ascending",               recordDrop: function (dropRecords, targetRecord, index, sourceWidget) {                  if (dropRecords.find("forceDownParent", true) || dropRecords.find("forceDownChild", true)) {                     isc.say("Cannot move Propogated Risks");                     return;                  }                  if (dropRecords.find("summaryRisk", true)) {                     isc.say("Cannot move Summary Risks");                     return;                  }                  this.parent.enableButtons();                  dropRecords.setProperty("newParentSummaryRisk", -1);                  Relationship.dirtyRecords.addList(dropRecords);                  // this.data.addList(dropRecords);                  for (var i = 0; i < dropRecords.length; i++) {                     sourceWidget.removeData(dropRecords[i]);                  }               },               cellOver: function (record, rowNum, colNum) {                  this.parent.RiskTableDetailViewer.setData(record);                  return true;               },               recordDoubleClick: function () {                  qoRiskController.riskID = UnAllocatedTable.getSelectedRecord().riskID;                  getRiskAndDisplay(qoRiskController.riskID);               },               fields: [{                  name: "riskProjectCode",                  title: "Risks",                  formatCellValue: function (value, record, rowNum, colNum) {                     return value + " - " + record.title;                  }               }]            });            this.unAllocatedGrid.parent = this;            this.parentTree = isc.TreeGrid.create({               ID: "parentTree",               canReorderRecords: true,               canAcceptDroppedRecords: true,               canDragRecordsOut: true,               dragDataAction: "move",               canDropOnLeaves: true,               nodeIcon: "[SKIN]file.png",               folderIcon: "[SKIN]folder.png",               fields: [{                  name: "riskProjectCode",                  title: "Summary and Top Propogated Risks",                  formatCellValue: function (value, record, rowNum, colNum) {                     return value + " - " + record.title;                  }               }],               cellOver: function (record, rowNum, colNum) {                  this.parent.RiskTableDetailViewer.setData(record);                  return true;               },               recordDoubleClick: function () {                  qoRiskController.riskID = parentTree.getSelectedRecord().riskID;                  getRiskAndDisplay(qoRiskController.riskID);               },               folderDrop: function (dragRecords, dropFolder, index, sourceWidget) {                  if (dropFolder == "undefined" || dropFolder == this.data.root) {                     isc.say("Please drop risks onto exisitng an Summary Risk");                     return;                  }                  if (dropFolder.forceDownParent) {                     isc.say("You cannot add a risk to a top level Propogated Risk");                     return;                  }                  dragRecords.setProperty("newParentSummaryRisk", dropFolder.riskID);                  Relationship.dirtyRecords.addList(dragRecords);                  if (((isc.isA.Tree(sourceWidget.getData()) && isc.isA.Tree(this.data) && sourceWidget.getData().getRoot() == this.data.getRoot())) && (this.dragDataAction != isc.TreeGrid.COPY && this.dragDataAction != isc.TreeGrid.CLONE)) {                     sourceWidget.getData().moveList(dragRecords, dropFolder, index);                     this.parent.enableButtons();                  } else {                     this.parent.enableButtons();                     this.data.addList(dragRecords, dropFolder);                  }               }            });            this.parentTree.parent = this;            var mainLayout = isc.HLayout.create({               membersMargin: 5            });            mainLayout.addMember(this.parentTree);            mainLayout.addMember(this.unAllocatedGrid);            this.RiskTableDetailViewer = isc.DetailViewer.create({               height: 210,               width: "100%",               overflow: "scroll",               dataSource: riskLiteDS,               autoDraw: false,               fields: [{                  name: "riskProjectCode",                  title: "Risk Code",                  canEdit: false,                  width: 60,                  align: "left"               }, {                  name: "title",                  title: "Title",                  align: "left",                  width: "100%"               }, {                  name: "description",                  title: "Description",                  align: "left",                  width: "100%"               }, {                  name: "ownerName",                  title: "Owner",                  align: "center",                  width: 120               }, {                  name: "manager1Name",                  title: "Manager",                  align: "center",                  width: 120               }, {                  name: "treatedImpact",                  title: "Impact",                  type: "double",                  formatCellValue: function (value, record) {                     var inherent = record.inherentImpact;                     var treated = record.treatedImpact;                     if (isc.isA.Number(inherent)) {                        inherent = Math.floor(inherent);                     }                     if (isc.isA.Number(treated)) {                        treated = Math.floor(treated);                     } else {                        return;                     }                     return "Inherent Impact = " + inherent + " Treated Impact = " + treated;                  },                  align: "center"               }, {                  name: "treatedProb",                  title: "Probability",                  type: "double",                  formatCellValue: function (value, record) {                     var inherent = record.inherentProb;                     var treated = record.treatedProb;                     if (isc.isA.Number(inherent)) {                        inherent = Math.floor(inherent);                     }                     if (isc.isA.Number(treated)) {                        treated = Math.floor(treated);                     } else {                        return;                     }                     return "Inherent Probability = " + inherent + " Treated Probability = " + treated;                  },                  align: "center"               }, {                  name: "treated",                  title: "Treated",                  type: "boolean",                  formatCellValue: function (value) {                     if (value) {                        return "Yes";                     }                     return "No";                  },                  width: 55               }]            });            this.RiskTableDetailViewer.setData({});            var main = isc.VLayout.create({               height: "100%",               members: [this.controllerButtonsForm, mainLayout]            });            this.addMembers([main, this.RiskTableDetailViewer]);         } catch (e) {            alert(e.description);         }      },      disableButtons: function () {         projectSaveBtnRel.disable();         projectResetBtnRel.disable();      },      enableButtons: function () {         projectSaveBtnRel.enable();         projectResetBtnRel.enable();         this.qrmDirty = true;      },      newSummaryRisk: function (id) {         alert(id);         if (this.qrmDirty) {            isc.say("Please save changes before creating a new summary risk");            return;         } else {            newRisk(id);         }      },      saveChanges: function (navigateAway, switchTab) {         var changes = new Array();         for (var i = 0; i < this.dirtyRecords.length; i++) {            changes.push({               "riskID": this.dirtyRecords[i].riskID,               "newParentSummaryRisk": this.dirtyRecords[i].newParentSummaryRisk,               "parentSummaryRisk": this.dirtyRecords[i].parentSummaryRisk,               "origParentSummaryRisk": this.dirtyRecords[i].origParentSummaryRisk,               "tempIndex": this.dirtyRecords[i].tempIndex,               "relationshipID": this.dirtyRecords[i].relationshipID            });         }         isc.RPCManager.sendRequest({            actionURL: "./updateFamilyRPC",            prompt: "Saving Changes",            showPrompt: true,            params: {               "PROJECTID": Relationship.currentProjectID,               "CHANGES": JSON.stringify(changes)            },            callback: function (rpcResponse, data, rpcRequest) {               Relationship.disableButtons();               Relationship.qrmDirty = false;               Relationship.setProjectLocal();               if (isA.Boolean(navigateAway)) {                  if (navigateAway) {                     RiskTableWindow.selectTab(switchTab);                  }               }            }         });      },      cancelChanges: function () {         this.setProjectLocal();      },      isDirty: function () {         return this.qrmDirty;      },      setProject: function () {         this.RiskTableDetailViewer.setData({});         if (this.isDirty()) {            isc.ask("Save Changes to Summary Risk Relationships?", function (value) {               if (value) {                  Relationship.saveChanges(false);                  Relationship.setProjectLocal();               } else {                  Relationship.setProjectLocal();               }            });         } else {            this.setProjectLocal();         }      },      setProjectLocal: function () {         this.dirtyRecords.clear();         this.disableButtons();         this.currentProjectID = projectID;         this.qrmDirty = false;         isc.RPCManager.sendRequest({            actionURL: "./getRiskLiteRPC",            prompt: "Retrieving Summary Risk Relationships",            showPrompt: true,            evalResult: true,            params: {               "ULTRALITE": true,               "DESCENDANTS": checkDescendants.getValue(),               "PROJECTID": this.currentProjectID,               "FAMILY": true,               "NOCACHE": Math.random()            },            callback: function (rpcResponse, data, rpcRequest) {               var risks = data[0];               Relationship.disableButtons();               Relationship.qrmDirty = false;               if (isc.isA.Array(risks)) {                  for (var i = 0; i < risks.length; i++) {                     if (risks[i].summaryRisk || risks[i].forceDownParent) {                        risks[i]["isFolder"] = true;                        risks[i]["isFolderProperty"] = true;                        risks[i]["parentSummaryRisk"] = -100;                     }                  }               } else {                  try {                     if (risks.summaryRisk || risks.forceDownParent) {                        risks["isFolder"] = true;                        risks["isFolderProperty"] = true;                        risks["parentSummaryRisk"] = -100;                     }                  } catch (e) {                     // Expected if empty                  }               }               parentTree.setData(isc.Tree.create({                  ID: "parentTreeData",                  modelType: "parent",                  showRoot: false,                  rootValue: -100,                  nameProperty: "riskProjectCode",                  idField: "riskID",                  parentIdField: "parentSummaryRisk",                  data: risks               }));               parentTree.getData().closeAll();               UnAllocatedTable.setData(data[1]);            }         });      },      setDirty: function () {         Relationship.enableButtons();         Relationship.qrmDirty = true;      },      setClean: function () {         Relationship.disableButtons();         Relationship.qrmDirty = false;      },      navigateAway: function (modeSwitch, switchTab) {         if (modeSwitch && this.isDirty()) {            isc.say("Please save changes before switching modes");            return false;         } else if (modeSwitch && !this.qrmDirty) {            return true;         }         if (this.isDirty()) {            isc.ask("Save Changes to Summary Risk Relationships?", function (value) {               if (value) {                  Relationship.saveChanges(true, switchTab);               } else {                  Relationship.setClean();                  RiskTableWindow.selectTab(switchTab);               }            });            return false;         } else {            Relationship.setClean();            return true;         }      }   });}function defineReportWidget() {   isc.ToolStrip.create({      ID: "ReportsControls",      width: "100%",      height: 26,      defaultLayoutAlign: "center",      membersMargin: 5,      members: [isc.LayoutSpacer.create({         width: "*"      }), isc.QRMDeleteButton.create({         showDisabledIcon: true,         ID: "userJobTableHLayDelBtn",         prompt: "Delete Selected Report",         click: function () {            isc.ask("Are you sure you want to delete the selected reports?", function (value) {               if (value) {                  isc.RPCManager.sendRequest({                     evalResult: false,                     prompt: "Deleting Job",                     actionURL: "./deleteUserJobs",                     params: {                        "DATA": JSON.stringify(userJobTable.getSelection())                     },                     callback: function (rpcResponse, data, rpcRequest) {                        qoQRM.ConcurrentPane.setProject();                     }                  });               }            });         }      }), isc.QRMRefreshButton.create({         prompt: "Refresh Completed Reports",         click: function () {            qoQRM.ConcurrentPane.setProject();         }      })]   });   isc.ToolStrip.create({      ID: "ScheduleReportsControls",      defaultLayoutAlign: "center",      width: "100%",      height: 26,      membersMargin: 5,      members: [      isc.LayoutSpacer.create({         width: "*"      }), isc.QRMDeleteButton.create({         showDisabledIcon: true,         ID: "schedReportTableHLayDelBtn",         prompt: "Delete Selected Scheduled Report",         click: function () {            isc.ask("Are you sure you want to delete the selected scheduled jobs?", function (value) {               if (value) {                  isc.RPCManager.showPrompt = true;                  isc.RPCManager.sendRequest({                     prompt: "Deleting Job",                     evalResult: true,                     params: {                        "DATA": JSON.stringify(schedJobTable.getSelection())                     },                     callback: function (rpcResponse, rs, rpcRequest) {                        schedJobTable.updateJobScheduleTable();                     },                     actionURL: "./scheduleJobDelete"                  });               }            });         }      }), isc.QRMAddButton.create({         prompt: "New Scheduled Report",         title: "New Schedule",         click: function () {            isc.say("To schedule a report, you first need to execute a report and the report can then be scheduled from the viewing window");         }      })]   });   isc.ListGrid.create({      ID: "userJobTable",      autoDraw: false,      height: "50%",      selectionAppearance: "checkbox",      gridComponents: ["header", "body", ReportsControls],      selectionUpdated: function (record, recordList) {         if (this.getSelection().length > 0) {            userJobTableHLayDelBtn.setDisabled(false);         } else {            userJobTableHLayDelBtn.setDisabled(true);         }      },      alternateRecordStyles: true,      emptyMessage: "No Report or Analysis Jobs Found",      fields: [{         title: "Status",         type: "text",         width: 80,         align: "center",         formatCellValue: function (value, record, rowNum, colNum, grid) {                       if (record.failed) {               return "Failed";            } else if ((record.readyToCollect || record.collected) && record.jobDescription.indexOf("(Excel)") != -1){               return "<a href = './report?action=download&format=xlsx&jobID=" + record.jobID + "' >Download</a>";            }  else if ((record.readyToCollect || record.collected) && record.downloadOnly) {               return "<a href = './QRMAttachment?getJobResult=true&JOBID=" + record.jobID + "' >Download</a>";            } else if (record.readyToCollect || record.collected) {               return "<a href = './QRMReportWindow.jsp?jobID=" + record.jobID + "' onclick=\"openReport("+record.jobID+");return false;\">Ready</a>";            } else if (record.processing) {               return "Processing";            } else if (record.readyToExecute || (!record.processing && !record.readyToExecute)) {               return "Queued";            }         }      }, {         name: "jobID",         title: "Job ID",         type: "text",         width: 80,         align: "center"      }, {         name: "jobDescription",         title: "Description",         width: "100%",         align: "left"      }, {         name: "queuedDate",         title: "Queued Date",         width: 180,         align: "center",         type: "date",         formatCellValue: function (value) {            if (value) {               return value.toDateString() + "  " + value.toLocaleTimeString();            }         }      }, {         name: "executedDate",         title: "Completed",         width: 180,         align: "center",         type: "date",         formatCellValue: function (value) {            if (value) {               return value.toDateString() + "  " + value.toLocaleTimeString();            } else {               return "Pending";            }         }      }]   });   isc.ListGrid.create({      autoDraw: false,      ID: "schedJobTable",      gridComponents: ["header", "body", ScheduleReportsControls],      headerHeight: 40,      modalEditing: true,      alternateRecordStyles: true,      selectionAppearance: "checkbox",      selectionUpdated: function (record, recordList) {         if (this.getSelection().length > 0) {            schedReportTableHLayDelBtn.setDisabled(false);         } else {            schedReportTableHLayDelBtn.setDisabled(true);         }      },      height: "50%",      width: "100%",      canEdit: false,      emptyMessage: "No Scheduled Reports",      updateJobScheduleTable: function () {         try {            schedJobTable.getField(3).valueMap = qoValueMap.project;         } catch (e) {            alert(e.message);         }         isc.RPCManager.showPrompt = false;         prompt: "Retrieving Scheduled Jobs",         isc.RPCManager.sendRequest({            evalResult: true,            actionURL: "./getUserScheduledJobs",            callback: function (rpcResponse, jobs, rpcRequest) {               try {                  schedJobTable.getField(3).valueMap = qoValueMap.project;               } catch (e) {                  alert(e.message);               }               try {                  var d = new Date();                  var len = jobs.length;                  for (var i = 0; i < len; i++) {                     var record = jobs[i];                     var timeBits = record.timeStr.split(":");                     var hour = parseInt(timeBits[0], 10);                     var min = parseInt(timeBits[1], 10);                     d.setUTCHours(hour);                     d.setUTCMinutes(min);                     d.setUTCSeconds(0);                     record.timeStr = d.toLocaleTimeString();                  }                  schedJobTable.setData(jobs);               } catch (e) {                  alert(e.message);               }            }         });         isc.RPCManager.sendRequest({            evalResult: true,            actionURL: "./getHomePageReports",            callback: function (rpcResponse, data, rpcRequest) {               try {                  schedJobTable.getField(2).valueMap = data.getValueMap("internalID", "title");               } catch (e) {                  alert(e.message);               }            }         });      },      recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {         schedJobTable.deselectAllRecords();         getScheduleReportWindow().show();         scheduleReportForm.setValues(record);         DescendantForm2.setValues(record);         QRMNavigator2.selectSingleRecord(QRMNavigator2.data.data.find("projectID", record.projectID));      },      getBaseStyle: function (record, rowNum, colNum) {         if (colNum == 2 && (record.reportID == -50000 || record.reportID == -50001)) {            return "qrmRiskExportEntry";         }         return this.Super("getBaseStyle", arguments);      },      fields: [{         name: "description",         title: "Description",         type: "text",         width: "100%",         align: "left"      }, {         name: "reportID",         title: "Report Type",         type: "select",         width: 170,         align: "center"      }, {         name: "projectID",         title: "Project",         type: "select",         width: 130,         align: "center"      }, {         name: "descendants",         title: "Desc",         type: "boolean",         width: 50,         align: "center"      }, {         name: "Mon",         type: "boolean",         width: 40      }, {         name: "Tue",         type: "boolean",         width: 40      }, {         name: "Wed",         type: "boolean",         width: 40      }, {         name: "Thu",         type: "boolean",         width: 40      }, {         name: "Fri",         type: "boolean",         width: 40      }, {         name: "Sat",         type: "boolean",         width: 40      }, {         name: "Sun",         type: "boolean",         width: 40      }, {         title: "Time",         name: "timeStr",         type: "text",         width: 80,         align: "center"      }, {         title: "Email",         name: "email",         type: "boolean",         width: 50,         align: "center"      }],      headerSpans: [{         fields: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],         title: "Days to Run"      }]   });   isc.defineClass("ConcurrentWidget", "VLayout");   isc.ConcurrentWidget.addProperties({      helpURL: "./html/backgroundTasks_helpText.html",      autoDraw: false,      ID: "ConcurrentWidgetID",      membersMargin: 0,      layoutMargin: 0,      visibility: "hidden",      backgroundColor: qrmCtrlColor,      members: [isc.LayoutSpacer.create({         height: 20      }), isc.IButton.create({         title: "Select and Execute Report...",         icon: "[SKIN]/actions/forward.png",         width: 200,         showDisabledIcon: false,         click: function () {            qoReportEngine.selectAndRunReport();         }      }), isc.LayoutSpacer.create({         height: 20      }), isc.Label.create({         height: 30,         width: "100%",         layoutMargin: 5,         backgroundColor: qrmCtrlColor,         align: "left",         wrap: false,         contents: "<span style='font-weight:bold'>Completed Reports</span>"      }),      userJobTable, isc.Label.create({         height: 30,         width: "100%",         layoutMargin: 5,         backgroundColor: qrmCtrlColor,         align: "left",         wrap: false,         contents: "<span style='font-weight:bold'>Scheduled Reports</span>"      }), schedJobTable],      setProject: function (showTab) {         isc.RPCManager.showPrompt = false;         isc.RPCManager.sendRequest({            actionURL: "./getAllUserJobs",            prompt: "Retrieving User Jobs",            evalResult: false,            callback: function (rpcResponse, data, rpcRequest) {               userJobTable.setData(JSON.parse(data, dateParser));            }         });         schedJobTable.updateJobScheduleTable();         schedJobTable.deselectAllRecords();         userJobTable.deselectAllRecords();         schedReportTableHLayDelBtn.setDisabled(true);         userJobTableHLayDelBtn.setDisabled(true);      },      navigateAway: function () {         return true;      }   });}function openReport(jobID){      isc.RPCManager.sendRequest({      evalResult: true,      actionURL: "./getReportBean?jobID="+jobID,      callback: function (rpcResponse, bean, rpcRequest) {         var reportDesc = bean.reportDescription;      var executionDate = bean.executionDate;      var executionTime = bean.executionTime;      var user = bean.person;      var projectName = bean.projectName;      var descendants = bean.descendants;      var projectID = bean.projectID;      var reportID = bean.reportID;            isc.DynamicForm.create({         width:"100%",         ID:"RepDownloadForm",        colWidths: [20, "*"],        autoDraw:true,        titleWidth:10,        fields:[         {type : "header",defaultValue : "Download this report in the selected format",startRow : true,colSpan : 2},         { _constructor:"RowSpacerItem" },         {             linkTitle:"Download as PDF",             target:"javascript",             click:function(){                window.open("./report?action=download&format=pdf&jobID="+jobID, "_qrmDownloadTarget");                openReportWindow.hide();                isc.say("<center>Preparing Report For download.</center><center>The report will download when preparation is complete</center>");             },             canEdit:false,             _constructor:"LinkItem"         }, {             linkTitle:"Download as Word",             target:"javascript",             click:function(){                window.open("./report?action=download&format=doc&jobID="+jobID, "_qrmDownloadTarget");                openReportWindow.hide();                isc.say("<center>Preparing Report For download.</center><center>The report will download when preparation is complete</center>");             },             canEdit:false,             _constructor:"LinkItem"         }, {             linkTitle:"Download as Excel",             target:"javascript",             click:function(){                window.open("./report?action=download&format=xlsx&jobID="+jobID, "_qrmDownloadTarget");                openReportWindow.hide();                isc.say("<center>Preparing Report For download.</center><center>The report will download when preparation is complete</center>");             },             canEdit:false,             _constructor:"LinkItem"         }, {             linkTitle:"Download as PowerPoint",             target:"javascript",             click:function(){                window.open("./report?action=download&format=pptx&jobID="+jobID, "_qrmDownloadTarget");                openReportWindow.hide();                isc.say("<center>Preparing Report For download.</center><center>The report will download when preparation is complete</center>");             },             canEdit:false,             _constructor:"LinkItem"         }, {            linkTitle:"View in Browser",            target:"javascript",            click:function(){               window.open("./report?action=view&jobID="+jobID, "ReportWindow");               openReportWindow.hide();            },            canEdit:false,            _constructor:"LinkItem"         }, {                       _constructor:"RowSpacerItem"         }      ]    });            isc.DynamicForm.create({         ID:"RepScheduleForm",         numCols : 4,         colWidths:[10,100,10,100],         fields:[                                 {type : "header",defaultValue : "Schedule this report to be run automatically in future",startRow : true,colSpan : 4},             { _constructor:"RowSpacerItem" },             {type : "header",defaultValue : "Days of Execution",startRow : true,colSpan : 2},             {name : "Mon",title:"Monday",  type:"checkbox", defaultValue:true},             {name : "Tue",title:"Tuesday",  type:"checkbox", defaultValue:true},             {name : "Wed",title:"Wednesday", type : "boolean", defaultValue : true},             {name : "Thu",title:"Thursday", type : "boolean", defaultValue : true},             {name : "Fri",title:"Friday", type : "boolean", defaultValue : true},             {name : "Sat",title:"Saturday", type : "boolean", defaultValue : true},             {name : "Sun",title:"Sunday", type : "boolean", defaultValue : true},             { _constructor:"RowSpacerItem" },             {type : "header",defaultValue : "Time of Execution",startRow : true,colSpan : 4},             {name:"timeStr", title:"Execution Time", _constructor:"TimeItem", showTitle:false,colSpan : 2 },             { _constructor:"RowSpacerItem" },             {type : "header",defaultValue : "Report Distribution",startRow : true,colSpan : 4},             {title : "Email Results To User", name : "email",  type : "boolean" }         ]     });     isc.DynamicForm.create({         ID:"RepScheduleForm2",         titleOrientation: "top",         numCols : 1,         fields:[                                           {                               title : "Additional Recipients Email Addresses (seperated by a comma or newline)",                               name : "additionalUsers",                               type : "textarea",                               width : "100%"                       }         ]     });          var btnBar = isc.HLayout.create({             width : "100%",             height : 35,             layoutMargin : 5,             membersMargin:5,             members : [                        isc.LayoutSpacer.create({                                width : "100%"                        }),                        isc.IButton.create({                           width:160,                           title:"Close",                           click:function(){                              openReportWindow.hide();                           }                        }),                        isc.IButton.create({                                width : 160,                                title : "Submit Scheduled Report",                                click : function() {                                        if (RepScheduleForm.validate()) {                                                var record = RepScheduleForm.getValues();                                                try {                                                        record.Hour = record.timeStr.getUTCHours();                                                        record.Min = record.timeStr.getMinutes();                                                } catch (e) {                                                        record.Hour = record.timeStr.substring(0, 1);                                                        record.Min = record.timeStr.sunstring(3, 4);                                                }                                                record.projectID = projectID;                                                record.descendants = descendants;                                                record.additionalUsers = RepScheduleForm2.getValue("additionalUsers");                                                record.internalID = -1;                                                record.description = reportDesc;                                                record.reportID = reportID;                                                record.jobID = jobID;                                                                                                                                                isc.RPCManager.showPrompt = true;                                                try {                                                isc.RPCManager.sendRequest({                                                        prompt : "Scheduling Job",                                                        actionURL : "./scheduleJobUpdate",                                                        params : {"DATA" : JSON.stringify(record) },                                                        callback : function(rpcResponse, data,  rpcRequest) {                                                                try {                                                                        schedJobTable.updateJobScheduleTable();                                                                isc.say("Report Scheduled");                                                                } catch (e) {                                                                        alert(e.message);                                                                }                                                        }                                                });                                                } catch (e){                                                        alert(e.message);                                                }                                        }                                }                        }) ]     });             var html = "<br/><b>&nbsp;Report Name:</b>&nbsp;"+reportDesc+"<br/><b>&nbsp;Date of Execution:</b>&nbsp;"+executionDate+"<br/><b>&nbsp;Time of Execution:</b>&nbsp;"+executionTime;     html = html+"<br/><b>&nbsp;User Name:</b>&nbsp;"+user;          var detHeight = 100;          if (projectID > 0){             html = html+"<br/><b>&nbsp;Project:</b>&nbsp;"+projectName+"<br/><b>&nbsp;Descendants:</b>&nbsp;"+descendants;             detHeight = 120;     }        isc.HTMLPane.create({         ID:"ReportDetailPane",         dynamicContents:true,         contents:html,         height:detHeight,         width:"100%"     });          isc.HLayout.create({        ID:"LeftStackSection",        width: "100%",        autoDraw: true,        members: [                   isc.VLayout.create({                         members: [ReportDetailPane,RepDownloadForm]                   }),                   isc.VLayout.create({                      members: [RepScheduleForm,RepScheduleForm2,btnBar]                   })                ]                   });         isc.Window.create({         ID: "openReportWindow",         title: "Download and Schedule Reports",         layoutMargin: 5,         memberMargin: 5,         width:800,         height:500,         showMinimizeButton: false,         autoCenter: true,         isModal: true,         showModalMask: true,         autoDraw: true,         items: [LeftStackSection]      });               }   });  }function getScheduleReportWindow() {   isc.DynamicForm.create({      ID: "scheduleReportForm",      numCols: 2,      height: "100%",      width: 440,      titleWidth: 140,      fields: [{         name: "description",         title: "Description",         type: "text",         width: 300,         align: "left",         required: true      }, {         name: "reportID",         title: "Report Type",         type: "select",         valueMap: qoValueMap.projectReport,         width: 200,         required: true,         disabled: true      }, {         type: "header",         defaultValue: "Days and Time of Execution",         startRow: true,         colSpan: 2      }, {         name: "Mon",         type: "boolean",         defaultValue: true      }, {         name: "Tue",         type: "boolean",         defaultValue: true      }, {         name: "Wed",         type: "boolean",         defaultValue: true      }, {         name: "Thu",         type: "boolean",         defaultValue: true      }, {         name: "Fri",         type: "boolean",         defaultValue: true      }, {         name: "Sat",         type: "boolean",         defaultValue: true      }, {         name: "Sun",         type: "boolean",         defaultValue: true      }, {         title: "Time",         name: "timeStr",         type: "time",         width: 80,         required: true      }, {         type: "header",         defaultValue: "Report Distribution",         startRow: true,         colSpan: 2      }, {         title: "Email Results To User",         name: "email",         type: "boolean"      }, {         title: "Additional Recipients (Email addresses seperated by a comma or newline)",         name: "additionalUsers",         type: "textarea",         width: 300      }]   });   var btnBar = isc.HLayout.create({      width: 400,      height: 35,      layoutMargin: 5,      members: [isc.LayoutSpacer.create({         width: "100%"      }), isc.IButton.create({         width: 180,         title: "Submit Scheduled Report",         click: function () {            if (scheduleReportForm.validate()) {               var record = scheduleReportForm.getValues();               try {                  record.Hour = record.timeStr.getUTCHours();                  record.Min = record.timeStr.getMinutes();               } catch (e) {                  record.Hour = record.timeStr.substring(0, 1);                  record.Min = record.timeStr.sunstring(3, 4);               }               try {                  record.projectID = QRMNavigator2.getSelectedRecord().projectID;               } catch (e) {                  alert("Please select the desired project");                  return;               }               record.descendants = DescendantForm2.getValue("descendants");               record.update = true;               record.projectName = QRMNavigator2.getSelectedRecord().projectTitle;               isc.RPCManager.showPrompt = true;               isc.RPCManager.sendRequest({                  prompt: "Updating Job",                  evalResult: true,                  actionURL: "./scheduleJobUpdate",                  params: {                     "DATA": JSON.stringify(record)                  },                  callback: function (rpcResponse, data, rpcRequest) {                     try {                        scheduleReportWindow.hide();                        schedJobTable.updateJobScheduleTable();                     } catch (e) {                        alert(e.message);                     }                  }               });            }         }      })]   });   var rgtLayout = isc.VLayout.create({      members: [scheduleReportForm, btnBar]   });   isc.HLayout.create({      ID: "scheduleReportLayout",      width: 650,      membersMargin: 5,      members: [createProjectSelectorLayout(), rgtLayout]   });   isc.Window.create({      ID: "scheduleReportWindow",      title: "Schedule A Report",      layoutMargin: 5,      memberMargin: 5,      autoSize: true,      showMinimizeButton: false,      autoCenter: true,      isModal: true,      showModalMask: true,      autoDraw: false,      items: [scheduleReportLayout]   });   return scheduleReportWindow;}function createProjectSelectorLayout() {   isc.TreeGrid.create({      showConnectors: true,      height: "100%",      width: "100%",      ID: "QRMNavigator2",      autoDraw: false,      autoFetchData: false,      loadDataOnDemand: false,      folderIcon: "[SKIN]folder.png",      nameProperty: "projectTitle",      fields: [{         title: "Risk Projects",         name: "projectTitle",         formatCellValue: function (value, record, rowNum, colNum) {            if (record.projectID > 0) {               return value + " (" + record.projectCode + ")";            } else {               return value;            }         }      }],      dataArrived: function () {         this.getData().openAll();      }   });   QRMNavigator2.setData(isc.Tree.create({      ID: "projectTreeData",      modelType: "parent",      showRoot: false,      nameProperty: "projectID",      idField: "projectID",      parentIdField: "parentID",      data: projects   }));   isc.DynamicForm.create({      fields: [{         defaultValue: false,         align: "left",         title: "Include Descedant Projects",         type: "CheckboxItem",         name: "descendants",         startRow: true      }],      align: "right",      ID: "DescendantForm2",      titleWidth: 0,      width: "100%",      numCols: 2   });   return isc.VLayout.create({      height: 460,      width: 250,      members: [QRMNavigator2, DescendantForm2]   });}function getSignificantEventsGrid() {   return isc.ListGrid.create({      autoDraw: false,      ID: "eventGrid",      backgroundColor: qrmCtrlColor,      width: "100%",      height: "100%",      alternateRecordStyles: true,      recordDoubleClick: function () {         var record = eventGrid.getSelectedRecord();         if (record.element == 'RISK' || record.element == 'TASKS') {            qoRiskController.riskID = record.internalID;            getRiskAndDisplay(qoRiskController.riskID);         }         if (record.element == 'INCIDENT') {            RiskTableWindow.selectTab("IncidentsPaneID");         }         if (record.element == 'REVIEW') {            RiskTableWindow.selectTab("ReviewPaneID");         }      },      fields: [{         name: "name",         title: "Event"      }, {         name: "element",         title: "Element",         showIf: "false",         GROUP_RISK: 1,         GROUP_INCIDENT: 2,         GROUP_REVIEW: 3,         GROUP_TASK: 4,         getGroupValue: function (value, record, field, fieldName, grid) {            if (record.element == "RISK") return this.GROUP_RISK;            if (record.element == "INCIDENT") return this.GROUP_INCIDENT;            if (record.element == "REVIEW") return this.GROUP_REVIEW;            if (record.element == "TASKS") return this.GROUP_TASK;         },         getGroupTitle: function (groupValue, groupNode, field, fieldName, grid) {            switch (groupValue) {            case this.GROUP_RISK:               return "Recently Added Risks";               break;            case this.GROUP_INCIDENT:               return "Recently Reported Incidents and Issues";               break;            case this.GROUP_REVIEW:               return "Upcoming Risk Reviews";               break;            case this.GROUP_TASK:               return "Outstanding User Tasks";               break;            }         }      }, {         name: "date",         title: "Date",         type: "date",         align: "center",         width: 100,         formatCellValue: function (value, record, rowNum, colNum, grid) {            if (value && record.element != "TASKS") {               return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();            } else {               return "";            }         }      }],      groupStartOpen: [4],      groupByField: 'element'   });}function updateProjectContingency() {   isc.Window.create({      ID: "percentileModalWindow",      title: "Contingency Percentile",      autoSize: true,      autoCenter: true,      isModal: true,      showModalMask: true,      autoDraw: true,      items: [isc.DynamicForm.create({         autoDraw: false,         height: 48,         ID: "percentileForm",         padding: 4,         fields: [{            name: "percentile",            title: "Percentile",            type: "spinner",            min: 0,            max: 100,            step: 5,            defaultValue: 80         }, {            type: "button",            title: "Update Contingency",            colSpan: 2,            align: "right",            click: function () {               percentileModalWindow.hide();               isc.RPCManager.sendRequest({                  prompt: "Updating Project Contingency Calculations",                  evalResult: false,                  params: {                     "PROJECTID": project.projectID,                     "DESCENDANTS": checkDescendants.getValue(),                     "PERCENTILE": percentileForm.getItem("percentile").getValue()                  },                  callback: function (rpcResponse, data, rpcRequest) {                     updateSelectedProject();                  },                  actionURL: "./updateProjectContingency"               });            }         }]      })]   });}function getReviewWidget() {   return isc.VLayout.create({      helpURL: "./html/reviews_helpText.html",      qrmDirty: false,      ID: "Review",      height: "100%",      width: "100%",      members: [isc.ListGrid.create({         autoDraw: false,         width: "100%",         ID: "reviewWidgetTable",         height: "30%",         selectionType: "single",         gridComponents: ["header", "body", isc.ToolStrip.create({            defaultLayoutAlign: "center",            membersMargin: 5,            width: "100%",            height: 26,            members: [isc.LayoutSpacer.create({               width: "*"            }), isc.QRMEditButton.create({               showDisabledIcon: true,               ID: "revListViewEditBtn",               prompt: "Edit Selected Review",               click: function () {                  try {                     viewEditReview(reviewWidgetTable.getSelectedRecord());                  } catch (e) {                     alert(e);                  }               }            }), isc.QRMDeleteButton.create({               ID: "revListDeleteBtn",               showDisabledIcon: true,               prompt: "Remove Selected Review",               click: function () {                  Review.deleteReview(reviewWidgetTable.getSelectedRecord());               }            }), isc.QRMAddButton.create({               showDisabledIcon: true,               prompt: "Schedule New Review",               title: "New Review",               click: function () {                  isc.Window.create({                     ID: "scheduleReviewSimpleModalWindow",                     title: "New Scheduled Review",                     autoSize: true,                     showMinimizeButton: false,                     autoCenter: true,                     isModal: true,                     showModalMask: true,                     autoDraw: true,                     items: [getScheduleReviewSimpleLayout()]                  });               }            })]         })],         alternateRecordStyles: true,         sortField: 2,         sortDirection: "ascending",         recordClick: function () {            revListViewEditBtn.setDisabled(false);            revListDeleteBtn.setDisabled(false);         },         recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {            viewEditReview(record);         },         fields: [{            name: "reviewComments",            showIf: "false"         }, {            name: "title",            title: "Review",            width: "100%"         }, {            name: "scheduledDate",            title: "Schdueled Date",            type: "date",            align: "center",            width: 120,            formatCellValue: function (value) {               try {                  if (value) {                     return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                  }               } catch (e) {                  //               }            }         }, {            name: "actualDate",            title: "Actual Date",            type: "date",            align: "center",            width: 120,            formatCellValue: function (value) {               try {                  if (value) {                     return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                  }               } catch (e) {                  //               }            }         }, {            name: "reviewComplete",            title: "Complete",            type: "boolean",            width: 80,            getGroupTitle: function (groupValue, groupNode, field, fieldName, grid) {               if (groupValue) {                  return ("Completed Reviews");               } else {                  return ("Scheduled Reviews");               }            }         }],         groupStartOpen: "all",         groupByField: 'reviewComplete'      })],      setProjectLocal: function () {         revListViewEditBtn.setDisabled(true);         revListDeleteBtn.setDisabled(true);         // Get the risks associated with the review         isc.RPCManager.showPrompt = false;         isc.RPCManager.sendRequest({            prompt: "Retrieving Scheduled Reviews",            actionURL: "./getAllReviews",            evalResult: false,            callback: function (rpcResponse, data, rpcRequest) {               reviewWidgetTable.setData(JSON.parse(data, dateParser));            }         });      },      deleteReview: function (record) {         isc.ask("Are you sure you want to delete the selected review?", function (value) {            if (value) {               isc.RPCManager.showPrompt = false;               isc.RPCManager.sendRequest({                  actionURL: "./deleteReview",                  prompt: "Deleting Review",                  evalResult: true,                  params: {                     "REVIEWID": record.reviewID                  },                  callback: function (rpcResponse, data, rpcRequest) {                     if (data) {                        isc.say("Review not deleted. Only the project risk manager or the root project manager can delete the review");                     }                     Review.setProjectLocal();                  }               });            }         });      }   });}function viewEditReview(record) {   try {      qoCurrent.Review = record;      isc.Window.create({         ID: "viewEditReviewModalWindow",         headerControls: ["headerLabel", "closeButton"],         items: [getReviewEditReviewLayout()],         height: MainPane.height * 0.95,         width: 1100,         title: "Review Details",         isModal: true,         showModalMask: true,         showMaximizeButton: true,         autoCenter: true,         layoutMargin: 0,         edgeTop: 30,         headerDefaults: {            layoutMargin: 1,            membersMargin: 5,            height: 26         },         closeClick: function () {            viewEditReviewModalWindow.hide();         },         setDirty: function () {            viewEditReviewModalWindow.dirty = true;            if (!qoCurrent.Review.reviewComplete) {               editReviewSaveButton.setDisabled(false);               editReviewSaveButton.setTitle("<span style='font-weight:bold'>Save</span>");            } else {               isc.say("Review has already been marked as \"Complete\". No changes will be saved");            }         },         setClean: function () {            viewEditReviewModalWindow.dirty = false;            editReviewSaveButton.setDisabled(true);         }      });      viewEditReviewModalWindow.show();      reviewDetailForm1.setData(qoCurrent.Review);      reviewDetailForm1.getItem("reviewComplete").setDisabled(qoCurrent.Review.reviewComplete);      editReviewSaveButton.setDisabled(qoCurrent.Review.reviewComplete);      // Get the risks associated with the review      isc.RPCManager.showPrompt = false;      isc.RPCManager.sendRequest({         actionURL: "./getReviewRisks",         evalResult: true,         prompt: "Getting Review Risks",         params: {            "REVIEWID": qoCurrent.Review.reviewID         },         callback: function (rpcResponse, data, rpcRequest) {            reviewRiskTable.setData(data);         }      });      // Get the attachments associated with the review      getReviewAttachments(qoCurrent.Review.reviewID);      viewEditReviewModalWindow.setClean();   } catch (e) {      alert(e.message);   }}function getReviewAttachments(recordID) {   isc.RPCManager.showPrompt = false;   isc.RPCManager.sendRequest({      actionURL: "./getReviewAttachments",      prompt: "Retrieving Review Attachment",      evalResult: true,      params: {         "REVIEWID": recordID      },      callback: function (rpcResponse, data, rpcRequest) {         reviewAttachmentTable.setData(data);      }   });}function getReviewEditReviewLayout() {   var topPanel = isc.VLayout.create({      width: "100%",      height: "100%",      membersMargin: 5,      layoutMargin: 0,      members: [getReviewForm1(), isc.QRMLabel.create({         title: "Review Attachments"      }), isc.ListGrid.create({         ID: "reviewAttachmentTable",         height: "100%",         width: "100%",         autoDraw: false,         alternateRecordStyles: true,         selectionAppearance: "checkbox",         emptyMessage: "No Attachments for Review",         gridComponents: ["header", "body", isc.ToolStrip.create({            defaultLayoutAlign: "center",            width: "100%",            height: 26,            membersMargin: 5,            members: [isc.LayoutSpacer.create({               width: "*"            }), isc.QRMDeleteButton.create({               click: function () {                  isc.RPCManager.sendRequest({                     actionURL: "./deleteReviewAttachments",                     evalResult: false,                     params: {                        "DATA": reviewAttachmentTable.getSelection().internalID                     },                     callback: function (rpcResponse, data, rpcRequest) {                        getReviewAttachments(qoCurrent.Review.reviewID);                     }                  });               }            }), isc.QRMAddButton.create({               prompt: "Add New Attachment",               title: "Add New Attachment",               width: 180,               click: function () {                  isc.Window.create({                     items: [isc.QRMAttachmentForm.create({                        ID: "reviewAttachmentForm"                     })],                     ID: "reviewAttachmentWindow",                     title: "Review Attachment",                     layoutMargin: 0,                     autoDraw: true,                     isModal: true,                     showModalNask: true,                     autoSize: true,                     autoCenter: true                  });                  reviewAttachmentForm.showForm(qoCurrent.Review.reviewID, "REVIEW", function () {                     reviewAttachmentWindow.hide();                     getReviewAttachments(qoCurrent.Review.reviewID);                  });                  reviewAttachmentWindow.show();               }            })]         })],         fields: [{            name: "description",            title: "Decription",            width: "50%",            align: "left"         }, {            title: "Attachment",            type: "text",            width: 100,            align: "center",            formatCellValue: function (value, record, rowNum, colNum, grid) {               if (record.attachmentURL) {                  return "<a href = '" + record.attachmentURL + "' target='_blank'>Download</a>";               } else {                  return "<a href = '" + record.url + "' target='_blank'>View</a>";               }            }         }]      })]   });   isc.ListGrid.create({      ID: "reviewRiskTable",      autoDraw: false,      width: "100%",      alternateRecordStyles: true,      height: "100%",      selectionAppearance: "checkbox",      confirmCancelEditing: true,      confirmDiscardEdits: true,      getBaseStyle: function (record, rowNum, colNum) {         if (colNum == 0 || colNum == 1) {            return "rankItem" + record.currentTolerance;         } else {            return this.Super("getBaseStyle", arguments);         }      },      emptyMessage: "No Risk for this Review Found",      fields: [{         name: "riskProjectCode",         title: "Risk",         canEdit: false,         align: "left",         width: 80      }, {         name: "title",         title: "Title",         canEdit: false,         align: "left"      }, {         name: "comment",         title: "Review Comment",         canEdit: true,         editorType: "textArea",         editorProperties: {            height: 60         }      }],      recordClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {         reviewRiskEditBtn.setDisabled(false);      },      editorEnter: function () {         reviewRiskFinishEditBtn.show();         reviewRiskCancelEditBtn.show();         reviewRiskFinishEditBtn.setDisabled(false);         reviewRiskEditBtn.hide();         viewEditReviewModalWindow.setDirty();      },      editorExit: function (editCompletionEvent, record, newValue, rowNum, colNum) {         reviewRiskFinishEditBtn.hide();         reviewRiskCancelEditBtn.hide();         reviewRiskEditBtn.show();         return true;      }   });   isc.HLayout.create({      ID: "reviewEditorToolStrip",      height: 26,      membersMargin: 5,      align: "right",      initWidget: function () {         this.Super("initWidget", arguments);         isc.QRMEditButton.create({            ID: "reviewRiskEditBtn",            title: "Edit",            disabled: true,            click: function () {               reviewRiskTable.startEditing(reviewRiskTable.getRecordIndex(reviewRiskTable.getSelectedRecord()));            }         });         isc.QRMFinishButton.create({            title: "Finish Edits",            ID: "reviewRiskFinishEditBtn",            disabled: true,            visibility: "hidden",            click: function () {               reviewRiskTable.getSelection().setProperty("dirty", true);               reviewRiskTable.endEditing();               this.setDisabled(true);            }         });         isc.QRMCancelButton.create({            title: "Cancel Edits",            ID: "reviewRiskCancelEditBtn",            visibility: "hidden",            click: function () {               reviewRiskTable.cancelEditing();            }         });         this.addMembers([reviewRiskEditBtn, reviewRiskCancelEditBtn, reviewRiskFinishEditBtn]);      }   });   var updatePanel = isc.HLayout.create({      width: "100%",      membersMargin: 5,      layoutMargin: 0,      defaultLayoutAlign: "center",      members: [      isc.DynamicForm.create({         ID: "reviewRiskUpdateSelector",         numCols: 1,         layoutMargin: 0,         titleOrientation: "top",         showTitle: true,         layoutAlign: "center",         width: "100%",         fields: [{            type: "textarea",            title: "Enter comments on specific risks and press 'Apply Updates' to add comments to selected risks",            showTitle: true,            name: "update",            width: "100%",            height: 160,            required: true,            defaultValue: "Enter Risk Review Comment"         }]      }), isc.IButton.create({         title: "Apply Update",         width: 140,         click: function () {            viewEditReviewModalWindow.setDirty();            if (reviewRiskTable.getSelection().length > 0) {               reviewRiskTable.getSelection().setProperty("comment", reviewRiskUpdateSelector.getField("update").getValue());               reviewRiskTable.getSelection().setProperty("dirty", true);               for (var i = 0; i < reviewRiskTable.data.length; i++)               reviewRiskTable.refreshRow(i);            } else {               isc.say("No risks are selected for updating");            }         }      })]   });   isc.QRMSaveButton.create({      title: "Save",      ID: "editReviewSaveButton",      click: function () {         try {            reviewRiskTable.endEditing();            var val = reviewDetailForm1.getValues();            var detailObj = new Object();            detailObj.scheduledDate = simplifyDate(val.scheduledDate);            detailObj.actualDate = simplifyDate(val.actualDate);            detailObj.title = val.title;            detailObj.reviewComments = val.reviewComments;            detailObj.reviewComplete = val.reviewComplete;            detailObj.reviewID = val.reviewComplete;            isc.RPCManager.showPrompt = false;            isc.RPCManager.sendRequest({               actionURL: "./updateReview",               prompt: "Updating Review",               evalResult: true,               params: {                  "REVIEWID": qoCurrent.Review.reviewID,                  "RISKDATA": JSON.stringify(reviewRiskTable.getData().findAll("dirty", true)),                  "REVIEWDATA": JSON.stringify(detailObj)               },               callback: function (rpcResponse, data, rpcRequest) {                  Review.setProjectLocal();                  viewEditReviewModalWindow.setClean();               }            });         } catch (e) {            alert(e.message);            Review.setProjectLocal();         }      }   });   isc.HLayout.create({      ID: "reviewTopToolStrip",      align: "right",      layoutTopMargin: 5,      layoutMargin: 5,      membersMargin: 4,      members: [editReviewSaveButton]   });   isc.TabSet.create({      ID: "reviewTabSet",      width: "100%",      height: "100%",      tabBarPosition: "top",      tabs: [{         title: "Details and Attachments",         pane: topPanel      }, {         title: "Risks Under Review",         pane: isc.VLayout.create({            membersMargin: 5,            width: "100%",            height: "100%",            members: [updatePanel, reviewRiskTable, reviewEditorToolStrip]         })      }]   });   return isc.VLayout.create({      layoutMargin: 5,      width: "100%",      height: "100%",      members: [reviewTopToolStrip, reviewTabSet]   });}function getReviewForm1() {   return isc.DynamicForm.create({      ID: "reviewDetailForm1",      autoDraw: false,      titleOrientation: "left",      titleWidth: 130,      width: "100%",      numCols: 2,      fields: [{         name: "title",         title: "Review Title",         width: "*",         required: true,         changed: "viewEditReviewModalWindow.setDirty();"      }, {         name: "reviewComments",         title: "Comments",         type: "textarea",         width: "*",         height: 300,         changed: "viewEditReviewModalWindow.setDirty();"      }, {         name: "scheduledDate",         required: true,         title: "Schuduled Date",         changed: "viewEditReviewModalWindow.setDirty();",         type: "date"      }, {         name: "actualDate",         title: "Actual Date",         type: "date",         changed: "viewEditReviewModalWindow.setDirty();",         defaultValue: null      }, {         name: "reviewComplete",         title: "Review Completed",         type: "boolean",         change: function (form, item, value) {            if (value) {               try {                  isc.ask("Once a review is marked as being complete, no further updates can be made. \nDo you wish to proceed marking this review complete?", function (value1) {                     item.setValue(value1);                     viewEditReviewModalWindow.dirty = true;                     editReviewSaveButton.setDisabled(false);                     editReviewSaveButton.setTitle("<span style='font-weight:bold'>Save</span>");                  });               } catch (e) {                  alert(e.message);               }               return true;            } else {               item.setValue(value);               return true;            }         }      }, {         name: "reviewID",         type: "hidden"      }]   });}function defineQRMTileImage() {   isc.defineClass("QRMTileImage", "Img");   isc.QRMTileImage.addProperties({      width: 100,      height: 100,      imageType: "tile",      src: "[SKIN]grid.gif",      qrmDirty: false,      baseURL: "./paintMetric",      setQRMUrl: function () {         this.setSrc(this.baseURL + this.QRMURL + "&DESCENDANTS=" + checkDescendants.getValue());      }   });}function getReviewPane() {   return isc.VLayout.create({      width: "100%",      height: "100%",      ID: "reviewPane",      membersMargin: 5,      layoutMargin: 5,      navigateAway: function () {         return true;      },      setProject: function () {         this.setProjectLocal();      },      setProjectLocal: function () {         Review.setProjectLocal();      },      members: [isc.HLayout.create({         membersMargin: 5,         members: [isc.Label.create({            height: 30,            width: "100%",            layoutMargin: 5,            align: "left",            wrap: false,            contents: "<span style='font-weight:bold'>Completed and Scheduled Reviews of Risks</span>"         }), isc.DynamicForm.create({            width: 300,            numCols: 2,            titleWidth: "200",            ID: "reviewFilterForm",            autoDraw: false,            fields: [{               name: "riskID",               type: "text",               required: true,               title: "Reviews for Risk Code",               characterCasing: "upper",               width: 100,               colSpan: 1,               keyPress: function (item, form, keyName, characterValue) {                  if (keyName == "Enter" || keyName == "Tab") {                     try {                        qrmFindReviewsByRisk(item.getValue());                     } catch (e) {                        alert("Risk Table Line 1065" + e.message);                     }                  }               }            }]         }), isc.IButton.create({            width: 65,            align: "center",            title: "Find",            click: function () {               try {                  qrmFindReviewsByRisk(reviewFilterForm.getItem("riskID").getValue());               } catch (e) {                  alert(e.message);               }            }         }), isc.IButton.create({            width: 65,            align: "center",            title: "Clear Filter",            click: function () {               try {                  reviewPane.setProject();                  reviewFilterForm.clearValues();               } catch (e) {                  alert(e.message);               }            }         })]      }), getReviewWidget()]   });}function qrmFindReviewsByRisk(riskID) {   isc.RPCManager.showPrompt = false;   isc.RPCManager.sendRequest({      prompt: "Retrieving Scheduled Reviews",      actionURL: "./getAllReviews?riskCode=" + riskID,      evalResult: false,      callback: function (rpcResponse, data, rpcRequest) {         reviewWidgetTable.setData(JSON.parse(data, dateParser));      }   });}function defineOverviewWidget() {   var descriptionBlock = isc.VLayout.create({      width: 660,      height: "100%",      membersMargin: 5,      members: [isc.Label.create({         align: "left",         height: 15,         wrap: false,         contents: "<span class='qrmMinorTitle' style='color:black'>Metrics<span>"      }), isc.ListGrid.create({         ID: "overviewMetricTable",         autoDraw: false,         alternateRecordStyles: true,         height: "100%",         fields: [{            name: "data",            title: "Metric",            canEdit: false,            align: "left",            width: 230         }, {            name: "value",            title: "Value",            canEdit: false,            align: "left",            width: "100%"         }]      })]   });   var metricBlock = isc.TileLayout.create({      ID: "overviewMetricList",      backgroundColor: qrmCtrlColor,      height: 210,      animateTileChange: false,      autoDraw: true,      expandMargins: false,      tileHeight: 200,      tileWidth: 200,      width: "100%",      setData: function (data) {         if (this.tiles != null) this.tiles.setProperty("qrmDirty", true);         if (data != null && data.length > 0) {            for (var i = 0; i < data.length; i++) {               var item = data[i];               // Find the item if it exists               var met = this.tiles.find("ID", item.metricID);               if (met != null) {                  met.qrmDirty = false;                  met.QRMURL = item.picture;               } else {                  this.addTile(isc.QRMTileImage.create({                     ID: item.metricID,                     qrmDirty: false,                     QRMURL: item.picture                  }));               }            }         }         this.clearDirty();      },      clearDirty: function () {         if (this.tiles == null) return;         for (var i = 0; i < this.tiles.length; i++) {            var item = this.tiles[i];            if (item.qrmDirty) {               item.hide();            } else {               item.show();               item.setQRMUrl();            }         }      }   });   var eventBlock = isc.VLayout.create({      membersMargin: 5,      width: "100%",      height: "100%",      members: [isc.Label.create({         align: "left",         height: 15,         wrap: false,         contents: "<span class='qrmMinorTitle' style='color:black'>Significant Events<span>"      }), getSignificantEventsGrid()]   });   isc.defineClass("OverviewWidget", "VLayout");   isc.OverviewWidget.addProperties({      membersMargin: 5,      height: "100%",      width: "100%",      setProject: function () {         this.setProjectLocal();      },      navigateAway: function () {         return true;      },      setProjectLocal: function () {         isc.RPCManager.sendRequest({            prompt: "Retrieving Project Data",            actionURL: "./getWelcomeData",            evalResult: false,            params: {               "PROJECTID": projectID            },            callback: function (rpcResponse, data, rpcRequest) {               eventGrid.setData(JSON.parse(data, dateParser));            }         });         isc.RPCManager.sendRequest({            actionURL: "./getMetrics",            evalResult: true,            params: {               "DESCENDANTS": checkDescendants.getValue(),               "PROJECTID": project.projectID            },            callback: function (rpcResponse, data, rpcRequest) {               overviewMetricList.setData(data);            }         });         isc.RPCManager.sendRequest({            actionURL: "./getOverviewData",            evalResult: true,            params: {               "DESCENDANTS": checkDescendants.getValue(),               "PROJECTID": project.projectID            },            callback: function (rpcResponse, data, rpcRequest) {               overviewMetricTable.setData(data);            }         });      },      members: [isc.HLayout.create({         membersMargin: 5,         align: "center",         width: "100%",         height: "100%",         members: [descriptionBlock, eventBlock]      }), metricBlock]   });}function actOnChange(form) {      var distType = form.getValue('distType');   var mean = parseFloat(form.getValue("mean"));   var stdDev = parseFloat(form.getValue("stdDev"));   var simple = parseFloat(form.getValue("simple"));   var min = parseFloat(form.getValue("min"));   var max = parseFloat(form.getValue("max"));   var most = parseFloat(form.getValue("most"));   var lower = parseFloat(form.getValue("lower"));   var upper = parseFloat(form.getValue("upper"));        if (distType == 'au.com.quaysystems.qrm.util.probability.NormalDistribution' && mean > 0 && stdDev > 0) {      updateFormChart(form);   } else if ( distType == 'au.com.quaysystems.qrm.util.probability.SimpleDistribution' && simple > 0) {      updateFormChart(form);   } else if (distType == 'au.com.quaysystems.qrm.util.probability.TriangularDistribution' && min > 0 && most > 0 && max > 0 && min < most && most < max) {      updateFormChart(form);   } else if (distType == 'au.com.quaysystems.qrm.util.probability.TriGenDistribution' && (min < most) && (most < max) && (lower < upper) && upper < max && lower > min) {      updateFormChart(form);   } else if ((distType == 'au.com.quaysystems.qrm.util.probability.TruncNormalDistribution')  && (lower > 0) && (upper > 0) && (lower < upper) && (mean > 0) && (stdDev > 0)) {      updateFormChart(form);   } else if ( distType == 'au.com.quaysystems.qrm.util.probability.UniformDistribution' && lower >= 0 && upper > 0 && lower < upper) {      updateFormChart(form);   } else {      form.parentElement.chart.setSrc("[SKIN]grid.gif");   }}function defineRiskConsequenceProbWidget() {   isc.defineClass("RiskConsequenceProbWidget", "HLayout");   isc.RiskConsequenceProbWidget.addProperties({      preMit: true,      membersMargin: 5,      topMargin: 5,      width: "100%",      autoDraw: false,      qrmDirty: false,      editEnabled: false,      clear: function () {         this.qrmDirty = false;         this.currentRecord = null;         this.descreteGrid.hide();         this.probInputForm.show();         this.chart.show();      },      setQRMData: function (record) {         this.clear();         var newRec = new Object();         newRec.mean = (this.preMit) ? record.costDistributionParamsArray[0] : record.postCostDistributionParamsArray[0];         newRec.stdDev = (this.preMit) ? record.costDistributionParamsArray[1] : record.postCostDistributionParamsArray[1];         newRec.min = (this.preMit) ? record.costDistributionParamsArray[2] : record.postCostDistributionParamsArray[2];         newRec.most = (this.preMit) ? record.costDistributionParamsArray[3] : record.postCostDistributionParamsArray[3];         newRec.max = (this.preMit) ? record.costDistributionParamsArray[4] : record.postCostDistributionParamsArray[4];         newRec.lower = (this.preMit) ? record.costDistributionParamsArray[5] : record.postCostDistributionParamsArray[5];         newRec.upper = (this.preMit) ? record.costDistributionParamsArray[6] : record.postCostDistributionParamsArray[6];         newRec.simple = (this.preMit) ? record.costDistributionParamsArray[7] : record.postCostDistributionParamsArray[7];         try {            newRec.probability = (this.preMit) ? record.riskConsequenceProb : record.postRiskConsequenceProb;         } catch (e) {            newRec.probability = 0.0;         }         try {            newRec.distType = (this.preMit) ? record.costDistributionType : record.postCostDistributionType;         } catch (e) {            newRec.distType = "au.com.quaysystems.qrm.util.probability.NormalDistribution";         }         this.probInputForm.show();         this.probInputForm.setValues(newRec);         if (newRec.distType == "au.com.quaysystems.qrm.util.probability.DiscreteDistribution") {            var st = (this.preMit) ? record.costDistributionParams : record.postCostDistributionParams;            var params = eval("(" + st + ")");            params.setProperty("dirty", false);            this.descreteGrid.setData(params);            this.descreteGrid.dataChanged();            this.chart.hide();            this.descreteGrid.show();         } else {            updateFormChart(this.probInputForm);            this.chart.show();            this.descreteGrid.hide();         }      },      setMitState: function (state) {         this.preMit = state;         if (state) {            this.probInputForm.getItem("title").setValue("Pre Mitigation");         }         if (qoQRM.singlePhase) {            this.probInputForm.getItem("title").setValue("");         }      },      initWidget: function () {         this.Super("initWidget", arguments);         this.probInputForm = isc.DynamicForm.create({            titleOrientation: "left",            numCols: 2,            titleWidth: 140,            width: 300,            fields: [{               type: "header",               defaultValue: qoQRM.singlePhase ? "" : this.preMit ? "Pre Mtitgation" : "Post Mtitgation",               name: "title",               startRow: true            }, {               startRow: true,               width: 80,               required: true,               type: "double",               name: "probability",               keyPressFilter: "[0-9.]",               title: "% Probability",               validators: [{                  type: "floatRange",                  min: 0,                  max: 100.0               }],               defaultValue: 100.0,               changed: function (form, item, value) {                  // form.validate();                  // form.focusInItem(item);               }            }, {               startRow: true,               name: "distType",               title: "Distribution Type",               editorType: "select",               valueMap: qoValueMap.distributionType,               redrawOnChange: true,               change: function (form, item, value, oldValue) {                  if (item.valueMap[value] == "Discrete") {                     form.parentElement.chart.hide();                     form.parentElement.descreteGrid.show();                  } else {                     form.parentElement.descreteGrid.hide();                     form.parentElement.chart.show();                  }                  actOnChange(form);               },               changed: function (form, item, value, oldValue) {                 actOnChange(form);               }            }, {               name: "mean",               title: "Mean",               type: "double",               required: true,               validators: [{                  type: "floatRange",                  min: 0               }],               keyPressFilter: "[0-9.]",               showIf: "form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.NormalDistribution' " + "|| form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TruncNormalDistribution'",               changed: function (form, item, value) {                  actOnChange(form);               }            }, {               name: "stdDev",               title: "Std. Deviation",               type: "double",               required: true,               validators: [{                  type: "floatRange",                  min: 0               }],               keyPressFilter: "[0-9.]",               showIf: "form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.NormalDistribution' " + "|| form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TruncNormalDistribution'",               changed: function (form, item, value) {                  actOnChange(form);               }            }, {               name: "min",               title: "Minimum",               type: "double",               required: true,               validators: [{                  type: "floatRange",                  min: 0               }],               keyPressFilter: "[0-9.]",               showIf: "form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TriangularDistribution' " + "|| form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TriGenDistribution'",               changed: function (form, item, value) {                  actOnChange(form);               }            }, {               name: "most",               title: "Most Likely",               type: "double",               required: true,               validators: [{                  type: "floatRange",                  min: 0               }],               keyPressFilter: "[0-9.]",               showIf: "form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TriangularDistribution' " + "|| form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TriGenDistribution'",               changed: function (form, item, value) {                  actOnChange(form);               }            }, {               name: "max",               title: "Maximum",               type: "double",               required: true,               validators: [{                  type: "floatRange",                  min: 0               }],               keyPressFilter: "[0-9.]",               showIf: "form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TriangularDistribution' " + "|| form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TriGenDistribution'",               changed: function (form, item, value) {                  actOnChange(form);               }            }, {               name: "lower",               title: "Lower Limit",               type: "double",               required: true,               validators: [{                  type: "floatRange",                  min: 0               }],               keyPressFilter: "[0-9.]",               showIf: " form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TriGenDistribution'" + "|| form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.UniformDistribution'" + "|| form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TruncNormalDistribution'",               changed: function (form, item, value) {                  actOnChange(form);               }            }, {               name: "upper",               title: "Upper Limit",               type: "double",               required: true,               validators: [{                  type: "floatRange",                  min: 0               }],               keyPressFilter: "[0-9.]",               showIf: "form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TriGenDistribution'" + "|| form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.UniformDistribution'" + "|| form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.TruncNormalDistribution'",               changed: function (form, item, value) {                  actOnChange(form);               }            }, {               name: "simple",               title: "Value",               type: "double",               required: true,               validators: [{                  type: "floatRange",                  min: 0               }],               keyPressFilter: "[0-9.]",               showIf: "form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.SimpleDistribution' ",               changed: function (form, item, value) {                  actOnChange(form);               }            }, {               type: "spacer",               showIf: "form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.DiscreteDistribution' ",               colSpan: 2            }, {               name: "AddBtn",               title: "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add&nbsp;&nbsp;&nbsp;&nbsp;",               type: "button",               showIf: "form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.DiscreteDistribution' ",               align: "right",               showTitle: false,               colSpan: 2,               click: function (form, item) {                  var records = form.parentElement.descreteGrid.getData();                  records.push({                     value: 100,                     prop: 100,                     dirty: true                  });                  form.parentElement.descreteGrid.setData(records);                  form.parentElement.descreteGrid.dataChanged();               }            }, {               name: "DeleteBtn",               title: "Delete",               type: "button",               width: 70,               align: "right",               showTitle: false,               colSpan: 2,               showIf: "form.getValue('distType') == 'au.com.quaysystems.qrm.util.probability.DiscreteDistribution' ",               click: function (form, item) {                  form.parentElement.descreteGrid.removeSelectedRecord();               }            }]         });         this.descreteGrid = isc.ListGrid.create({            width: 400,            height: 200,            confirmDiscardEdits: false,            alternateRecordStyles: true,            autoSaveEdits: true,            canEdit: true,            editEvent: "click",            visibility: "hidden",            autoDraw: false,            editorExit: function (editCompletionEvent, record, newValue, rowNum, colNum) {               if (editCompletionEvent != "escape") {                  record.dirty = true;               }               return true;            },            getBaseStyle: function (record, rowNum, colNum) {               try {                  if (typeof (record.dirty) == "undefined") {                     return this.Super("getBaseStyle", arguments);                  } else {                     if (record.dirty) {                        return "newRecord";                     } else {                        return this.Super("getBaseStyle", arguments);                     }                  }               } catch (e) {                  return "newRecord";               }            },            removeSelectedRecord: function () {               try {                  var records = this.data;                  records.remove(this.getSelectedRecord());                  this.setData(records);                  this.dataChanged();               } catch (e) {                  alert(e);               }            },            fields: [{               name: "value",               title: "Value",               type: "double",               align: "center",               primaryKey: true,               required: true,               keyPressFilter: "[0-9.]"            }, {               name: "prop",               title: "Proportion",               align: "center",               type: "double",               required: true,               keyPressFilter: "[0-9.]"            }]         });         this.chart = isc.Img.create({            border: "1px solid black",            imageType: "tile",            src: "[SKIN]grid.gif",            height: 200,            width: 400,            autoDraw: false         });         this.addMembers([this.probInputForm, this.chart, this.descreteGrid]);      }   });}function updateFormChart(form) {   var col = (form.parentElement.preMit) ? "true" : "false";   form.parentElement.chart.setSrc(Page.getAppDir() + "getConsequenceImage?PREMIT=" + col + "&WIDTH=" + form.parentElement.chart.width + "&HEIGHT=" + form.parentElement.chart.height + "&VALUES=" + JSON.stringify(form.getValues()));   form.parentElement.qrmDirty = true;}function getIncidentWidgetPane() {   return isc.VLayout.create({      helpURL: "./html/incidents_helpText.html",      qrmDirty: false,      height: "100%",      width: "100%",      membersMargin: 5,      setProject: function () {         this.setProjectLocal();      },      setProjectLocal: function () {         Issue.setProject();      },      navigateAway: function (flag) {         return true;      },      members: [createIncidentFilterPane(), getIssuePaneListGrid()]   });}function createIncidentFilterPane() {   isc.DynamicForm.create({      fields: [{         type: "header",         defaultValue: "Status",         startRow: true      }, {         showTitle: false,         name: "Active",         defaultValue: true,         changed: "incidentFilterGroupChanged()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "Closed",         defaultValue: true,         changed: "incidentFilterGroupChanged()",         _constructor: "CheckboxItem"      }, {         _constructor: "RowSpacerItem"      }, {         _constructor: "RowSpacerItem"      }, {         _constructor: "Button",         align: "right",         colSpan: 2,         endRow: true,         disabled: true,         title: "Clear Filters",         ID: "clearFiltersBtnIncident",         click: function () {            try {               clearIncidentFilterGroup();               qoQRM.RiskTablePane.setProject();               this.disable();            } catch (e) {               alert(e.message);            }         }      }],      numCols: 1,      ID: "DynamicFormStatusIncident",      autoDraw: false   });   isc.DynamicForm.create({      numCols: 1,      ID: "DynamicFormToleranceIncident",      autoDraw: false,      titleWidth: 40,      fields: [{         type: "header",         defaultValue: "Severity",         changed: "incidentFilterGroupChanged()",         startRow: true      }, {         showTitle: false,         name: "Extreme",         defaultValue: true,         changed: "incidentFilterGroupChanged()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "High",         defaultValue: true,         changed: "incidentFilterGroupChanged()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "Significant",         defaultValue: true,         changed: "incidentFilterGroupChanged()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "Moderate",         defaultValue: true,         changed: "incidentFilterGroupChanged()",         _constructor: "CheckboxItem"      }, {         showTitle: false,         name: "Low",         defaultValue: true,         changed: "incidentFilterGroupChanged()",         _constructor: "CheckboxItem"      }]   });   isc.DynamicForm.create({      numCols: 1,      ID: "DynamicFormToleranceIncident2",      autoDraw: false,      fields: [{         type: "header",         defaultValue: "Impacted Risk Code",         startRow: true      }, {         name: "riskID",         type: "text",         showTitle: false,         characterCasing: "upper",         width: 100,         colSpan: 2,         keyPress: function (item, form, keyName, characterValue) {            if (keyName == "Enter" || keyName == "Tab") {               try {                  qrmFindIncidentByRisk(item.getValue());               } catch (e) {                  alert("Risk Table Line 1065" + e.message);               }            }         }      }, {         type: "header",         defaultValue: "Incident or Issue Code",         startRow: true      }, {         name: "incidentID",         type: "text",         showTitle: false,         characterCasing: "upper",         width: 100,         colSpan: 2,         keyPress: function (item, form, keyName, characterValue) {            if (keyName == "Enter" || keyName == "Tab") {               try {                  qrmFindIncidentByIncident(item.getValue());               } catch (e) {                  alert("Risk Table Line 1065" + e.message);               }            }         }      }]   });   isc.DynamicForm.create({      ID: "incidentDetailForm22",      autoDraw: false,      titleOrientation: "left",      width: 150,      numCols: 1,      fields: [{         _constructor: "HeaderItem",         defaultValue: "Areas of Impact",         colSpan: 2      }, {         name: "impReputation",         defaultValue: true,         title: "Reputation",         type: "checkbox",         defaultValue: true,         changed: "incidentFilterGroupChanged()",         showTitle: false      }, {         name: "impSafety",         defaultValue: true,         title: "Human Safety",         type: "checkbox",         defaultValue: true,         changed: "incidentFilterGroupChanged()",         showTitle: false      }, {         name: "impSpec",         defaultValue: true,         title: "Specification",         showTitle: false,         defaultValue: true,         changed: "incidentFilterGroupChanged()",         type: "checkbox"      }, {         name: "impTime",         defaultValue: true,         title: "Schedule",         showTitle: false,         defaultValue: true,         changed: "incidentFilterGroupChanged()",         type: "checkbox"      }, {         name: "impCost",         defaultValue: true,         title: "Cost",         defaultValue: true,         type: "checkbox",         changed: "incidentFilterGroupChanged()",         showTitle: false      }, {         name: "impEnviron",         defaultValue: true,         title: "Environment",         defaultValue: true,         type: "checkbox",         changed: "incidentFilterGroupChanged()",         showTitle: false      }]   });   isc.HStack.create({      membersMargin: 15,      backgroundColor: qrmCtrlColor,      margin: 2,      layoutMargin: 5,      height: "180",      ID: "FilterGroup2Incident",      members: [DynamicFormToleranceIncident, incidentDetailForm22, DynamicFormToleranceIncident2, DynamicFormStatusIncident],      autoDraw: false   });   return isc.HStack.create({      backgroundColor: qrmCtrlColor,      membersMargin: 15,      height: "180",      members: [FilterGroup2Incident],      autoDraw: false   });}function qrmFindIncidentByRisk(id) {   isc.RPCManager.showPrompt = true;   isc.RPCManager.sendRequest({      prompt: "Finding Incident",      evalResult: false,      actionURL: "./findIncidentByRisk",      params: {         "RISKCODE": id,         "NOCACHE": Math.random()      },      callback: function (rpcResponse, data, rpcRequest) {         try {            try {               issueGrid.setData((JSON.parse(data, dateParser)));            } catch (e) {               alert(e.message);            }            clearFiltersBtnIncident.enable();         } catch (e) {            isc.say("No Incident or Issues Found");            DynamicFormToleranceIncident2.getItem("riskID").setValue(null);            return;         }      }   });}function qrmFindIncidentByIncident(id) {   isc.RPCManager.showPrompt = true;   isc.RPCManager.sendRequest({      prompt: "Finding Incident or Issue",      evalResult: false,      actionURL: "./findIncidentByIncident",      params: {         "INCIDENTID": id,         "NOCACHE": Math.random()      },      callback: function (rpcResponse, data, rpcRequest) {         try {            var foundIncident = eval(data);            if (!foundIncident.projectID) {               isc.say("No Incident or Issues Found");               DynamicFormToleranceIncident2.getItem("incidentID").setValue(null);               return;            } else {               findIncidentCB(foundIncident);               clearFiltersBtnIncident.enable();            }         } catch (e) {            isc.say("No Incident or Issues Found");            DynamicFormToleranceIncident2.getItem("incidentID").setValue(null);            return;         }      }   });}function findIncidentCB(foundIncident) {   try {      isc.RPCManager.sendRequest({         prompt: "Getting Risk Project",         showPrompt: true,         evalResult: false,         params: {            "PROJECTID": foundIncident.projectID,            "DESCENDANTS": checkDescendants.getValue()         },         callback: function (rpcResponse, data, rpcRequest) {            project = JSON.parse(data, dateParser);            updateSelectedProject(true);            clearFiltersBtn.enable();            setTolMatixCB(project);            var index = -1;            try {               for (var i = 0; QRMNavigator.getRecord(i).projectID != project.projectID && i < 1000; i++) {                  index++;               }            } catch (e) {               // can happen if            }            QRMNavigator.selectSingleRecord(index + 1);            isc.RPCManager.showPrompt = false;            isc.RPCManager.sendRequest({               prompt: "Retreiving Issue and Incident Summaries",               actionURL: "./getAllIncidentsSummary",               evalResult: false,               bypassCache: true,               params: {                  "DESCENDANTS": checkDescendants.getValue(),                  "PROJECTID": projectID,                  "PROCESSFILTER": true,                  "INCIDENTID": foundIncident.incidentID,                  "NOCACHE": Math.random()               },               callback: function (rpcResponse1, data1, rpcRequest1) {                  try {                     issueGrid.setData((JSON.parse(data1, dateParser)));                  } catch (e) {                     alert(e.message);                  }               }            });         },         actionURL: "./getRiskProject"      });   } catch (e) {      alert(e);      isc.say("Risk Could Not Be Found");      DynamicFormTolerance.getItem("riskID").setValue(null);      return;   }}function incidentFilterGroupChanged() {   DynamicFormToleranceIncident2.getItem("riskID").setValue(null);   DynamicFormToleranceIncident2.getItem("incidentID").setValue(null);   clearFiltersBtnIncident.enable();   Issue.setProjectLocal();}function clearIncidentFilterGroup(noSet) {   DynamicFormToleranceIncident.getItem("Extreme").setValue(true);   DynamicFormToleranceIncident.getItem("High").setValue(true);   DynamicFormToleranceIncident.getItem("Significant").setValue(true);   DynamicFormToleranceIncident.getItem("Moderate").setValue(true);   DynamicFormToleranceIncident.getItem("Low").setValue(true);   DynamicFormStatusIncident.getItem("Active").setValue(true);   DynamicFormStatusIncident.getItem("Closed").setValue(true);   DynamicFormToleranceIncident2.getItem("riskID").setValue(null);   DynamicFormToleranceIncident2.getItem("incidentID").setValue(null);   incidentDetailForm22.getItem("impReputation").setValue(true);   incidentDetailForm22.getItem("impSafety").setValue(true);   incidentDetailForm22.getItem("impSpec").setValue(true);   incidentDetailForm22.getItem("impTime").setValue(true);   incidentDetailForm22.getItem("impCost").setValue(true);   incidentDetailForm22.getItem("impEnviron").setValue(true);   if (noSet) {      return;   }   Issue.setProjectLocal();}function getIssuePaneListGrid() {   return isc.VLayout.create({      ID: "Issue",      height: "100%",      width: "100%",      setProject: function () {         this.setProjectLocal();      },      setProjectLocal: function () {         try {            issueListViewEditBtn.setDisabled(true);            issueListDeleteBtn.setDisabled(true);            isc.RPCManager.showPrompt = false;            isc.RPCManager.sendRequest({               prompt: "Retreiving Issue and Incident Summaries",               actionURL: "./getAllIncidentsSummary",               evalResult: false,               bypassCache: true,               params: {                  "DESCENDANTS": checkDescendants.getValue(),                  "PROJECTID": projectID,                  "PROCESSFILTER": true,                  "TOLEX": DynamicFormToleranceIncident.getItem("Extreme").getValue(),                  "TOLHIGH": DynamicFormToleranceIncident.getItem("High").getValue(),                  "TOLSIG": DynamicFormToleranceIncident.getItem("Significant").getValue(),                  "TOLMOD": DynamicFormToleranceIncident.getItem("Moderate").getValue(),                  "TOLLOW": DynamicFormToleranceIncident.getItem("Low").getValue(),                  "STATACTIVE": DynamicFormStatusIncident.getItem("Active").getValue(),                  "STATCLOSED": DynamicFormStatusIncident.getItem("Closed").getValue(),                  "STATIMPREPUTATION": incidentDetailForm22.getItem("impReputation").getValue(),                  "STATIMPSAFETY": incidentDetailForm22.getItem("impSafety").getValue(),                  "STATIMPSPEC": incidentDetailForm22.getItem("impSpec").getValue(),                  "STATIMPTIME": incidentDetailForm22.getItem("impTime").getValue(),                  "STATIMPCOST": incidentDetailForm22.getItem("impCost").getValue(),                  "STATIMPENVIRON": incidentDetailForm22.getItem("impEnviron").getValue(),                  "NOCACHE": Math.random()               },               callback: function (rpcResponse, data, rpcRequest) {                  try {                     issueGrid.setData((JSON.parse(data, dateParser)));                  } catch (e) {                     alert(e.message);                  }               }            });         } catch (e) {            alert(e.message);         }      },      deleteIncident: function (record) {         isc.ask("Are you sure you want to delete the selected issue or incident?", function (value) {            if (value) {               isc.RPCManager.showPrompt = false;               isc.RPCManager.sendRequest({                  actionURL: "./deleteIncident",                  evalResult: true,                  params: {                     "INCIDENTID": record.incidentID                  },                  callback: function (rpcResponse, data, rpcRequest) {                     if (data) {                        isc.say("Item not deleted. Only the original submitter or the root project manager can delete the item");                     }                     Issue.setProjectLocal();                  }               });            }         });      },      members: [      isc.QRMLabel.create({         title: "Issues and Incidents"      }), isc.ListGrid.create({         ID: "issueGrid",         width: "100%",         height: "100%",         alternateRecordStyles: true,//         canExpandRecords: true,//         expansionMode: "details",         groupByField: "bActive",         sortField: "severity",         sortDirection: "descending",         groupStartOpen: "all",         gridComponents: ["header", "body", isc.ToolStrip.create({            defaultLayoutAlign: "center",            width: "100%",            height: 26,            membersMargin: 5,            members: [isc.LayoutSpacer.create({               width: "*"            }), isc.QRMEditButton.create({               ID: "issueListViewEditBtn",               prompt: "Edit Selected Issue",               click: function () {                  editQRMIncident(issueGrid.getSelectedRecord());               }            }), isc.QRMDeleteButton.create({               ID: "issueListDeleteBtn",               prompt: "Remove Selected Item",               click: function () {                  Issue.deleteIncident(issueGrid.getSelectedRecord());               }            }), isc.QRMAddButton.create({               title: "New Issue",               prompt: "Add New Issue",               click: function () {                  editQRMIncident({                     incidentID: -1,                     bIssue: true                  });               }            }), isc.QRMAddButton.create({               title: "New Incident",               prompt: "Add New Incident",               click: function () {                  editQRMIncident({                     incidentID: -1,                     bIssue: false                  });               }            })]         })],         recordClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {            issueListViewEditBtn.setDisabled(false);            issueListDeleteBtn.setDisabled(false);         },         recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {            editQRMIncident(record);         },         fields: [{            name: "incidentProjectCode",            title: "Code",            width: 100,            canReorder: false         }, {            name: "severity",            includeInRecordSummary: false,            showGridSummary: false,            showGroupSummary: false,            title: "Severity",            type: "image",            align: "center",            width: 70,            canReorder: false,            canGroupBy: true,            imageURLPrefix: "tol",            imageURLSuffix: ".png",            getGroupValue: function (value, record, field, fieldName, grid) {               return value;            },            getGroupTitle: function (groupValue, groupNode, field, fieldName, grid) {               switch (groupValue) {               case 5:                  return "Extreme";                  break;               case 4:                  return "High";                  break;               case 3:                  return "Significant";                  break;               case 2:                  return "Moderate";                  break;               case 1:                  return "Low";                  break;               }            }         }, {            name: "bIssue",            title: "Issue or Incident",            align: "center",            width: 100,            formatCellValue: function (value) {               if (value) {                  return "Issue";               } else {                  return "Incident";               }            },            getGroupTitle: function (groupValue, groupNode, field, fieldName, grid) {               if (groupValue) {                  return "Issues";               } else {                  return "Incidents";               }            }         }, {            name: "title",            title: "Issue",            width: "100%"         }, {            name: "reportedByStr",            title: "Reported By",            width: 120,            align: "center"         }, {            name: "dateIncident",            title: "Date Occured",            type: "date",            align: "center",            width: 120,            formatCellValue: function (value) {               try {                  if (value) {                     return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();                  }               } catch (e) {                  // Do nothing               }            }         }, {            name: "bActive",            showIf: "false",            getGroupValue: function (value, record, field, fieldName, grid) {               return value;            },            getGroupTitle: function (groupValue, groupNode, field, fieldName, grid) {               if (groupValue) {                  return "Active";               } else {                  return "Closed";               }            }         }]      })]   });}function defineMultiViewWindow(bIssue, newItem) {   if (newItem) {      isc.TabSet.create({         ID: "incidentTabSet",         width: "100%",         height: "100%",         tabBarPosition: "top",         tabs: [{            title: (bIssue) ? "Issue" : "Incident Details",            pane: getIncidentEditorDetail(bIssue)         }]      });   } else {      isc.TabSet.create({         ID: "incidentTabSet",         width: "100%",         height: "100%",         tabBarPosition: "top",         tabs: [{            title: (bIssue) ? "Issue" : "Incident Details",            pane: getIncidentEditorDetail(bIssue)         }, {            title: "Impacted Risks",            pane: getIncidentEditorRisks(bIssue)         }, {            title: "Impacted Objectives",            pane: getIncidentEditorObjective()         }, {            title: "Resolution Disposition",            pane: isc.VLayout.create({               width: "100%",               height: "100%",               members: [getIncidentEditorDisposition(bIssue), getIncidentEditorConsequences(bIssue)]            })         }, {            title: "Attachments",            pane: isc.VLayout.create({               width: "100%",               height: "100%",               members: [getIncidentEditorAttachment(bIssue)]            })         }]      });   }   try {      isc.QRMSaveButton.create({         title: "Save",         ID: "multiSaveBtn",         disabled: true,         click: function () {            saveIncidentChanges(function (rpcResponse, data, rpcRequest) {               viewEditMultiModalWindow.setClean();               if (qoCurrent.Incident.incidentID == -1) {                  try {                     viewEditMultiModalWindow.hide();                     Issue.setProjectLocal();                  } catch (e) {                     alert(e.message);                  }               } else {                  displayIncident();                  Issue.setProjectLocal();               }            });         }      });      isc.QRMRefreshButton.create({         ID: "multiResetBtn",         disabled: true,         click: function () {            displayIncident();         }      });      try {         isc.Window.create({            ID: "viewEditMultiModalWindow",            headerControls: ["headerLabel", "closeButton"],            headerDefaults: {               layoutMargin: 0,               membersMargin: 5,               height: 26            },            items: [isc.VLayout.create({               layoutMargin: 5,               members: [isc.HLayout.create({                  align: "right",                  layoutTopMargin: 5,                  layoutMargin: 5,                  membersMargin: 4,                  members: [multiSaveBtn, multiResetBtn]               }), incidentTabSet]            })],            height: Math.min(MainPane.height, 760),            width: Math.min(MainPane.width * 0.98, 1250),            dirty: false,            isModal: true,            showModalMask: true,            showMaximizeButton: true,            autoCenter: true,            layoutMargin: 0,            edgeTop: 30,            closeClick: function () {               incidentUpdatesTable.cancelEditing();               if (this.dirty) {                  isc.ask((bIssue) ? "Save Changes to Issue?" : "Save Changes to Incident?", function (value) {                     if (value) {                        saveIncidentChanges(function () {                           try {                              viewEditMultiModalWindow.dirty = false;                              viewEditMultiModalWindow.hide();                              Issue.setProjectLocal();                           } catch (e) {                              alert(e.message);                           }                        });                     } else {                        viewEditMultiModalWindow.hide();                        viewEditMultiModalWindow.dirty = false;                        Issue.setProjectLocal();                     }                  });               } else {                  viewEditMultiModalWindow.hide();                  Issue.setProjectLocal();               }            },            setDirty: function () {               try {                  viewEditMultiModalWindow.dirty = true;                  multiSaveBtn.setDisabled(false);                  if (qoCurrent.Incident.incidentID != -1) {                     multiResetBtn.setDisabled(false);                  }                  viewEditMultiModalWindow.setTitle("<span>* " + ((!newItem) ? qoCurrent.Incident.incidentProjectCode + " - " + qoCurrent.Incident.title : (bIssue) ? "New Issue" : "New Incident") + "</span>");               } catch (e) {                  alert(e.message);               }            },            setClean: function () {               try {                  viewEditMultiModalWindow.dirty = false;                  multiSaveBtn.setDisabled(true);                  multiResetBtn.setDisabled(true);                  viewEditMultiModalWindow.setTitle((!newItem) ? qoCurrent.Incident.incidentProjectCode + " - " + qoCurrent.Incident.title : (bIssue) ? "New Issue" : "New Incident");               } catch (e) {                  alert(e.message);               }            }         });      } catch (e) {         alert(e.message);      }   } catch (e) {      alert(e.message);   }}function getIncidentEditorDetail(bIssue) {   isc.DynamicForm.create({      ID: "incidentDetailForm1",      autoDraw: false,      titleOrientation: "left",      colWidths: [140, 200],      width: 700,      numCols: 2,      fields: [{         name: "title",         title: (bIssue) ? "Issue" : "Incident",         width: 650,         changed: "viewEditMultiModalWindow.setDirty();",         required: true      }, {         name: "dateIncident",         required: true,         title: "Date",         changed: "viewEditMultiModalWindow.setDirty();",         type: "date"      }, {         name: "reportedByStr",         required: true,         title: "Reported By",         changed: "viewEditMultiModalWindow.setDirty();",         type: "text"      }, {         name: "bActive",         title: "Currently Active",         changed: "viewEditMultiModalWindow.setDirty();",         type: "checkbox",         defaultValue: false      }, {         name: "severity",         title: "Severrity",         type: "select",         defaultValue: 2,         changed: "viewEditMultiModalWindow.setDirty();",         valueMap: {            5: "Extreme",            4: "High",            3: "Significant",            2: "Moderate",            1: "Low"         }      }, {         name: "description",         title: "Description",         required: true,         changed: "viewEditMultiModalWindow.setDirty();",         type: "textarea",         width: 650,         height: 100      }, {         name: "incidentID",         type: "hidden"      }, {         name: "bIssue",         type: "hidden",         defaultValue: bIssue      }]   });   isc.DynamicForm.create({      ID: "incidentDetailForm2",      autoDraw: false,      titleOrientation: "left",      width: 200,      numCols: 1,      fields: [{         _constructor: "HeaderItem",         defaultValue: "Areas of Impact",         colSpan: 2      }, {         name: "impReputation",         width: "200",         title: "Reputation",         type: "checkbox",         defaultValue: false,         changed: "viewEditMultiModalWindow.setDirty();",         showTitle: false      }, {         name: "impSafety",         width: "200",         title: "Human Safety",         type: "checkbox",         defaultValue: false,         changed: "viewEditMultiModalWindow.setDirty();",         showTitle: false      }, {         name: "impSpec",         width: "200",         title: "Specification",         showTitle: false,         defaultValue: false,         changed: "viewEditMultiModalWindow.setDirty();",         type: "checkbox"      }, {         name: "impTime",         width: "200",         title: "Schedule",         showTitle: false,         defaultValue: false,         changed: "viewEditMultiModalWindow.setDirty();",         type: "checkbox"      }, {         name: "impCost",         width: "200",         title: "Cost",         defaultValue: false,         type: "checkbox",         changed: "viewEditMultiModalWindow.setDirty();",         showTitle: false      }, {         name: "impEnviron",         width: "200",         title: "Environment",         defaultValue: false,         type: "checkbox",         changed: "viewEditMultiModalWindow.setDirty();",         showTitle: false      }]   });   return isc.VLayout.create({      membersMargin: 5,      members: [isc.QRMLabel.create({         title: (bIssue) ? "Issue Details" : "Incident Details"      }), isc.HLayout.create({         membersMargin: 20,         layoutMargin: 5,         members: [incidentDetailForm1, incidentDetailForm2]      }), getMultiEditorUpdates(bIssue)]   });}function getIncidentEditorRisks(bIssue) {   isc.ListGrid.create({      ID: "incidentPossibleRiskList",      width: "100%",      height: "100%",      dataSource: riskLiteDS,      canDragRecordsOut: true,      dragDataAction: "copy",      alternateRecordStyles: true,      autoFetchData: false,      fields: [{         name: "currentTolerance",         title: " ",         type: "image",         align: "center",         width: 30,         imageURLPrefix: "tol",         imageURLSuffix: ".png"      }, {         name: "riskProjectCode",         title: "Risk",         canEdit: false,         align: "left",         width: 60      }, {         name: "title",         title: "Title",         align: "left"      }]   });   isc.ListGrid.create({      ID: "incidentRiskTable",      width: "100%",      height: "100%",      canAcceptDroppedRecords: true,      canRemoveRecords: true,      autoFetchData: false,      alternateRecordStyles: true,      preventDuplicates: true,      leaveScrollbarGap: false,      warnOnRemoval: true,      removeRecordClick: function () {         this.Super("removeRecordClick", arguments);         viewEditMultiModalWindow.setDirty();      },      emptyMessage: (bIssue) ? "No Risks for this Issue Found" : "No Risks for this Incident Found",      fields: [{         name: "currentTolerance",         title: " ",         type: "image",         align: "center",         width: 30,         imageURLPrefix: "tol",         imageURLSuffix: ".png"      }, {         name: "riskProjectCode",         title: "Risk",         canEdit: false,         align: "left",         width: 60      }, {         name: "title",         title: "Title",         align: "left"      }]   });   return isc.HLayout.create({      membersMargin: 10,      height: "100%",      width: "100%",      members: [      isc.VLayout.create({         width: "100%",         members: [isc.QRMLabel.create({            title: "Impacted Risks"         }), incidentRiskTable]      }), isc.Img.create({         src: "arrow_left.png",         width: 32,         height: 32,         layoutAlign: "center",         click: function () {            incidentRiskTable.transferSelectedData(incidentPossibleRiskList);            viewEditMultiModalWindow.setDirty();         }      }), isc.VLayout.create({         width: "100%",         members: [         isc.QRMLabel.create({            title: (bIssue) ? "Select the risks impacted by this issue" : "Select the risks impacted by this incident"         }), incidentPossibleRiskList]      })]   });}function getIncidentEditorObjective() {   isc.TreeGrid.create({      ID: "IncidentObjectiveTree",      height: "100%",      width: "100%",      cursor: "hand",      nodeIcon: "[SKIN]file.png",      folderIcon: "[SKIN]file.png",      closedIconSuffix: "",      showOpenIcons: false,      showDropIcons: false,      showConnectors: true,      data: isc.Tree.create({         modelType: "parent",         nameProperty: "objective",         idField: "objectiveID",         parentIdField: "parentID",         data: qoAll.Objectives      }),      rowClick: function (record, recordNum, fieldNum) {         record.active = !record.active;         viewEditMultiModalWindow.setDirty();         IncidentObjectiveTree.redraw();      },      getCellCSSText: function (record, rowNum, colNum) {         if (rowNum == 0) {            return "color:black;";         }         if (colNum == 0) {            if (record.active) {               return "color:red;";            }         }      }   });   return isc.VLayout.create({      height: "100%",      width: "100%",      membersMargin: 5,      members: [IncidentObjectiveTree]   });}function getIncidentEditorDisposition(bIssue) {   isc.DynamicForm.create({      ID: "incidentDispositionForm1",      autoDraw: false,      titleOrientation: "left",      colWidths: [140, 350],      width: 700,      numCols: 2,      fields: [{         name: "lessonsLearnt",         title: "Lessons Learnt",         required: true,         changed: "viewEditMultiModalWindow.setDirty();",         type: "textarea",         width: 600,         height: 100      }, {         name: "controls",         title: "Controls In Place",         type: "textarea",         changed: "viewEditMultiModalWindow.setDirty();",         width: 600,         height: 100      }, {         name: "incidentID",         type: "hidden"      }]   });   isc.DynamicForm.create({      ID: "incidentDispositionForm2",      autoDraw: false,      titleOrientation: "left",      width: 200,      numCols: 1,      fields: [{         _constructor: "HeaderItem",         defaultValue: "Quality Measures",         colSpan: 2      }, {         name: "bControl",         width: "200",         title: "Controls Operated Effectively",         type: "checkbox",         defaultValue: false,         changed: "viewEditMultiModalWindow.setDirty();",         showTitle: false      }, {         name: "bCauses",         width: "200",         title: "Actual Causes Were Identified",         type: "checkbox",         defaultValue: false,         changed: "viewEditMultiModalWindow.setDirty();",         showTitle: false      }, {         name: "bMitigated",         width: "200",         title: "Mitigation and Response Plan were Effective",         showTitle: false,         defaultValue: false,         changed: "viewEditMultiModalWindow.setDirty();",         type: "checkbox"      }, {         name: "bIdentified",         width: "200",         title: "Risk Previously Identified",         showTitle: false,         defaultValue: false,         changed: "viewEditMultiModalWindow.setDirty();",         type: "checkbox"      }, {         name: "bRated",         width: "200",         title: "Risk Rated and Assesed Correctly",         defaultValue: false,         type: "checkbox",         changed: "viewEditMultiModalWindow.setDirty();",         showTitle: false      }, {         name: "bReviews",         width: "200",         title: "Reviews of Risk Effective",         defaultValue: false,         type: "checkbox",         changed: "viewEditMultiModalWindow.setDirty();",         showTitle: false      }]   });   if (bIssue) {      return isc.VLayout.create({         membersMargin: 5,         members: [isc.QRMLabel.create({            title: "Issue Disposition"         }), isc.HLayout.create({            membersMargin: 20,            layoutMargin: 5,            members: [incidentDispositionForm1]         })]      });   } else {      return isc.VLayout.create({         membersMargin: 5,         members: [isc.QRMLabel.create({            title: "Incident Disposition"         }), isc.HLayout.create({            membersMargin: 20,            layoutMargin: 5,            members: [incidentDispositionForm1, incidentDispositionForm2]         })]      });   }}function getIncidentEditorAttachment(bIssue) {   return isc.VLayout.create({      width: "100%",      height: "100%",      membersMargin: 5,      layoutMargin: 0,      members: [      isc.QRMLabel.create({         title: (bIssue) ? "Issue Attachements" : "Incident Attachments"      }), isc.ListGrid.create({         ID: "incidentAttachmentTable",         height: "100%",         width: "100%",         autoDraw: false,         alternateRecordStyles: true,         selectionAppearance: "checkbox",         emptyMessage: (bIssue) ? "No Attachments for Issue found" : "No Attachments for Incident found",         gridComponents: ["header", "body", isc.ToolStrip.create({            defaultLayoutAlign: "center",            width: "100%",            height: 26,            membersMargin: 5,            members: [            isc.LayoutSpacer.create({               width: "*"            }), isc.QRMDeleteButton.create({               // disabled               // :               // true,               click: function () {                  isc.RPCManager.sendRequest({                     actionURL: "./removeAttachments",                     params: {                        "DATA": JSON.stringify(incidentAttachmentTable.getSelection().getProperty("internalID"))                     },                     callback: function (rpcResponse, data, rpcRequest) {                        getIncidentAttachments(qoCurrent.Incident.incidentID);                     }                  });               }            }), isc.QRMAddButton.create({               prompt: (bIssue) ? "Add Issue Attachment" : "Add Incident Attachment",               title: (bIssue) ? "Add Issue Attachment" : "Add Incident Attachment",               width: 180,               click: function () {                  isc.Window.create({                     items: [isc.QRMAttachmentForm.create({                        ID: "incidentAttachmentForm"                     })],                     ID: "incidentAttachmentWindow",                     title: "Incident Attachment",                     layoutMargin: 0,                     autoDraw: true,                     isModal: true,                     showModalNask: true,                     autoSize: true,                     autoCenter: true                  });                  incidentAttachmentForm.showForm(qoCurrent.Incident.incidentID, "INCIDENT", function () {                     incidentAttachmentWindow.hide();                     getIncidentAttachments(qoCurrent.Incident.incidentID);                  });                  incidentAttachmentWindow.show();               }            })]         })],         fields: [{            name: "description",            title: "Decription",            width: "50%",            align: "left"         }, {            title: "Attachment",            type: "text",            width: 100,            align: "center",            formatCellValue: function (value, record, rowNum, colNum, grid) {               if (record.attachmentURL) {                  return "<a href = '" + record.attachmentURL + "' target='_blank'>Download</a>";               } else {                  return "<a href = '" + record.url + "' target='_blank'>View</a>";               }            }         }]      })]   });}function getIncidentEditorConsequences(bIssue) {   var table = isc.ListGrid.create({      ID: "incidentConsequencesTable",      autoDraw: false,      alternateRecordStyles: true,      width: "100%",      height: "100%",      confirmCancelEditing: true,      confirmDiscardEdits: true,      gridComponents: ["header", "body", isc.ToolStrip.create({         defaultLayoutAlign: "center",         width: "100%",         height: 26,         membersMargin: 5,         members: [isc.LayoutSpacer.create({            width: "*"         }), isc.QRMAddButton.create({            width: 150,            title: "Add New Consequence",            prompt: "Add New Consequence",            click: function () {               incidentConsequencesTable.startEditingNew();               viewEditMultiModalWindow.setDirty();            }         }), isc.QRMDeleteButton.create({            showDisabledIcon: true,            icon: "[SKIN]/actions/remove.png",            title: "Delete",            prompt: "Remove Selected Consequence",            click: function () {               try {                  incidentConsequencesTable.removeSelectedRecord();                  viewEditMultiModalWindow.setDirty();                  this.parentElement.dirty = true;               } catch (e) {                  alert(e.message);               }            }         })]      })],      removeSelectedRecord: function () {         try {            var records = this.data;            records.remove(this.getSelectedRecord());            this.setData(records);            this.dataChanged();         } catch (e) {            alert(e);         }      },      emptyMessage: (bIssue) ? "No Quantifiable Consequences for this Issue Found" : "No Quantifiable Consequences for this Incident Found",      fields: [{         name: "description",         title: "Description",         canEdit: true,         align: "left",         changed: "viewEditMultiModalWindow.setDirty();",         width: "100%"      }, {         name: "typeID",         title: "Type",         canEdit: true,         type: "select",         align: "center",         changed: "viewEditMultiModalWindow.setDirty();",         defaultValue: 2,         valueMap: qoValueMap.quantTypes,         width: 200      }, {         name: "value",         title: "Value",         canEdit: true,         align: "center",         width: 100,         changed: "viewEditMultiModalWindow.setDirty();",         validateOnChange: true,         validators: [{            type: "isFloat"         }]      }]   });   return isc.VLayout.create({      membersMargin: 5,      height: "100%",      width: "100%",      members: [isc.QRMLabel.create({         title: (bIssue) ? "Quatifiable Consequences of Issue" : "Quatifiable Consequences of Incident"      }), table]   });}function getMultiEditorUpdates(bIssue) {   var table = isc.ListGrid.create({      ID: "incidentUpdatesTable",      autoDraw: false,      alternateRecordStyles: true,      width: "100%",      height: "100%",      confirmCancelEditing: true,      confirmDiscardEdits: true,      gridComponents: ["header", "body", isc.ToolStrip.create({         defaultLayoutAlign: "center",         width: "100%",         height: 26,         membersMargin: 5,         members: [isc.LayoutSpacer.create({            width: "*"         }), isc.QRMAddButton.create({            title: "Add New Update",            width: 120,            prompt: "Add New Update",            ID: "multiAddUpdateBtn",            click: function () {               incidentUpdatesTable.startEditingNew({                  id: -1,                  reportedByStr: userName,                  dateEntered: new Date()               });               viewEditMultiModalWindow.setDirty();            }         })]      })],      removeSelectedRecord: function () {         try {            var records = this.data;            records.remove(this.getSelectedRecord());            this.setData(records);            this.dataChanged();         } catch (e) {            alert(e);         }      },      emptyMessage: (bIssue) ? "No Upates for this Issue Found" : "No Upates for this Incident Found",      editorExit: function (editCompletionEvent, record, newValue, rowNum, colNum) {         if (record == null && newValue == null) {            incidentUpdatesTable.cancelEditing();            try {               var recs = this.data;               recs.remove(record);               this.setData(recs);               this.dataChanged();            } catch (e) {               alert(e);            }         }      },      fields: [{         name: "description",         title: "Update",         canEdit: true,         align: "left",         changed: "viewEditMultiModalWindow.setDirty();",         width: "100%"      }, {         name: "reportedByStr",         canEdit: false,         align: "center",         width: 130,         title: "Entered By"      }, {         canEdit: false,         name: "dateEntered",         title: "Date Entered",         type: "date",         align: "center",         width: 120,         formatCellValue: function (value) {            if (value) {               return value.getShortMonthName() + ' ' + value.getDate() + ', ' + value.getFullYear();            }         }      }]   });   return isc.VLayout.create({      membersMargin: 5,      width: "100%",      height: "100%",      members: [isc.QRMLabel.create({         ID: "incidentUpdateLabel",         title: (bIssue) ? "Issue Updates" : "Incident Updates"      }), table]   });}function getIncidentAttachments(recordID) {   isc.RPCManager.showPrompt = false;   isc.RPCManager.sendRequest({      actionURL: "./getIncidentAttachments",      evalResult: true,      params: {         "INCIDENTID": recordID      },      callback: function (rpcResponse, data, rpcRequest) {         incidentAttachmentTable.setData(data);      }   });}function getIncidentUpdates(recordID) {   isc.RPCManager.showPrompt = false;   isc.RPCManager.sendRequest({      actionURL: "./getIncidentUpdates",      evalResult: true,      params: {         "INCIDENTID": recordID      },      callback: function (rpcResponse, data, rpcRequest) {         try {            incidentUpdatesTable.setData(data);         } catch (e) {            alert("Error Setting incident Updates " + e.message);         }      }   });}function editQRMIncident(record) {   var newItem = (record.incidentID == -1) ? true : false;   try {      qoCurrent.Incident = record;      defineMultiViewWindow(record.bIssue, newItem);      try {         viewEditMultiModalWindow.show();      } catch (e) {         alert("Line 917 " + e.message);      }      // Check if it is a new Incident      if (qoCurrent.Incident.incidentID == -1) {         incidentDetailForm1.setData(qoCurrent.Incident);         incidentDetailForm2.setData(qoCurrent.Incident);         viewEditMultiModalWindow.setClean();         multiResetBtn.setDisabled(true);         multiAddUpdateBtn.setDisabled(true);         incidentUpdatesTable.hide();         incidentUpdateLabel.hide();         return;      } else {         multiResetBtn.setDisabled(false);         multiAddUpdateBtn.setDisabled(false);         incidentUpdatesTable.show();         incidentUpdateLabel.show();      }      displayIncident();      viewEditMultiModalWindow.setClean();      viewEditMultiModalWindow.setTitle((!newItem) ? record.incidentProjectCode + " - " + record.title : (bIssue) ? "New Issue" : "New Incident");   } catch (e) {      alert("Error in editQRMIncident " + e.message);   }}function displayIncident() {   isc.RPCManager.showPrompt = false;   isc.RPCManager.sendRequest({      actionURL: "./getIncident",      evalResult: false,      params: {         "INCIDENTID": qoCurrent.Incident.incidentID      },      callback: function (rpcResponse, data, rpcRequest) {         try {            qoCurrent.Incident = JSON.parse(data, dateParser);            incidentTabSet.selectTab(0);            incidentDetailForm1.setData(qoCurrent.Incident);            incidentDetailForm2.setData(qoCurrent.Incident);            incidentDispositionForm1.setData(qoCurrent.Incident);            incidentDispositionForm2.setData(qoCurrent.Incident);            qoAll.Objectives.setProperty("active", false);            var objs = qoCurrent.Incident.objectivesImpacted;            for (var i = 0; i < objs.length; i++) {               IncidentObjectiveTree.data.data.find("objectiveID", objs[i]).active = true;            }            IncidentObjectiveTree.getData().openAll();         } catch (e) {            alert(e.message);         }         try {            incidentConsequencesTable.setData(qoCurrent.Incident.impacts);         } catch (e) {            incidentConsequencesTable.setData(null);         }         try {            incidentUpdatesTable.setData(qoCurrent.Incident.updates);         } catch (e) {            incidentUpdatesTable.setData(null);         }         // Get the risks associated with the incident         isc.RPCManager.showPrompt = false;         isc.RPCManager.sendRequest({            actionURL: "./getIncidentRisks",            evalResult: true,            params: {               "INCIDENTID": qoCurrent.Incident.incidentID            },            callback: function (rpcResponse2, data2, rpcRequest2) {               incidentRiskTable.setData(data2);            }         });         incidentPossibleRiskList.fetchData({            "DESCENDANTS": checkDescendants.getValue(),            "PROJECTID": project.projectID,            "OPERATION": "getRiskLiteFetch"         });         getIncidentAttachments(qoCurrent.Incident.incidentID);         viewEditMultiModalWindow.setClean();      }   });}function saveIncidentChanges(callbackFn) {   var value = incidentDetailForm1.getValues();   if (value.incidentID != -1) {      // Objective Data      var activeRecords = IncidentObjectiveTree.data.data.findAll("active", true);      var ids = new Array();      if (activeRecords != null) {         for (var i = 0; i < activeRecords.length; i++) {            ids.add(activeRecords[i].objectiveID);         }      } else {         ids.add(-1);      }      value.objectivesImpacted = ids;      // Risk Data      var activeRisks = incidentRiskTable.data;      var riskids = new Array();      if (activeRisks != null) {         for (i = 0; i < activeRisks.length; i++) {            riskids.add(activeRisks[i].riskID);         }      } else {         riskids.add(-1);      }      value.risksImpacted = riskids;      // Consequence Data      value.impacts = incidentConsequencesTable.getData();      value.updates = incidentUpdatesTable.getData();   }   // Save it to the server   isc.RPCManager.showPrompt = false;   isc.RPCManager.sendRequest({      actionURL: "./updateIncident",      evalResult: true,      params: {         "INCIDENTID": qoCurrent.Incident.incidentID,         "VALUE": value,         "PROJECTID": project.projectID      },      callback: callbackFn   });}function riskEditorDirty() {   if (!qoRiskController.secAllowEdit || !qoRiskController.allowEditorChanges) {      return;   }   riskSaveBtn.setDisabled(false);   riskResetBtn.setDisabled(false);   if (!qoRiskController.dirty) {      idRiskEditorWindow.setTitle("<span >*" + qoRiskController.currentRisk.riskProjectCode + " - " + qoRiskController.currentRisk.title + "</span>");   }   qoRiskController.dirty = true;   qoCurrent.Pane.dirty = true;   var thisTab = qoCurrent.Tab;   var title = thisTab.title;   if (title.charAt(title.length - 1) != "*") {      riskTabSet.setTabTitle(thisTab, title + "*");   }}function getRiskAttachments() {   isc.RPCManager.showPrompt = false;   isc.RPCManager.sendRequest({      actionURL: "./getRiskAttachments",      evalResult: true,      params: {         "RISKID": qoRiskController.riskID,         "PROJECTID": project.projectID      },      callback: function (rpcResponse, data, rpcRequest) {         riskEditorAttachmentTable.setData(data);      }   });}function getRiskComments() {   isc.RPCManager.showPrompt = false;   isc.RPCManager.sendRequest({      actionURL: "./getRiskComments",      evalResult: false,      params: {         "RISKID": qoRiskController.riskID,         "PROJECTID": project.projectID      },      callback: function (rpcResponse, data, rpcRequest) {         riskEditorCommentTable.setData(JSON.parse(data, dateParser));      }   });}function getRiskAndDisplayInt(id, viewRisk) {   qoRiskEditor.createRiskEditor();   isc.RPCManager.showPrompt = true;   isc.RPCManager.sendRequest({      showPrompt: true,      prompt: "Retrieving Risk",      actionURL: "./getRisk",      evalResult: false,      params: {         "RISKID": qoRiskController.riskID,         "PROJECTID": project.projectID,         "NOCACHE": Math.random()      },      callback: function (rpcResponse, data, rpcRequest) {         getRiskAndDisplayCallBack(data, null, viewRisk);      }   });}function getRiskCodeAndDisplayInt(id) {   isc.RPCManager.showPrompt = true;   isc.RPCManager.sendRequest({      showPrompt: true,      prompt: "Retrieving Risk",      actionURL: "./getRiskCode",      evalResult: false,      params: {         "RISKID": id,         "PROJECTID": project.projectID,         "NOCACHE": Math.random()      },      callback: function (rpcResponse, data, rpcRequest) {         try {            qoRiskEditor.createRiskEditor();            getRiskAndDisplayCallBack(data);         } catch (e) {            alert(e.message);            isc.say(data);         }      }   });}function getRiskAndDisplayCallBack(data, tabParam, viewRisk) {   var tabNum = tabParam || 0;   var rsk = JSON.parse(data, dateParser);   qoRiskController.currentRisk = rsk;   qoRiskController.dirty = false;   idRiskEditorWindow.setHeight(Math.min(MainPane.getHeight() * 0.98, 760));   idRiskEditorWindow.setWidth(Math.min(MainPane.getWidth() * 0.98, 1100));   idRiskEditorWindow.centerInPage();   idRiskEditorWindow.show();   // Control the edit access based on the security setting of the risk and the   // users credentials.   if (rsk.userUpdateSecurity) {      qoRiskController.secAllowEdit = true;      idRiskEditorWindow.setTitle("<span>" + rsk.riskProjectCode + " - " + rsk.title + "</span>");   } else {      qoRiskController.secAllowEdit = false;      idRiskEditorWindow.setTitle("<span>(Read Only) " + rsk.riskProjectCode + " - " + rsk.title + "</span>");   }   riskTabSet.selectTab(tabNum);   qoCurrent.TabNum = tabNum;   qoCurrent.Tab = riskTabSet.getSelectedTab();   qoCurrent.TabPane = riskTabSet.getTabPane(qoCurrent.Tab);   qoCurrent.TabID = "riskBasicEditorLayout";   // Add the listener for updates by other users   registerRiskInterest(qoRiskController.riskID);   try {      qoRiskEditor.displayRisk(rsk);   } catch (e) {      alert("Error display risk: " + e.message);   }}function newRisk(id, showHelp) {   if (typeof (editNewRiskBasicModalWindow) == "undefined") {      var hLay = isc.HLayout.create({         height: 30,         width: "100%",         membersMargin: 5,         align: "right",         layoutMargin: 5,         members: [isc.QRMSaveButton.create({            title: "Submit",            align: "center",            width: 100,            click: function () {               if (!riskNewBasicForm.validate()) return;               var riskID = parseInt(riskNewBasicForm.getValue("riskID"), 10);               var values = riskNewBasicForm.getValues();               values.startExposure = simplifyDate(values.startExposure);               values.endExposure = simplifyDate(values.endExposure);               var newRiskURL = "./newRisk";               if (riskID == qoQRM.qrmNewRisk || riskID == qoQRM.qrmNewSummaryRisk) {                  isc.RPCManager.showPrompt = true;                  editNewRiskBasicModalWindow.closeClick();                  if (riskNewBasicForm.getValue("forceDownRisk")) {                     newRiskURL = "./newForceDownRisk";                  }                  isc.RPCManager.sendRequest({                     prompt: "Creating New Risk",                     evalResult: true,                     params: {                        "DATA": JSON.stringify(riskNewBasicForm.getValues())                     },                     callback: function (rpcResponse, data, rpcRequest) {                        isc.say("Risk assigned ID: " + data);                        if (riskID == qoQRM.qrmNewRisk) {                           updateSelectedProject();                        } else if (riskID == qoQRM.qrmNewSummaryRisk) {                           Relationship.setProjectLocal();                        }                     },                     actionURL: newRiskURL                  });               }            }         }), isc.QRMCancelButton.create({            title: "Cancel",            click: function () {               editNewRiskBasicModalWindow.closeClick();            }         })]      });      var form = isc.DynamicForm.create({         ID: "riskNewBasicForm",         numCols: 2,         titleWidth: 140,         width: "100%",         height: "100%",         hiliteRequiredFields: true,         fields: [{            name: "title",            type: "text",            title: "Risk Title",            width: 600,            required: true         }, {            name: "summaryRisk",            title: "Summary Risk",            defaultValue: false,            type: "checkbox"         }, {            name: "forceDownRisk",            title: "Propogated Risk",            defaultValue: false,            type: "checkbox",            change: "form.getField('typePropogation').setDisabled(!value)"         }, {            name: "typePropogation",            type: "radioGroup",            colSpan: "*",            vertical: true,            disabled: true,            valueMap: {               0: "Immediate Sub Projects",               1: "All Sub Projects"            },            redrawOnChange: true,            defaultValue: 0,            title: "Propogate Risk To:"         }, {            name: "description",            width: 600,            type: "textarea",            required: true,            height: 90,            title: "Description"         }, {            name: "consequences",            width: 600,            title: "Consequences",            height: 90,            required: true,            type: "textarea"         }, {            name: "cause",            width: 600,            title: "Possible Causes",            height: 90,            type: "textarea"         }, {            name: "ownerID",            width: 200,            title: "Risk Owner",            required: true,            type: "select",            allowEmptyValue: false,            startRow: true         }, {            name: "manager1ID",            width: 200,            title: "Risk Manager",            required: true,            type: "select",            allowEmptyValue: false,            startRow: true         }, {            name: "startExposure",            width: 300,            title: "Start of Exposure",            type: "date",            startRow: true         }, {            name: "endExposure",            width: 300,            title: "End of Exposure",            type: "date",            startRow: true         }, {            name: "riskID",            _constructor: "HiddenItem"         }, {            name: "projectID",            _constructor: "HiddenItem"         }]      });      isc.Window.create({         ID: "editNewRiskBasicModalWindow",         title: "New Risk",         height: Math.min(MainPane.height * 0.95, 600),         width: Math.min(MainPane.width * 0.95, 900),         showMinimizeButton: false,         autoCenter: true,         isModal: true,         showModalMask: true,         autoDraw: true,         items: [isc.VLayout.create({            width: "100%",            membersMargin: 5,            layoutMargin: 5,            members: [form, hLay]         })]      });   } else {      editNewRiskBasicModalWindow.show();   }   riskNewBasicForm.getItem("ownerID").setValueMap(qoValueMap.owner);   riskNewBasicForm.getItem("manager1ID").setValueMap(qoValueMap.manager);   riskNewBasicForm.clearValues();   riskNewBasicForm.setValues({      "riskID": -1,      "projectID": projectID,      "forceDownRisk": false,      "typePropogation": 0   });   riskNewBasicForm.getField('typePropogation').setDisabled(true);   if (id == qoQRM.qrmNewSummaryRisk) {      editNewRiskBasicModalWindow.setTitle("New Summary Risk");      riskNewBasicForm.getItem("summaryRisk").setValue(true);      riskNewBasicForm.getItem("summaryRisk").disable();      riskNewBasicForm.getItem("forceDownRisk").setValue(false);      riskNewBasicForm.getItem("forceDownRisk").disable();   } else if (id == qoQRM.qrmNewPropogatedRisk) {      editNewRiskBasicModalWindow.setTitle("New Propogated Risk");      riskNewBasicForm.getItem("summaryRisk").setValue(false);      riskNewBasicForm.getItem("summaryRisk").disable();      riskNewBasicForm.getItem("forceDownRisk").setValue(true);      riskNewBasicForm.getItem("forceDownRisk").disable();      riskNewBasicForm.getField('typePropogation').setDisabled(false);   }}function deleteConsequence(id) {   isc.ask("Delete selected consequece?", function (value) {      if (value) {         isc.RPCManager.showPrompt = false;         isc.RPCManager.sendRequest({            actionURL: "./deleteConsequence",            evalResult: true,            params: {               "ID": id,               "RISKID": qoRiskController.riskID,               "PROJECTID": project.projectID            },            callback: function (rpcResponse, data, rpcRequest) {               for (var i = 0; i < data.length; i++) {                  data[i].type = data[i].quantImpactType.description + " (" + data[i].quantImpactType.units + ")";               }               riskEditorConsequenceTable.setData(data);            }         });      }   });}function updateRiskEditorContingency() {   var values = contingencyForm.getValues();   values.riskID = qoRiskController.riskID;   isc.RPCManager.sendRequest({      actionURL: "./calcRiskContingency",      showPrompt: true,      prompt: "Calculating Contingency",      evalResult: false,      params: {         "RISKID": qoRiskController.currentRisk.riskID,         "PROJECTID": qoRiskController.currentRisk.projectID,         "DATA": JSON.stringify(values)      },      callback: function (rpcResponse, data, rpcRequest) {         try {            contingencyForm2.getItem("viewState").setDisabled(false);            contingencyForm2.getItem("viewState").setValueDisabled("UnTreated", false);            contingencyForm2.getItem("viewState").setValueDisabled("Treated", false);            contingencyForm2.markForRedraw();            contingencyForm.setValues(JSON.parse(data, dateParser));            contingencyForm.getItem("saveContingencyButton").setDisabled(false);            contingencyGraph.setSrc(Page.getAppDir() + "getContingencyGraph?HEIGHT=" + contingencyGraph.getHeight() + "&WIDTH=" + contingencyGraph.getWidth() + "&preMit=" + contingencyForm2.getItem("viewState").getValue() + "&nocache=" + Math.random());         } catch (e) {            isc.say(e.message);         }      }   });}function updateConsequnceTable() {   var costFound = false;   var cons = qoRiskController.currentRisk.probConsequenceNodes;   for (var i = 0; i < cons.length; i++) {      cons[i].type = cons[i].quantImpactType.description + " (" + cons[i].quantImpactType.units + ")";      cons[i].costCategroy = cons[i].quantImpactType.costCategroy;      if (cons[i].quantImpactType.costCategroy) {         costFound = true;      }   }   if (costFound && !riskBasicForm.getItem("useCalculatedContingency").getValue()) {      consqCostWarningLabel.show();   } else {      consqCostWarningLabel.hide();   }   try {      riskEditorConsequenceTable.setData(cons);      riskEditorConsequenceTable.markForRedraw();      consqCostWarningLabel.markForRedraw();      contingencyForm.getItem("saveContingencyButton").setDisabled(true);      contingencyForm.setValues(qoRiskController.currentRisk);   } catch (e) {      isc.say(e.message);   }   contingencyForm2.getItem("viewState").setDisabled(true);   contingencyGraph.setSrc("[SKIN]grid.gif");}function newRiskComment() {   isc.Window.create({      ID: "riskCommentModalWindow",      title: "Risk Comment",      showMinimizeButton: false,      autoSize: true,      autoCenter: true,      isModal: true,      showModalMask: true,      closeClick: function () {         RiskCommentForm.clearValue("comment");         RiskCommentForm.clearValue("commenturl");         RiskCommentForm.clearValue("UploadItem0");         riskCommentModalWindow.hide();      },      autoDraw: true,      items: [getNewCommentLayout()]   });   riskCommentModalWindow.show();   RiskCommentForm.getItem("riskID").setValue(qoRiskController.currentRisk.riskID);}function getNewCommentLayout() {   return isc.VLayout.create({      membersMargin: 5,      layoutMargin: 5,      members: [isc.DynamicForm.create({         ID: "RiskCommentForm",         numCols: 1,         titleOrientation: "top",         width: 600,         encoding: "multipart",         target: "_qrmFormTarget",         action: "./QRMComment?saveComment=true",         fields: [{            _constructor: "HeaderItem",            defaultValue: "New Comment"         }, {            title: "Comment",            required: true,            name: "comment",            _constructor: "TextArea",            width: "600",            height: 200         }, {            title: "File Attachment",            name: "UploadItem0",            _constructor: "UploadItem",            width: 600         }, {            title: "Comment URL",            name: "commenturl",            _constructor: "Text",            width: 600         }, {            name: "riskID",            type: "hidden"         }]      }), isc.ToolStrip.create({         autoDraw: false,         width: 600,         layoutMargin: 5,         membersMargin: 5,         // backgroundColor:qrmCtrlColor,         height: 24,         members: [isc.Label.create({            contents: "",            width: "100%",            autoDraw: false         }), isc.QRMSaveButton.create({            title: "Submit",            click: function () {               if (RiskCommentForm.validate()) {                  RiskCommentForm.submitForm();                  RiskCommentForm.clearValue("comment");                  RiskCommentForm.clearValue("commenturl");                  RiskCommentForm.clearValue("UploadItem0");                  riskCommentModalWindow.hide();               }            }         }), isc.QRMCancelButton.create({            click: function () {               RiskCommentForm.clearValue("comment");               RiskCommentForm.clearValue("commenturl");               RiskCommentForm.clearValue("UploadItem0");               riskCommentModalWindow.hide();            }         })]      })]   });}function getRiskReviewLayoutData() {   isc.RPCManager.showPrompt = false;   isc.RPCManager.sendRequest({      evalResult: false,      params: {         "RISKID": qoRiskController.riskID,         "PROJECTID": project.projectID      },      callback: function (rpcResponse, data, rpcRequest) {         riskReviewLayoutRevTable.setData(JSON.parse(data, dateParser));      },      actionURL: "./getRiskReviews"   });}function getRiskAuditData() {   // All the audit point information is stored in the comments fo the risk,   // even if the user does not record an actual comment for the audit.   isc.RPCManager.showPrompt = false;   isc.RPCManager.sendRequest({      actionURL: "./getRiskComments",      evalResult: false,      params: {         "RISKID": qoRiskController.riskID,         "PROJECTID": project.projectID      },      callback: function (rpcResponse, data, rpcRequest) {         var comments = JSON.parse(data, dateParser);         var idRev = null;         var evalRev = null;         var mitRev = null;         var idApp = null;         var evalApp = null;         var mitApp = null;         try {            idRev = comments.findAll("identification", true).find("review", true);         } catch (e) {            //         }         try {            evalRev = comments.findAll("evaluation", true).find("review", true);         } catch (e) {            //         }         try {            mitRev = comments.findAll("mitigation", true).find("review", true);         } catch (e) {            //         }         try {            idApp = comments.findAll("identification", true).find("approval", true);         } catch (e) {            //         }         try {            evalApp = comments.findAll("evaluation", true).find("approval", true);         } catch (e) {            //         }         try {            mitApp = comments.findAll("mitigation", true).find("approval", true);         } catch (e) {            //         }         var arr = new Array();         if (typeof (idRev) == "undefined" || idRev == null) {            idRev = new Object();            idRev.person = "-";            idRev.comment = "Not Yet Entered";         }         idRev.step = "Identification Review", arr.push(idRev);         if (typeof (idApp) == "undefined" || idApp == null) {            idApp = new Object();            idApp.person = "-";            idApp.comment = "Not Yet Entered";         }         idApp.step = "Identification Approval", arr.push(idApp);         if (typeof (evalRev) == "undefined" || evalRev == null) {            evalRev = new Object();            evalRev.person = "-";            evalRev.comment = "Not Yet Entered";         }         evalRev.step = "Evaluation Review", arr.push(evalRev);         if (typeof (evalApp) == "undefined" || evalApp == null) {            evalApp = new Object();            evalApp.person = "-";            evalApp.comment = "Not Yet Entered";         }         evalApp.step = "Evaluation Approval", arr.push(evalApp);         if (typeof (mitRev) == "undefined" || mitRev == null) {            mitRev = new Object();            mitRev.person = "-";            mitRev.comment = "Not Yet Entered";         }         mitRev.step = "Mitigation Review", arr.push(mitRev);         if (typeof (mitApp) == "undefined" || mitApp == null) {            mitApp = new Object();            mitApp.person = "-";            mitApp.comment = "Not Yet Entered";         }         mitApp.step = "Mitigation Approval", arr.push(mitApp);         riskReviewLayoutAuditTable.setData(arr);      }   });}function getSaveAsSubmitForm() {   return isc.DynamicForm.create({      autoDraw: true,      ID: "SaveAsSubmitForm",      visibility: "hidden",      action: "./QRMReport/report",      canSubmit: true,      fields: [{         name: "riskID",         type: "hidden"      }, {         name: "format",         type: "hidden"      }, {         name: "ReportID",         type: "hidden",         defaultValue: -2      }]   });}function newAudit() {   isc.Window.create({      ID: "riskAuditModalWindow",      title: "Register Audit Milestone",      showMinimizeButton: false,      autoSize: true,      autoCenter: true,      isModal: true,      showModalMask: true,      closeClick: function () {         RiskAuditForm.clearValue("comment");         riskAuditModalWindow.hide();      },      autoDraw: true,      items: [getNewAuditLayout()]   });   riskAuditModalWindow.show();}function getNewAuditLayout() {   return isc.VLayout.create({      membersMargin: 5,      layoutMargin: 5,      members: [      isc.DynamicForm.create({         ID: "RiskAuditForm",         numCols: 1,         titleOrientation: "top",         width: 600,         fields: [{            _constructor: "HeaderItem",            defaultValue: "Register Audit"         }, {            title: "Audit Type",            required: true,            name: "type",            _constructor: "SelectItem",            width: 600,            defaultValue: 1,            valueMap: {               1: "Identification of Risk Reviewed",               2: "Identification of Risk Approved",               3: "Evaluation of Risk Reviewed",               4: "Evaluation of Risk Approved",               5: "Mitigation Plan of Risk Reviewed",               6: "Mitigation Plan of Risk Approved"            }         }, {            title: "Comment",            required: true,            name: "comment",            _constructor: "TextArea",            width: "600",            height: 200         }]      }), isc.ToolStrip.create({         autoDraw: false,         width: 600,         layoutMargin: 5,         membersMargin: 5,         backgroundColor: "white",         height: 24,         members: [         isc.Label.create({            contents: "",            width: "100%",            autoDraw: false         }), isc.QRMSaveButton.create({            title: "Submit",            click: function () {               if (RiskAuditForm.validate()) {                  var item = RiskAuditForm.getItem("type");                  isc.ask("Are you sure you wisk to register '" + item.valueMap[item.getValue()] + "' for risk " + qoRiskController.currentRisk.riskProjectCode, function (                  value) {                     if (value) {                        isc.RPCManager.showPrompt = false;                        isc.RPCManager.sendRequest({                           evalResult: true,                           params: {                              "DATA": JSON.stringify(RiskAuditForm.getValues()),                              "RISKID": qoRiskController.currentRisk.riskID,                              "PROJECTID": project.projectID                           },                           callback: function (rpcResponse, data, rpcRequest) {                              RiskAuditForm.clearValue("comment");                              RiskAuditForm.resetValue("type");                              riskAuditModalWindow.hide();                              qoRiskController.resetOnExit = true;                              // Will                              // reset                              // the                              // risk                              // table                              // on                              // exit                              // of                              // window                              if (data) {                                 isc.say("Audit Registered");                              } else {                                 isc.say("User Not Authorised to Register an Audit");                              }                              getRiskAuditData();                           },                           actionURL: "./registerAudit"                        });                     } else {                        RiskAuditForm.clearValue("comment");                        RiskAuditForm.resetValue("type");                        riskAuditModalWindow.hide();                     }                  });               }            }         }), isc.QRMCancelButton.create({            click: function () {               RiskAuditForm.clearValue("comment");               RiskAuditForm.resetValue("type");               riskAuditModalWindow.hide();            }         })]      })]   });}function resetCurrentProject() {   resetProject(project.projectID);}function resetProject(id) {   isc.RPCManager.sendRequest({      prompt: "Retrieving Risk Project",      showPrompt: true,      evalResult: false,      actionURL: "./getRiskProjectMgr",      params: {         "PROJECTID": id,         "NONCACHE": Math.random()      },      callback: function (rpcResponse, dataJS, rpcRequest) {         try {            var data = JSON.parse(dataJS, dateParser);            qoAll.Users.clear();            qoStakeHolders.RiskManagers.clear();            qoStakeHolders.RiskOwners.clear();            primCats.clear();            secCats.clear();            project = data[0];            qoAll.Users = data[1];            //				projectMetrics = data[2];            reportGrid.setData(data[3]);            projectID = project.projectID;            projCats = project.riskCategorys;            qoQRM.projectTitleStr = project.projectTitle;            projectLabel.markForRedraw();            try {               // Stake holders               qoAll.Users.setProperty("owner", false);               qoAll.Users.setProperty("manager", false);               qoAll.Users.setProperty("user", false);               if (project.riskownersIDs != null) for (var i = 0; i < project.riskownersIDs.length; i++) {                  try {                     var user = qoAll.Users.find("stakeholderID", project.riskownersIDs[i]);                     if (user != null) {                        user.owner = true;                        user.user = true;                     }                  } catch (e) {                     //                  }               }               if (project.riskmanagerIDs != null) for (var i = 0; i < project.riskmanagerIDs.length; i++) {                  try {                     var user = qoAll.Users.find("stakeholderID", project.riskmanagerIDs[i]);                     if (user != null) {                        user.manager = true;                        user.user = true;                     }                  } catch (e) {                     //                  }               }               try {                  projectBasicForm.getItem("projectRiskManagerID").setValueMap(                  qoAll.Users.findAll("manager", true).getValueMap("stakeholderID", "name"));               } catch (e) {                  isc.say("QRM Erorr LHB003");               }               try {                  if (project.riskusersIDs != null) for (var i = 0; i < project.riskusersIDs.length; i++) {                     qoAll.Users.find("stakeholderID", project.riskusersIDs[i]).user = true;                  }               } catch (e) {                  isc.say("QRM Erorr FM003");               }               stakeGrid.setData([]);               stakeGrid.setData(qoAll.Users);               projectBasicForm.setValues(project);               // Tolerance Matric               matEditor.setTolString(project.matrix);               if (project.parentID > 1) {                  matEditor.setLockMatrix(true);               } else {                  matEditor.setLockMatrix(false);               }               //               var tolActions = new Object();               try {                  tolActions.action5 = project.tolActions.find("tolLevel", 5).longName;                  tolActions.action4 = project.tolActions.find("tolLevel", 4).longName;                  tolActions.action3 = project.tolActions.find("tolLevel", 3).longName;                  tolActions.action2 = project.tolActions.find("tolLevel", 2).longName;                  tolActions.action1 = project.tolActions.find("tolLevel", 1).longName;               } catch (e) {                  alert(e.message);                  alert(JSON.stringify(project.tolActions));               }               try {                  tolActionForm.getItem("action5").title = "<span style='color:white;font-weight:bold;background:red;padding:2px 5px 2px 5px;'>" + project.tolActions.find("tolLevel", 5).shortName + "</span>";                  tolActionForm.getItem("action4").title = "<span style='color:white;font-weight:bold;background:orange;padding:2px 5px 2px 5px;'>" + project.tolActions.find("tolLevel", 4).shortName + "</span>";                  tolActionForm.getItem("action3").title = "<span style='color:black;font-weight:bold;background:yellow;padding:2px 5px 2px 5px;'>" + project.tolActions.find("tolLevel", 3).shortName + "</span>";                  tolActionForm.getItem("action2").title = "<span style='color:black;font-weight:bold;background:#00ff00;padding:2px 5px 2px 5px;'>" + project.tolActions.find("tolLevel", 2).shortName + "</span>";                  tolActionForm.getItem("action1").title = "<span style='color:black;font-weight:bold;background:#00ffff;padding:2px 5px 2px 5px;'>" + project.tolActions.find("tolLevel", 1).shortName + "</span>";               } catch (e) {                  alert(e.message);               }               tolActionForm.setData(tolActions);               // Set up the Category editor               projectEditorCategory.deleteCats.clear();               projCats.remove(projCats.find("internalID", 1));               for (var i = 0; i < projCats.getLength(); i++) {                  switch (projCats[i].generation) {                  case -1:                     projCats[i].imageIndicator = 4;                     break;                  case 1:                     projCats[i].imageIndicator = 1;                     break;                  case 0:                     projCats[i].imageIndicator = 5;                     break;                  }                  var sec = projCats[i].sec;                  if (sec != null) {                     for (var j = 0; j < sec.getLength(); j++) {                        switch (sec[j].generation) {                        case -1:                           sec[j].imageIndicator = 4;                           break;                        case 1:                           sec[j].imageIndicator = 1;                           break;                        case 0:                           sec[j].imageIndicator = 5;                           break;                        }                     }                  }               }               primCatGrid.setData(projCats);               secCatGrid.setData([]);               projectEditorPrimCatToolStrip.newBtn.enable();               projectEditorPrimCatToolStrip.delBtn.disable();               projectEditorPrimCatToolStrip.editBtn.disable();               projectEditorSecCatToolStrip.delBtn.disable();               projectEditorSecCatToolStrip.editBtn.disable();               projectEditorSecCatToolStrip.newBtn.disable();               // Risk Editor Tabs To Enable               try {                  projectTabsForm.getItem("riskMitigation").setValue((qoQRM.pageMitigation & project.tabsToUse) ? true : false);                  projectTabsForm.getItem("riskResponse").setValue((qoQRM.pageResponse & project.tabsToUse) ? true : false);                  projectTabsForm.getItem("riskConsequences").setValue((qoQRM.pageConsequence & project.tabsToUse) ? true : false);                  projectTabsForm.getItem("riskControls").setValue((qoQRM.pageControl & project.tabsToUse) ? true : false);                  projectTabsForm.getItem("riskObjectives").setValue((qoQRM.pageObjective & project.tabsToUse) ? true : false);                  projectTabsForm.getItem("riskAttachment").setValue((qoQRM.pageAttachment & project.tabsToUse) ? true : false);                  projectTabsForm.getItem("riskComments").setValue((qoQRM.pageComment & project.tabsToUse) ? true : false);                  projectTabsForm.getItem("riskAudit").setValue((qoQRM.pageAudit & project.tabsToUse) ? true : false);               } catch (e) {                  alert(e.message);               }               // Quantity types               projectEditorConsequence.deleteCons.clear();               for (var i = 0; i < project.impactTypes.getLength(); i++) {                  switch (project.impactTypes[i].generation) {                  case -1:                     project.impactTypes[i].imageIndicator = 4;                     break;                  case 1:                     project.impactTypes[i].imageIndicator = 1;                     break;                  case 0:                     project.impactTypes[i].imageIndicator = 5;                     break;                  }               }               EditorQuantTypesGrid.setData(project.impactTypes);               // Objectives setUp               for (var i = 0; i < project.objectives.getLength(); i++) {                  switch (project.objectives[i].generation) {                  case -1:                     project.objectives[i].imageIndicator = 4;                     break;                  case 1:                     project.objectives[i].imageIndicator = 1;                     break;                  case 0:                     project.objectives[i].imageIndicator = 5;                     break;                  }               }               projectEditorObjective.deleteObjs.clear();               projObjectives = project.objectives;               projObjectives.remove(projObjectives.find("objectiveID", 1));               projObjectives.add({                  objectiveID: 1,                  parentID: -1,                  objective: "Project Objectives"               });               objectiveTreeDS.testData = projObjectives;               idProjectObjectiveTree.fetchData();               qoProjectManager.projectEditorClean();            } catch (e) {               isc.say(e.message);            }         } catch (e) {            alert(e.message);         }      }   });}function preInit() {   qoValueMap.init();   dateEnd.setFullYear(dateEnd.getFullYear() + 10, 12, 31);   isc.DateItem.addProperties({      "endDate": dateEnd   });   qoRiskController.riskID = 0;   qoRiskController.dirty = false;   qoRiskController.allowEditorChanges = true;   qoRiskController.secAllowEdit = false;   qoRiskController.currentRisk = null;   Date.setShortDisplayFormat("toEuropeanShortDate");   Date.setNormalDisplayFormat("toLocaleString");   isc.setAutoDraw(false);   Array.prototype.clear = function () {      this.length = 0;   };   isc.RPCManager.addClassProperties({      handleTransportError: function (transactionNum, status, httpResponseCode, httpResponseText) {         if (httpResponseCode == 401 || httpResponseCode == 405) {            if (httpResponseText.indexOf("LOGGEDOUT") != -1) {               isc.say("Logged out of Quay Risk Manager", function () {                  window.open(httpResponseText.split("*")[1], "_self");               });            } else {               isc.say("Your session has expired or is invalid. You will need to login to Quay Risk Manager.", function () {                  window.open("./login.jsp", "_self");               });            }         } else {            MainPane.hide();            document.getElementById("loadingWrapper").style.display = 'none';            isc.say("An error occured processing your request. The server may be offline. You will need to login to Quay Risk Manager again.");            RPCManager.suspendTransaction(transactionNum);          }      }   });}// Rep Mgrfunction constructRepMgrApp(){   try {           isc.setAutoDraw(false);                      ServerPane = defineServerControlPane();           RepPane = defineRepositoryPane();           SchedJobPane = defineScheduledJobPane();           ComplJobPane = defineCompletedJobPane();                      return TabSet.create({                    ID:"RepMgrTabSet",                    tabBarPosition : "top",                tabs: [                    {title:"Server Control", pane: ServerPane},                    {title:"Repositories", pane:RepPane},                    {title:"Scheduled Jobs", pane: SchedJobPane},                    {title:"Completed Jobs", pane:ComplJobPane}                ]            });   }    catch (e) {           alert(e.message);   }}function defineRepositoryPane(){   isc.VLayout.create({           membersMargin:5,           width:"100%",           height:"100%",           autoDraw:true,           ID:"RepositoryPane"   });      isc.ListGrid.create({           ID:"RepGrid",           width:"100%",           height:"100%",           alternateRecordStyles : true,           fields : [{name:"rep", showTitle:true, title:"Repository",type : "select",width:200},                      {       name : "repmgr",                             width : "200",                             title : "Repository Risk Manager",                             required : true,                             type : "select",                             allowEmptyValue : false,                             optionDataSource: "allUsersDS",                              displayField:"name",                             valueField : "stakeholderID"                     }, {                             name : "active",                             width : "70",                             title : "Active",                             required : true,                             type : "boolean"                     }, {                             name : "autoAddUsers",                             width : "120",                             title : "Auto Add Users",                             required : true,                             type : "boolean"                     }, {                             name : "sessionlimit",                             title : "Session Limit",                             width : "80",                             required : true,                             align:"center",                             editorType: "spinner",                              min: -1, max: 100, step: 1, width: 95                     }, {                             name : "sessions",                             width : "80",                             align:"center",                             title : "# Sessions",                             required : true,                             type:"text"                     }, {                             name : "userlimit",                             title : "User Limit",                             width : "50",                             align:"center",                             required : true,                             editorType: "spinner",                              min: -1, max: 100, step: 1, width: 95                       }, {                             name : "url",                             width : "400",                             title : "Access URL",                             required : true,                             type : "text"                       }],                           getBaseStyle: function(record, rowNum, colNum){                                           if (colNum == 5 ) {                                                   if (record.sessionlimit == -1){                                                           return "rankItem1";                                                   }                                                   if (record.sessions == record.sessionlimit ){                                                           return "rankItem4";                                                   }                                                   if (record.sessions >= record.sessionlimit-3){                                                           return "rankItem3";                                                   }                                                   return "rankItem1";                                           } else {                                                   return this.Super("getBaseStyle", arguments);                                           }                           },                           recordDoubleClick: function(){                                                     editRepository();                                   var record = this.getSelectedRecord();                                   if (record === null) {                                                   return                                   }                                   repositoryForm.setData(record);                           }   });      var repButtons = isc.HLayout.create( {           height : 30,           membersMargin : 5,           layoutMargin : 5,            members : [isc.Label.create({width:"100%"}),                      isc.IButton.create( {                              title : "Refresh",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                      getRepositories();                              }                      }), isc.IButton.create( {                              title : "Edit Repository",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                                   editRepository();                                                   var record = RepGrid.getSelectedRecord();                                                   if (record === null) {                                                                   return                                                   }                                                   repositoryForm.setData(record);                              }                      }), isc.IButton.create( {                              title : "Populate With Test Data",                              width:145,                              autoDraw : false,                              click : function(form, item, value) {                                      seedRepository();                              }                      }), isc.IButton.create( {                              title : "New Repository",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                      newRepository();                              }                      }), isc.IButton.create( {                              title : "Delete Reposiotry",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                           isc.RPCManager.sendRequest( {                                                   evalResult : false,                                                   params : {                                                           "repURL":RepGrid.getSelectedRecord().url,                                                    "NONCACHE":Math.random()                                           },                                           callback : function(rpcResponse, dataJS, rpcRequest) {                                                   data = JSON.parse(dataJS,dateParser);                                                   reps = data[0];                                                   orgUsers = data[1];                                                   repMap.clear();                                                   for (var i = 0; i < reps.length; i++){                                                           repMap.put(reps[i].repID, reps[i]);                                                   }                                                   getRepositoryEditForm();                                                   RepGrid.setData(reps);                                           },                                           actionURL : "./deleteRepository"                                           });                                           }                              }                      )]   });   RepositoryPane.addMember(RepGrid);   RepositoryPane.addMember(repButtons);      return RepositoryPane;}function defineServerControlPane(){   isc.VLayout.create({           membersMargin:5,           width:"100%",           height:"100%",           autoDraw:true,           ID:"ServerControlPane"   });      isc.HLayout.create({           membersMargin:5,           width:"100%",           height:"100%",           autoDraw:true,           ID:"mainH"   });   ServerControlPane.addMember(mainH);      isc.VLayout.create({           membersMargin:5,           width:350,           height:"100%",           autoDraw:true,           ID:"leftV"   });      mainH.addMember(leftV);   isc.VLayout.create({           membersMargin:5,           width:650,           height:"100%",           autoDraw:true,           ID:"leftV2"   });   mainH.addMember(leftV2);      isc.HLayout.create({           membersMargin:5,           width:800,           height:50,           autoDraw:true,           ID:"leftV3"   });// mainH.addMember(leftV3);   mainH.addMember(getSessionPane());   isc.ListGrid.create({           ID:"QueueGrid",           width:"100%",           height:150,           alternateRecordStyles : true,           fields : [                     {name:"method", showTitle:true, title:"Queue",type : "text",width:"100%"},                      {name:"count", showTitle:true, title:"Length",type : "text",width:100, align:"center"}]   });        isc.ListGrid.create({           ID:"TransactionGrid",           width:"100%",           height:"100%",           alternateRecordStyles : true,           sortFieldNum: 1,           sortDirection: "descending",           fields : [                     {name:"method", showTitle:true, title:"Method",type : "text",width:"100%"},                      {name:"count", showTitle:true, title:"Count",type : "text",width:100, align:"center"}]   });      isc.ListGrid.create({           ID:"PeopleGrid",           width:"100%",           height:"100%",           dataSource:allUsersDS,           autoFetch:true,           alternateRecordStyles : true,           fields : [                     {name:"name", showTitle:true, title:"Name",type : "text",width:150},                      {name:"email", showTitle:true, title:"Email",type : "text",width:"100%"},                     {name:"allowLogon", showTitle:true, title:"Allow Logon",type : "boolean",width:100}]   });      var pplButtons = isc.HLayout.create( {           height : 30,           membersMargin : 5,           layoutMargin : 5,           members : [isc.Label.create({width:"100%"}),                      isc.IButton.create( {                              title : "Refresh",                              width:130,                              autoDraw : false,                              click : function(form, item, value) {                                      PeopleGrid.fetchData({nocache:Math.random()});                                  }                      }),isc.IButton.create( {                              title : "Delete",                              width:130,                              autoDraw : false,                              click : function(form, item, value) {                                      deleteUser();                              }                      }), isc.IButton.create( {                              title : "Disable Logon",                              width:130,                              autoDraw : false,                              click : function(form, item, value) {                                      disableLogon();                              }                      }), isc.IButton.create( {                              title : "Enable Logon",                              width:130,                              autoDraw : false,                              click : function(form, item, value) {                                      enableLogon();                              }                      })]   });         var buttons = isc.HLayout.create( {           height : 30,           membersMargin : 5,           layoutMargin : 5,           members : [isc.Label.create({width:"100%"}),                      isc.IButton.create( {                              title : "Refresh",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                      refreshServerControl();                              }                      })]   });   leftV.addMember(isc.Label.create({height:25,contents:"<b>Work Queues</b>"}));   leftV.addMember(QueueGrid);   leftV.addMember(isc.Label.create({height:25,contents:"<b>Server Functions</b>"}));   leftV.addMember(TransactionGrid);   leftV2.addMember(isc.Label.create({height:25,contents:"<b>Stakeholders</b>"}));   leftV2.addMember(PeopleGrid);   leftV2.addMember(pplButtons);   leftV3.addMember(isc.DynamicForm.create({           numCols:4,           width:600,           titleWidth:200,           padding:10,       fields: [           {name: "message",type: "text", width:300, title:"Broadcast Message", required: true},           {type:"button", startRow:false, endRow:true, name:"Send", align:"right",click:"sendBroadcastMessage(this.form.getItem('message').getValue())"}           ]   }));      ServerControlPane.addMember(leftV3);   ServerControlPane.addMember(buttons);      return ServerControlPane;}function defineScheduledJobPane(){   var schedReportTable = isc.ListGrid.create( {           autoDraw : false,           ID:"schedJobTable",           selectionType: "single",           headerHeight: 40,           modalEditing: true,           alternateRecordStyles : true,           height : "100%",           width:"100%",           canEdit:false,           emptyMessage : "No Scheduled Reports",           updateJobScheduleTable:function(){                   isc.RPCManager.showPrompt = false;                   prompt:"Retrieving Scheduled Jobs",                   isc.RPCManager.sendRequest( {                           evalResult : true,                           params : {                                   "OPERATION" : "getUserScheduledJobs"                           },                           callback : function(rpcResponse, jobs, rpcRequest) {                                   try {                                           var d = new Date();                                           var len=jobs.length;                                           for(var i=0; i<len; i++) {                                                   var record = jobs[i];                                                   var timeBits = record.timeStr.split(":");                                                   var hour = parseInt(timeBits[0],10);                                                   var min = parseInt(timeBits[1],10);                                                   d.setUTCHours(hour);                                                   d.setUTCMinutes(min);                                                   d.setUTCSeconds(0);                                                                                        record.timeStr = d.toLocaleTimeString();                                           }                                           schedJobTable.setData(jobs);                                   } catch(e){                                           alert(e.message);                                   }                           },                           actionURL : "./QRMServer"                   });           },           recordDoubleClick: function(){                     getScheduleReportWindow().show();                   scheduleReportForm.setValues(schedJobTable.getSelectedRecord());                   DescendantForm2.setValues(schedJobTable.getSelectedRecord());                   QRMNavigator2.selectRecord(schedJobTable.getSelectedRecord());                   var index = -1;                   try {                   for (var i = 0; QRMNavigator2.getRecord(i).projectID != schedJobTable.getSelectedRecord().projectID &&  i < 1000; i++ ){                           index++;                   }                   } catch (e){                           // can happen if                    }                   QRMNavigator2.selectSingleRecord(index+1);                              },           getBaseStyle: function(record, rowNum, colNum){                   if (colNum == 1 && (record.reportID == -50000 || record.reportID == -50001)) {                           return "qrmRiskExportEntry";                   }                   return this.Super("getBaseStyle", arguments);           },           fields : [{                   name:"description",                    title:"Description",                   type: "text",                   width:150,                   align:"left"           },{                   name : "reportID",                   title : "Report Type",                   type:"select",                   width : 170,                   align : "center"           },{                   name : "projectID",                   title : "Project",                   type:"select",                   width : 130,                   align : "center"           },{                   name : "descendants",                   title : "Desc",                   type:"boolean",                   width : 50,                   align : "center"           },{                    name:"Mon",                   type:"boolean",                   width:40           },{                    name:"Tue",                   type:"boolean",                   width:40           },{                    name:"Wed",                   type:"boolean",                   width:40           },{                    name:"Thu",                   type:"boolean",                   width:40           },{                    name:"Fri",                   type:"boolean",                   width:40           },{                    name:"Sat",                   type:"boolean",                   width:40           },{                    name:"Sun",                   type:"boolean",                   width:40           },{                    title:"Time",                   name:"timeStr",                   type:"text",                   width:80,                   align:"center"           },{                    title:"Email",                   name:"email",                   type:"boolean",                   width:50,                   align:"center"           },{                   name:"database",                    title:"Organisation",                   type: "text",                   width:150,                   align:"center"           },{                   name:"databaseUser",                    title:"Database URL",                   type: "text",                   width:"100%",                   align:"left"           }],           headerSpans: [{                   fields: ["Mon","Tue", "Wed", "Thu","Fri", "Sat", "Sun"],                    title: "Days to Run"           }]   });      var buttons = isc.HLayout.create( {           height : 30,           membersMargin : 5,           layoutMargin : 5,           members : [isc.Label.create({width:"100%"}),                      isc.IButton.create( {                              title : "Refresh",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                      getScheduledJobs();                              }                      }), isc.IButton.create( {                              title : "Delete Job",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                      deleteJob();                              }                      })]   });      var pane = isc.VLayout.create({            membersMargin: 2,           layoutMargin: 2,           layoutTopMargin: 2,           height: "100%",           width: "100%",           members: [schedReportTable, buttons],           layoutBottomMargin: 2,           layoutRightMargin: 2,           layoutLeftMargin: 2,           autoDraw: true   });      return pane;}function defineCompletedJobPane(){   isc.ListGrid.create( {           ID:"completedJobTable",           autoDraw : false,           alternateRecordStyles : true,           height : "100%",           emptyMessage : "No Report or Analysis Jobs Found",           fields : [{                   name:"jobID",                    title:"Job ID",                   type: "text",                   width:80,                   align:"center"           },{                   name : "collected",                   title : "Viewed",                   type:"boolean",                   width : "70",                   align : "center"           },{                   name : "jobDescription",                   title : "Description",                   width : 200,                   align : "left"           }, {                   name : "queuedDate",                   title : "Queued Date",                   width : 200,                   align : "center", type:"time",                   formatCellValue: function (value) {                           if (value) {                                   return value.toDateString ()+"  "+value.toLocaleTimeString ();                           }                   }           }, {                   name : "executedDate",                   title : "Completed",                   width : 200,                   align : "center", type:"date",                   formatCellValue: function (value) {                           if (value) {                                   return value.toDateString ()+"  "+value.toLocaleTimeString ();                           } else {                                   return "Pending";                           }                   }           },{                   name : "jobJdbcURL",                   title : "Database URL",                   width : 400,                   align : "left"           }]});         var buttons = isc.HLayout.create( {           height : 30,           membersMargin : 5,           layoutMargin : 5,           members : [isc.Label.create({width:"100%"}),                      isc.IButton.create( {                              title : "Refresh",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                      getCompletedJobResult();                              }                      }), isc.IButton.create( {                              title : "Delete Two Week Old",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                      deleteJobResult(14);                              }                      }), isc.IButton.create( {                              title : "Delete Two Day Old",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                      deleteJobResult(2);                              }                      }), isc.IButton.create( {                              title : "Delete Job",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                           isc.RPCManager.sendRequest( {                                                   evalResult : false,                                                   params : {                                                   "OPERATION" : "deleteCompletedJob",                                                   "jobID": completedJobTable.getSelectedRecord().jobID,                                                   "url":completedJobTable.getSelectedRecord().jobJdbcURL,                                                   "NONCACHE":Math.random()                                           },                                           callback : function(rpcResponse, dataJS, rpcRequest) {                                                   try {                                                           completedJobTable.setData(JSON.parse(dataJS, dateParserDebug));                                                   } catch (e){alert (e.message);}                                           },                                           actionURL : "./sessionControl"                                           });                              }                      })]   });      var pane = isc.VLayout.create({           membersMargin: 2,           layoutMargin: 2,           layoutTopMargin: 2,           height: "100%",           width: "100%",           members: [completedJobTable, buttons],           layoutBottomMargin: 2,           layoutRightMargin: 2,           layoutLeftMargin: 2,           autoDraw: true   });      return pane;}function disableLogon(){   isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "stakeholderID":PeopleGrid.getSelectedRecord().stakeholderID,           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           refreshServerControl();           PeopleGrid.fetchData({nocache:Math.random()});   },   actionURL : "./disableLogon"   });     }function enableLogon(){   isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "stakeholderID":PeopleGrid.getSelectedRecord().stakeholderID,           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           refreshServerControl();           PeopleGrid.fetchData({nocache:Math.random()});   },   actionURL : "./enableLogon"   });     }function getSessionPane(){      isc.ListGrid.create({           ID:"SessionGrid",           width:"100%",           height:"100%",           timeFormatter:"toLong24HourTime",           alternateRecordStyles : true,           fields : [{                                    name:"name",                                     title:"User Name",                                    type : "text",                                    width:200                                   },{                                     name : "orgName",                             width : "100",                             title : "Organisation"                     }, {                             name : "dbUser",                             width : "100",                             title : "Database User",                             type : "text"                     }, {                             name : "sessionID",                             width : "220",                             title : "Session ID",                             type : "text"                     }, {                             name : "lastAccess",                             width : "180",                             title : "Last Access",                             type : "time"                     }, {                             name : "numTransactions",                             width : "70",                             title : "Transactions",                             type : "text",                             align:"center"                     }, {                             name : "sessionEnabled",                             width : "120",                             title : "Session Enabled",                             required : true,                             type : "boolean"                     }, {                             name : "remoteHost",                             width : "220",                             title : "Remote Host",                             type : "text"                     }, {                             name : "remoteAddr",                             width : "220",                             title : "Remote Address",                             type : "text"                     }]   });      var sessionButtons = isc.HLayout.create( {           height : 30,           membersMargin : 5,           layoutMargin : 5,           members : [isc.Label.create({width:"100%"}),                      isc.IButton.create( {                              title : "Refresh",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                      getSessions();                              }                      }), isc.IButton.create( {                              title : "Disable Session",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                      disableSession();                              }                      }), isc.IButton.create( {                              title : "Clear Defunct Sessions",                              width:140,                              autoDraw : false,                              click : function(form, item, value) {                                      clearDefunct();                              }                      })]   });      var pane = isc.VLayout.create({           membersMargin: 2,           layoutMargin: 2,           layoutTopMargin: 2,           height: "100%",           width: "100%",           members: [isc.Label.create({height:25,contents:"<b>Active Sessions</b>"}),SessionGrid, sessionButtons],           layoutBottomMargin: 2,           layoutRightMargin: 2,           layoutLeftMargin: 2,           autoDraw: true   });      return pane;}function getRepositories(){   isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           data = JSON.parse(dataJS,dateParser);           reps = data[0];           orgUsers = data[1];           repMap.clear();           for (var i = 0; i < reps.length; i++){                   repMap.put(reps[i].repID, reps[i]);           }           getRepositoryEditForm();           RepGrid.setData(reps);   },   actionURL : "./getAllRepositories"   });}function getSessions(){   isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "OPERATION" : "getAllSessions",           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           SessionGrid.setData(JSON.parse(dataJS,dateParserTime2));   },   actionURL : "./sessionControl"   });}function getScheduledJobs(){   isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "OPERATION" : "getAllScheduledJobs",           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           try {           schedJobTable.setData(JSON.parse(dataJS));           } catch (e){alert (e.message);}   },   actionURL : "./sessionControl"   });}function deleteJob(){   isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "OPERATION" : "deleteJob",           "jobID":schedJobTable.getSelectedRecord().internalID,           "repository":schedJobTable.getSelectedRecord().repository,           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           try {           schedJobTable.setData(JSON.parse(dataJS));           } catch (e){alert (e.message);}   },   actionURL : "./sessionControl"   });}function disableSession(){   isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "OPERATION" : "disableSession",           "sessionID" : SessionGrid.getSelectedRecord().sessionID,           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           SessionGrid.setData(JSON.parse(dataJS));   },   actionURL : "./sessionControl"   });}function clearDefunct(){   isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "OPERATION" : "clearDefunct",           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           SessionGrid.setData(JSON.parse(dataJS));   },   actionURL : "./sessionControl"   });}function getRepositoryEditForm(){      isc.DynamicForm.create( {           ID : "repositoryForm",           numCols : 2,           autoDraw : false,           titleWidth : 250,           padding:10,           hiliteRequiredFields : true,           width : "100%",           fields : [{                           type:"header", defaultValue:"Edit Repository"                    },{                            name:"rep",                             showTitle:true,                             editorType:"text",                             title:"Repository",                            width:240,                             required : true                   },{                             name : "repmgr",                             width : 320,                             title : "Repository Risk Manager",                             required : true,                             type : "comboBox",                             allowEmptyValue : false,                             startRow : true,                             optionDataSource: "allUsersDS",                              pickListWidth : 320,                             displayField:"name",                             valueField : "stakeholderID"                     },{                             name : "url",                             width : "600",                             title : "Access URL",                             required : true,                             type : "text",                             allowEmptyValue : false,                             startRow : true                     },{                             name : "active",                             width : "200",                             title : "Active",                             required : true,                             type : "boolean",                             allowEmptyValue : false,                             startRow : true                     },{                             name : "autoAddUsers",                             width : "200",                             title : "Auto Add Users",                             required : true,                             type : "boolean",                             allowEmptyValue : false,                             startRow : true                     },{                             name : "sessionlimit",                             width : "200",                             title : "Session Limit",                             required : true,                             editorType: "spinner",                              min: -1, max: 100, step: 1, width: 70,                             startRow : true                     },{                             name : "userlimit",                             width : "200",                             title : "User Limit",                             required : true,                             editorType: "spinner",                              min: -1, max: 100, step: 1, width: 70,                             startRow : true                     },{                             name : "repLogonMessage",                             width : "600",                             height:"150",                             title : "Logon Message",                             required : true,                             type : "textArea",                             allowEmptyValue : true,                             startRow : true                     },{                             name: "validateBtn",                              title: "Save Changes",                              type: "button",                              colSpan:2,                              endRow:true,                              align:"right",                             click:function(){                                   isc.RPCManager.sendRequest({                                           actionURL: "./updateRep",                                           evalResult: true,                                           params: {                                                   "DATA": JSON.stringify(repositoryForm.getValues())                                                   },                                                   callback: function(rpcResponse, data2, rpcRequest){                                                           alert(data2);                                                           modalEditRepWindow.hide();                                                           getRepositories();                                                   }                                           });                           }                                       }]   });      return repositoryForm;}function editRepository(){           isc.Window.create({                   ID: "modalEditRepWindow",                   title: "Edit Repository",                   width:900,                   height:500,                   autoCenter: true,           isModal: true,           showModalMask: true,           showMinimizeButton:false,           autoDraw: false,           closeClick : function () { this.Super("closeClick", arguments);},           items: [getRepositoryEditForm()]           });   modalEditRepWindow.show();}function seedRepository(){   if (typeof (modalSeedRepWindow) == "undefined"){           isc.Window.create({                   ID: "modalSeedRepWindow",                   title: "Seed Reoository",                   width:500,                   height:320,                   autoCenter: true,           isModal: true,           showModalMask: true,           showMinimizeButton:false,           autoDraw: false,           closeClick : function () { this.Super("closeClick", arguments);},           items: [getSeedForm()]           });   }   modalSeedRepWindow.show();}function getSeedForm(){   isc.DynamicForm.create( {           ID : "seedForm",           numCols : 2,           autoDraw : false,           titleWidth : 250,           padding:10,           width : "100%",           fields : [{           type:"header", defaultValue:"Seed Repository"           }, {                       name: "createProjectStructure", title: "Create Project Structure", type:"boolean", defaultValue:true           }, {                       name: "createTestUsers", title: "Create Test Users", type:"boolean", defaultValue:true           },{                      name: "numRisks", title: "Number of Risks", editorType: "spinner", defaultValue: 0, min: 0, max: 1000, step: 10           },{                      name: "maxNumControlsPerRisk", title: "Max Number of Controls", editorType: "spinner", defaultValue: 5,  min: 0, max: 20, step: 1                   },{                      name: "maxNumberObjectivesPerRisk", title: "Max Number of Objectives", editorType: "spinner", defaultValue: 5, min: 0, max: 20, step: 1              },{                     name: "maxNumberMitigationStepsPerRisk", title: "Max Number of Mitigation", editorType: "spinner", defaultValue: 10, min: 0, max: 20, step: 1                   },{                      name: "maxNumberCommentsPerRisk", title: "Max Number of Comments", editorType: "spinner", defaultValue: 5, min: 0, max: 20, step: 1             },{                      name: "maxNumberConsequences", title: "Max Number of Consequences", editorType: "spinner", defaultValue: 5, min: 0, max: 20, step: 1     },{                           _constructor: "RowSpacerItem"             },{             name: "validateBtn",              title: "Seed Repository",              type: "button",              colSpan:2,              endRow:true,              align:"right",             click:function(){                           isc.RPCManager.sendRequest({                                   actionURL: "./normaliseProject",                                   showPrompt:true,                                   prompt:"Seeding Repository with Data...Please Standby",                                   evalResult: true,                                   params: {                                           "repURL":RepGrid.getSelectedRecord().url,                                            "repDBUser":"",                                           "createProjectStructure":seedForm.getItem("createProjectStructure").getValue(),                                           "createTestUsers":seedForm.getItem("createTestUsers").getValue(),                                           "maxNumControlsPerRisk":seedForm.getItem("maxNumControlsPerRisk").getValue(),                                           "maxNumberObjectivesPerRisk":seedForm.getItem("maxNumberObjectivesPerRisk").getValue(),                                           "maxNumberMitigationStepsPerRisk":seedForm.getItem("maxNumberMitigationStepsPerRisk").getValue(),                                           "maxNumberCommentsPerRisk":seedForm.getItem("maxNumberCommentsPerRisk").getValue(),                                           "numRisks":seedForm.getItem("numRisks").getValue(),                                           "maxNumberConsequences":seedForm.getItem("maxNumberConsequences").getValue()                           },                           callback: function(rpcResponse, list, rpcRequest){                                   alert("Population of Data Complete");                                   modalSeedRepWindow.hide();                           }                           });           }     }           ]   });      return seedForm;}function newRepository(){   isc.DynamicForm.create({           width:550,           titleWidth:180,           padding:10,       ID: "addRepositoryForm",       fields: [           {type:"header", defaultValue:"Create New Repository"},             {name:"repTitle", showTitle:true, editorType:"text", title:"Repository",width:240, required : true},             {name:"reporgcode", showTitle:true, editorType:"text", title:"Organisation Code",width:240, required : true},       {name:"RowSpacerItem0", _constructor:"RowSpacerItem"},                   {                     name : "repmgr",                     width : 320,                     title : "Repository Risk Manager",                     type : "comboBox",                     allowEmptyValue : false,                     optionDataSource: "allUsersDS",                      pickListWidth : 320,                     displayField:"compoundName",                     valueField : "stakeholderID"                   },                    {_constructor:"StaticTextItem", defaultValue:"or", title:""},                   {                             name : "repname",                             width : 320,                             title : "New Risk Manager Name",                             type : "text",                             allowEmptyValue : false,                             startRow : true                   }, {                             name : "repemail",                             width : 320,                             title : "New Risk Manager Email",                             type : "text",                             allowEmptyValue : false,                             startRow : true                   }, {                             name : "reppass",                             width : 320,                             title : "New Risk Manager Password",                             type : "text",                             allowEmptyValue : false,                             startRow : true                  },                  {name:"RowSpacerItem0", _constructor:"RowSpacerItem"},             {name: "validateBtn", title: "Submit", type: "button", align:"right", colSpan:2,                    click: function(){                     try{                           if (addRepositoryForm.validate()){                                   isc.RPCManager.sendRequest({                                           prompt:"Adding Repository",                                           evalResult: true,                                           params: {                                           "OPERATION": "addRepository",                                           "DATA":JSON.stringify(addRepositoryForm.getValues())                                   },                                   callback: function(rpcResponse, data2, rpcRequest){                                           alert(data2);                                           getRepositories();                                   modalAddRepWindow.hide();                                   },                                   actionURL: "./addRepository"                                   });                           } else {                                   alert("Not Valid for some reason");                           }               } catch (e){alert(e.message);}             }           }           ]   });      isc.Window.create({       ID: "modalAddRepWindow",       title: "New Repository",       autoSize:true,       autoCenter: true,       isModal: true,       showModalMask: true,       showMinimizeButton:false,       autoDraw: false,       closeClick : function () { this.Super("closeClick", arguments);},       items: [addRepositoryForm]   });   modalAddRepWindow.show();}function sendBroadcastMessage(value){      isc.RPCManager.sendRequest({           actionURL: './sessionControl',           evalResult: true,           params: {"OPERATION": "sendBroadcastMessage","DATA": value}   });   broadcastWindow.hide();}function dateParserTime2(key, value) {   var a;   if (typeof value === 'string') {           a = /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2}).(\d{3})/.exec(value);           if (a) {                   return new Date(a[1], +a[2] - 1, +a[3], a[4],a[5],a[6],a[7]);           }   }   return value;}function dateParserDebug(key, value) {   var a;   if (typeof value === 'string') {           a = /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/.exec(value);           if (a) {                   return  new Date(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6], 0);           }           a = /^(\d{4})-(\d{2})-(\d{2})/.exec(value);           if (a) {                   return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3]));           }   }   return value;}function deleteJobResult(interval){   isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "OPERATION" : "deleteJobResult",           "DAYINTERVAL":interval,           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           try {                   completedJobTable.setData(JSON.parse(dataJS, dateParserDebug));           } catch (e){alert (e.message);}   },   actionURL : "./sessionControl"   });}function getCompletedJobResult(){   isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "OPERATION" : "getCompletedJobResult",           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           try {                   completedJobTable.setData(JSON.parse(dataJS, dateParserDebug));           } catch (e){alert (e.message);}   },   actionURL : "./sessionControl"   });}function getWorkQueueLengths(){   isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           var queueLengths = JSON.parse(dataJS);           workQueueHTML="<table border=\"1\"><tr><td style=\"width:250px\" align=\"left\"><b>Queue</b></td><td style=\"width:70px\" align=\"center\"><b>Length</b></td></tr>";           workQueueHTML=workQueueHTML+"<tr><td align=\"left\">Email Queue</td><td align=\"center\">"+queueLengths[0]+"</td></tr>";           workQueueHTML=workQueueHTML+"<tr><td align=\"left\">Report Queue</td><td align=\"center\">"+queueLengths[1]+"</td></tr>";           workQueueHTML=workQueueHTML+"<tr><td align=\"left\">Monte Carlo Queue</td><td align=\"center\">"+queueLengths[2]+"</td></tr>";           workQueueHTML=workQueueHTML+"</table>";           workQueuesPane.markForRedraw();   },   actionURL : "./getWorkQueueLengths"   });     }function repMgrInit(){           isc.RestDataSource.create({               ID: "allUsersDS",               fields: [{                   name: "name",                   title: "Name"               },{                   name:"email",                   title:"Email"               },{                   name:"compoundName",                   title:"Compound Name"               },{                   name:"allowLogon",                   title:"Allow Logon",                   type:"boolean"               }           ],              fetchDataURL: "./getAllUsersDS"           });           repMap = new Map();           getRepositories();           refresh();           PeopleGrid.fetchData({nocache:Math.random()});           try {           //      setInterval(refresh, 10000);           } catch (e){                   alert (e.message);           }}function refreshServerControl(){      isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           try {                   QueueGrid.setData(JSON.parse(dataJS));           } catch (e){alert (e.message);}   },   actionURL : "./getWorkQueueLengths"   });        isc.RPCManager.sendRequest( {           evalResult : false,           params : {           "OPERATION" : "getTransactionUsage",           "NONCACHE":Math.random()   },   callback : function(rpcResponse, dataJS, rpcRequest) {           try {                   TransactionGrid.setData(JSON.parse(dataJS));           } catch (e){alert (e.message);}   },   actionURL : "./sessionControl"   });           getSessions();      }function refresh(){   getSessions();   getScheduledJobs();   getCompletedJobResult();   refreshServerControl();}var workQueueHTML;try {   BrowserDetect.init();   defineJSON();   preInit();   qoProjectManager.defineMgrWidgets();   qoQRM.init();   constructApp();      if (!userRepMgr){      getUserProjects(true);   } else {      userID = 1;      toggleMode(2);   }} catch (e) {   alert(e.message);}